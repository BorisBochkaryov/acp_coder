%% Generated by the Erlang ASN.1 BER_V2-compiler version, utilizing bit-syntax:4.0.3
%% Purpose: encoder and decoder to the types in mod ACP

-module('ACP').
-compile(nowarn_unused_vars).
-dialyzer(no_improper_lists).
-include("ACP.hrl").
-asn1_info([{vsn,'4.0.3'},
            {module,'ACP'},
            {options,[{i,"src"},{outdir,"src"},noobj,{i,"."},{i,"asn1"}]}]).

-export([encoding_rule/0,bit_string_format/0,
         legacy_erlang_types/0]).
-export(['dialyzer-suppressions'/1]).
-export([
'enc_AcpMessage'/2,
'enc_Strings'/2,
'enc_AcpBody'/2,
'enc_SDPRespType'/2,
'enc_SDPEntry'/2,
'enc_ThroughconnectType'/2,
'enc_MediaMode'/2,
'enc_ChangeMediaIRType'/2,
'enc_ChangeMediaReasonType'/2,
'enc_ChangeMediaCRType'/2,
'enc_ChangeMediaFailType'/2,
'enc_SignalType'/2,
'enc_Signals'/2,
'enc_SignalDirection'/2,
'enc_ANYPACK'/2
]).

-export([
'dec_AcpMessage'/2,
'dec_Strings'/2,
'dec_AcpBody'/2,
'dec_SDPRespType'/2,
'dec_SDPEntry'/2,
'dec_ThroughconnectType'/2,
'dec_MediaMode'/2,
'dec_ChangeMediaIRType'/2,
'dec_ChangeMediaReasonType'/2,
'dec_ChangeMediaCRType'/2,
'dec_ChangeMediaFailType'/2,
'dec_SignalType'/2,
'dec_Signals'/2,
'dec_SignalDirection'/2,
'dec_ANYPACK'/2
]).

-export([info/0]).


-export([encode/2,decode/2]).

encoding_rule() -> ber.

bit_string_format() -> bitstring.

legacy_erlang_types() -> false.

encode(Type, Data) ->
try iolist_to_binary(element(1, encode_disp(Type, Data))) of
  Bytes ->
    {ok,Bytes}
  catch
    Class:Exception when Class =:= error; Class =:= exit ->
      case Exception of
        {error,Reason}=Error ->
          Error;
        Reason ->
         {error,{asn1,Reason}}
      end
end.

decode(Type,Data) ->
try decode_disp(Type, element(1, ber_decode_nif(Data))) of
  Result ->
    {ok,Result}
  catch
    Class:Exception when Class =:= error; Class =:= exit ->
      case Exception of
        {error,Reason}=Error ->
          Error;
        Reason ->
         {error,{asn1,Reason}}
      end
end.

encode_disp('AcpMessage',Data) -> 'enc_AcpMessage'(Data);
encode_disp('Strings',Data) -> 'enc_Strings'(Data);
encode_disp('AcpBody',Data) -> 'enc_AcpBody'(Data);
encode_disp('SDPRespType',Data) -> 'enc_SDPRespType'(Data);
encode_disp('SDPEntry',Data) -> 'enc_SDPEntry'(Data);
encode_disp('ThroughconnectType',Data) -> 'enc_ThroughconnectType'(Data);
encode_disp('MediaMode',Data) -> 'enc_MediaMode'(Data);
encode_disp('ChangeMediaIRType',Data) -> 'enc_ChangeMediaIRType'(Data);
encode_disp('ChangeMediaReasonType',Data) -> 'enc_ChangeMediaReasonType'(Data);
encode_disp('ChangeMediaCRType',Data) -> 'enc_ChangeMediaCRType'(Data);
encode_disp('ChangeMediaFailType',Data) -> 'enc_ChangeMediaFailType'(Data);
encode_disp('SignalType',Data) -> 'enc_SignalType'(Data);
encode_disp('Signals',Data) -> 'enc_Signals'(Data);
encode_disp('SignalDirection',Data) -> 'enc_SignalDirection'(Data);
encode_disp('ANYPACK',Data) -> 'enc_ANYPACK'(Data);
encode_disp(Type,_Data) -> exit({error,{asn1,{undefined_type,Type}}}).


decode_disp('AcpMessage',Data) -> 'dec_AcpMessage'(Data);
decode_disp('Strings',Data) -> 'dec_Strings'(Data);
decode_disp('AcpBody',Data) -> 'dec_AcpBody'(Data);
decode_disp('SDPRespType',Data) -> 'dec_SDPRespType'(Data);
decode_disp('SDPEntry',Data) -> 'dec_SDPEntry'(Data);
decode_disp('ThroughconnectType',Data) -> 'dec_ThroughconnectType'(Data);
decode_disp('MediaMode',Data) -> 'dec_MediaMode'(Data);
decode_disp('ChangeMediaIRType',Data) -> 'dec_ChangeMediaIRType'(Data);
decode_disp('ChangeMediaReasonType',Data) -> 'dec_ChangeMediaReasonType'(Data);
decode_disp('ChangeMediaCRType',Data) -> 'dec_ChangeMediaCRType'(Data);
decode_disp('ChangeMediaFailType',Data) -> 'dec_ChangeMediaFailType'(Data);
decode_disp('SignalType',Data) -> 'dec_SignalType'(Data);
decode_disp('Signals',Data) -> 'dec_Signals'(Data);
decode_disp('SignalDirection',Data) -> 'dec_SignalDirection'(Data);
decode_disp('ANYPACK',Data) -> 'dec_ANYPACK'(Data);
decode_disp(Type,_Data) -> exit({error,{asn1,{undefined_type,Type}}}).




info() ->
   case ?MODULE:module_info(attributes) of
     Attributes when is_list(Attributes) ->
       case lists:keyfind(asn1_info, 1, Attributes) of
         {_,Info} when is_list(Info) ->
           Info;
         _ ->
           []
       end;
     _ ->
       []
   end.


%%================================
%%  AcpMessage
%%================================
'enc_AcpMessage'(Val) ->
    'enc_AcpMessage'(Val, [<<48>>]).

'enc_AcpMessage'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute uri(1) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute callRef(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute body(3)   External ACP:AcpBody
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'enc_AcpBody'(Cindex3, [<<162>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_AcpMessage'(Tlv) ->
   'dec_AcpMessage'(Tlv, [16]).

'dec_AcpMessage'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute uri(1) with type OCTET STRING
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_octet_string(V1, [131072]),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 64 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute callRef(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_integer(V2, [131073]),

%%-------------------------------------------------
%% attribute body(3)   External ACP:AcpBody
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = 'dec_AcpBody'(V3, [131074]),

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'AcpMessage', Term1, Term2, Term3}.



%%================================
%%  Strings
%%================================
'enc_Strings'(Val) ->
    'enc_Strings'(Val, [<<48>>]).

'enc_Strings'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_Strings_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_Strings_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_Strings_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = encode_restricted_string(H, [<<19>>]),
   'enc_Strings_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_Strings'(Tlv) ->
   'dec_Strings'(Tlv, [16]).

'dec_Strings'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[begin
binary_to_list(decode_restricted_string(V1, [19]))
end
 || V1 <- Tlv1].




%%================================
%%  AcpBody
%%================================
'enc_AcpBody'(Val) ->
    'enc_AcpBody'(Val, []).

'enc_AcpBody'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      setupInd ->
         'INCS3Internals':'enc_SetupIRType'(element(2,Val), [<<161>>]);
      setupIndAck ->
         'INCS3Internals':'enc_SetupAckType'(element(2,Val), [<<162>>]);
      setupReq ->
         'INCS3Internals':'enc_SetupIRType'(element(2,Val), [<<163>>]);
      setupReqAck ->
         'INCS3Internals':'enc_SetupAckType'(element(2,Val), [<<164>>]);
      setupConf ->
         'INCS3Internals':'enc_SetupCRType'(element(2,Val), [<<165>>]);
      setupResp ->
         'INCS3Internals':'enc_SetupCRType'(element(2,Val), [<<166>>]);
      callProgressInd ->
         'INCS3Internals':'enc_CallProgressType'(element(2,Val), [<<167>>]);
      callProgressReq ->
         'INCS3Internals':'enc_CallProgressType'(element(2,Val), [<<168>>]);
      subsequentAddressInd ->
         'INCS3Internals':'enc_SubsequentAddressType'(element(2,Val), [<<169>>]);
      subsequentAddressReq ->
         'INCS3Internals':'enc_SubsequentAddressType'(element(2,Val), [<<170>>]);
      addressEndInd ->
         'INCS3Internals':'enc_AddressEndType'(element(2,Val), [<<171>>]);
      serviceFeatureInd ->
         'INCS3Internals':'enc_ServiceFeatureType'(element(2,Val), [<<172>>]);
      dataInd ->
         'INCS3Internals':'enc_UserDataType'(element(2,Val), [<<173>>]);
      dataReq ->
         'INCS3Internals':'enc_UserDataType'(element(2,Val), [<<174>>]);
      releaseInd ->
         'INCS3Internals':'enc_ReleaseType'(element(2,Val), [<<175>>]);
      releaseIndAck ->
         encode_null(element(2,Val), [<<144>>]);
      releaseReq ->
         'INCS3Internals':'enc_ReleaseType'(element(2,Val), [<<177>>]);
      releaseReqAck ->
         encode_null(element(2,Val), [<<146>>]);
      failureInd ->
         'INCS3Internals':'enc_FailureType'(element(2,Val), [<<179>>]);
      networkSuspendInd ->
         'INCS3Internals':'enc_NetworkSRType'(element(2,Val), [<<180>>]);
      networkSuspendReq ->
         'INCS3Internals':'enc_NetworkSRType'(element(2,Val), [<<181>>]);
      networkResumeInd ->
         'INCS3Internals':'enc_NetworkSRType'(element(2,Val), [<<182>>]);
      networkResumeReq ->
         'INCS3Internals':'enc_NetworkSRType'(element(2,Val), [<<183>>]);
      getRemoteSDPReq ->
         encode_null(element(2,Val), [<<152>>]);
      getRemoteSDPResp ->
         'enc_SDPRespType'(element(2,Val), [<<185>>]);
      acquireSDPReq ->
         encode_null(element(2,Val), [<<154>>]);
      acquireSDPResp ->
         'enc_SDPRespType'(element(2,Val), [<<187>>]);
      throughconnectReq ->
         'enc_ThroughconnectType'(element(2,Val), [<<188>>]);
      generateSignalReq ->
         'enc_SignalType'(element(2,Val), [<<189>>]);
      changeMediaInd ->
         'enc_ChangeMediaIRType'(element(2,Val), [<<190>>]);
      changeMediaReq ->
         'enc_ChangeMediaIRType'(element(2,Val), [<<191,31>>]);
      changeMediaConf ->
         'enc_ChangeMediaCRType'(element(2,Val), [<<191,32>>]);
      changeMediaResp ->
         'enc_ChangeMediaCRType'(element(2,Val), [<<191,33>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_AcpBody'(Tlv) ->
   'dec_AcpBody'(Tlv, []).

'dec_AcpBody'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'setupInd'
    {131073, V1} -> 
        {setupInd, 'INCS3Internals':'dec_SetupIRType'(V1, [])};


%% 'setupIndAck'
    {131074, V1} -> 
        {setupIndAck, 'INCS3Internals':'dec_SetupAckType'(V1, [])};


%% 'setupReq'
    {131075, V1} -> 
        {setupReq, 'INCS3Internals':'dec_SetupIRType'(V1, [])};


%% 'setupReqAck'
    {131076, V1} -> 
        {setupReqAck, 'INCS3Internals':'dec_SetupAckType'(V1, [])};


%% 'setupConf'
    {131077, V1} -> 
        {setupConf, 'INCS3Internals':'dec_SetupCRType'(V1, [])};


%% 'setupResp'
    {131078, V1} -> 
        {setupResp, 'INCS3Internals':'dec_SetupCRType'(V1, [])};


%% 'callProgressInd'
    {131079, V1} -> 
        {callProgressInd, 'INCS3Internals':'dec_CallProgressType'(V1, [])};


%% 'callProgressReq'
    {131080, V1} -> 
        {callProgressReq, 'INCS3Internals':'dec_CallProgressType'(V1, [])};


%% 'subsequentAddressInd'
    {131081, V1} -> 
        {subsequentAddressInd, 'INCS3Internals':'dec_SubsequentAddressType'(V1, [])};


%% 'subsequentAddressReq'
    {131082, V1} -> 
        {subsequentAddressReq, 'INCS3Internals':'dec_SubsequentAddressType'(V1, [])};


%% 'addressEndInd'
    {131083, V1} -> 
        {addressEndInd, 'INCS3Internals':'dec_AddressEndType'(V1, [])};


%% 'serviceFeatureInd'
    {131084, V1} -> 
        {serviceFeatureInd, 'INCS3Internals':'dec_ServiceFeatureType'(V1, [])};


%% 'dataInd'
    {131085, V1} -> 
        {dataInd, 'INCS3Internals':'dec_UserDataType'(V1, [])};


%% 'dataReq'
    {131086, V1} -> 
        {dataReq, 'INCS3Internals':'dec_UserDataType'(V1, [])};


%% 'releaseInd'
    {131087, V1} -> 
        {releaseInd, 'INCS3Internals':'dec_ReleaseType'(V1, [])};


%% 'releaseIndAck'
    {131088, V1} -> 
        {releaseIndAck, decode_null(V1, [])};


%% 'releaseReq'
    {131089, V1} -> 
        {releaseReq, 'INCS3Internals':'dec_ReleaseType'(V1, [])};


%% 'releaseReqAck'
    {131090, V1} -> 
        {releaseReqAck, decode_null(V1, [])};


%% 'failureInd'
    {131091, V1} -> 
        {failureInd, 'INCS3Internals':'dec_FailureType'(V1, [])};


%% 'networkSuspendInd'
    {131092, V1} -> 
        {networkSuspendInd, 'INCS3Internals':'dec_NetworkSRType'(V1, [])};


%% 'networkSuspendReq'
    {131093, V1} -> 
        {networkSuspendReq, 'INCS3Internals':'dec_NetworkSRType'(V1, [])};


%% 'networkResumeInd'
    {131094, V1} -> 
        {networkResumeInd, 'INCS3Internals':'dec_NetworkSRType'(V1, [])};


%% 'networkResumeReq'
    {131095, V1} -> 
        {networkResumeReq, 'INCS3Internals':'dec_NetworkSRType'(V1, [])};


%% 'getRemoteSDPReq'
    {131096, V1} -> 
        {getRemoteSDPReq, decode_null(V1, [])};


%% 'getRemoteSDPResp'
    {131097, V1} -> 
        {getRemoteSDPResp, 'dec_SDPRespType'(V1, [])};


%% 'acquireSDPReq'
    {131098, V1} -> 
        {acquireSDPReq, decode_null(V1, [])};


%% 'acquireSDPResp'
    {131099, V1} -> 
        {acquireSDPResp, 'dec_SDPRespType'(V1, [])};


%% 'throughconnectReq'
    {131100, V1} -> 
        {throughconnectReq, 'dec_ThroughconnectType'(V1, [])};


%% 'generateSignalReq'
    {131101, V1} -> 
        {generateSignalReq, 'dec_SignalType'(V1, [])};


%% 'changeMediaInd'
    {131102, V1} -> 
        {changeMediaInd, 'dec_ChangeMediaIRType'(V1, [])};


%% 'changeMediaReq'
    {131103, V1} -> 
        {changeMediaReq, 'dec_ChangeMediaIRType'(V1, [])};


%% 'changeMediaConf'
    {131104, V1} -> 
        {changeMediaConf, 'dec_ChangeMediaCRType'(V1, [])};


%% 'changeMediaResp'
    {131105, V1} -> 
        {changeMediaResp, 'dec_ChangeMediaCRType'(V1, [])};

      Else -> 
         {asn1_ExtAlt,ber_encode(Else)}
   end
.


%%================================
%%  SDPRespType
%%================================
'enc_SDPRespType'(Val) ->
    'enc_SDPRespType'(Val, []).

'enc_SDPRespType'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      sdp ->
         'INCS3Internals':'enc_SDPType'(element(2,Val), [<<160>>]);
      error ->
         encode_null(element(2,Val), [<<129>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_SDPRespType'(Tlv) ->
   'dec_SDPRespType'(Tlv, []).

'dec_SDPRespType'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'sdp'
    {131072, V1} -> 
        {sdp, 'INCS3Internals':'dec_SDPType'(V1, [])};


%% 'error'
    {131073, V1} -> 
        {error, decode_null(V1, [])};

      Else -> 
         {asn1_ExtAlt,ber_encode(Else)}
   end
.


%%================================
%%  SDPEntry
%%================================
'enc_SDPEntry'(Val) ->
    'enc_SDPEntry'(Val, [<<48>>]).

'enc_SDPEntry'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute name(1) with type UTF8String
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_UTF8_string(Cindex1, [<<12>>]),

%%-------------------------------------------------
%% attribute value(2) with type UTF8String
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_UTF8_string(Cindex2, [<<12>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_SDPEntry'(Tlv) ->
   'dec_SDPEntry'(Tlv, [16]).

'dec_SDPEntry'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute name(1) with type UTF8String
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_UTF8_string(V1, [12]),

%%-------------------------------------------------
%% attribute value(2) with type UTF8String
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_UTF8_string(V2, [12]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'SDPEntry', Term1, Term2}.



%%================================
%%  ThroughconnectType
%%================================
'enc_ThroughconnectType'(Val) ->
    'enc_ThroughconnectType'(Val, [<<48>>]).

'enc_ThroughconnectType'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute localSDP(1)   External ACP:SDPRespType OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_SDPRespType'(Cindex1, [<<161>>])
       end,

%%-------------------------------------------------
%% attribute remoteSDP(2)   External ACP:SDPRespType OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_SDPRespType'(Cindex2, [<<162>>])
       end,

%%-------------------------------------------------
%% attribute mode(3) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes3,EncLen3} = case Cindex3 of
sendOnly -> encode_tags([<<131>>], [0], 1);
recvOnly -> encode_tags([<<131>>], [1], 1);
sendRecv -> encode_tags([<<131>>], [2], 1);
inactive -> encode_tags([<<131>>], [3], 1);
loopBack -> encode_tags([<<131>>], [4], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_ThroughconnectType'(Tlv) ->
   'dec_ThroughconnectType'(Tlv, [16]).

'dec_ThroughconnectType'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute localSDP(1)   External ACP:SDPRespType OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131073,V1}|TempTlv2] ->
    {'dec_SDPRespType'(V1, []), TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute remoteSDP(2)   External ACP:SDPRespType OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131074,V2}|TempTlv3] ->
    {'dec_SDPRespType'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute mode(3) with type ENUMERATED
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = case decode_integer(V3, [131075]) of
0 -> sendOnly;
1 -> recvOnly;
2 -> sendRecv;
3 -> inactive;
4 -> loopBack;
Default1 -> {asn1_enum,Default1}
end,

case Tlv4 of [] -> true; _ -> true end, % ... extra fields skipped
   {'ThroughconnectType', Term1, Term2, Term3}.



%%================================
%%  MediaMode
%%================================
'enc_MediaMode'(Val) ->
    'enc_MediaMode'(Val, [<<10>>]).

'enc_MediaMode'(Val, TagIn) ->
case Val of
sendOnly -> encode_tags(TagIn, [0], 1);
recvOnly -> encode_tags(TagIn, [1], 1);
sendRecv -> encode_tags(TagIn, [2], 1);
inactive -> encode_tags(TagIn, [3], 1);
loopBack -> encode_tags(TagIn, [4], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_MediaMode'(Tlv) ->
   'dec_MediaMode'(Tlv, [10]).

'dec_MediaMode'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> sendOnly;
1 -> recvOnly;
2 -> sendRecv;
3 -> inactive;
4 -> loopBack;
Default1 -> {asn1_enum,Default1}
end.



%%================================
%%  ChangeMediaIRType
%%================================
'enc_ChangeMediaIRType'(Val) ->
    'enc_ChangeMediaIRType'(Val, [<<48>>]).

'enc_ChangeMediaIRType'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute reason(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
voice -> encode_tags([<<129>>], [0], 1);
fax -> encode_tags([<<129>>], [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute sdp(2)   External INCS3Internals:SDPType OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3Internals':'enc_SDPType'(Cindex2, [<<162>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_ChangeMediaIRType'(Tlv) ->
   'dec_ChangeMediaIRType'(Tlv, [16]).

'dec_ChangeMediaIRType'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute reason(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131073]) of
0 -> voice;
1 -> fax;
Default1 -> {asn1_enum,Default1}
end,

%%-------------------------------------------------
%% attribute sdp(2)   External INCS3Internals:SDPType OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131074,V2}|TempTlv3] ->
    {'INCS3Internals':'dec_SDPType'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of [] -> true; _ -> true end, % ... extra fields skipped
   {'ChangeMediaIRType', Term1, Term2}.



%%================================
%%  ChangeMediaReasonType
%%================================
'enc_ChangeMediaReasonType'(Val) ->
    'enc_ChangeMediaReasonType'(Val, [<<10>>]).

'enc_ChangeMediaReasonType'(Val, TagIn) ->
case Val of
voice -> encode_tags(TagIn, [0], 1);
fax -> encode_tags(TagIn, [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_ChangeMediaReasonType'(Tlv) ->
   'dec_ChangeMediaReasonType'(Tlv, [10]).

'dec_ChangeMediaReasonType'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> voice;
1 -> fax;
Default1 -> {asn1_enum,Default1}
end.



%%================================
%%  ChangeMediaCRType
%%================================
'enc_ChangeMediaCRType'(Val) ->
    'enc_ChangeMediaCRType'(Val, []).

'enc_ChangeMediaCRType'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      ok ->
         encode_null(element(2,Val), [<<128>>]);
      fail ->
         'enc_ChangeMediaFailType'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_ChangeMediaCRType'(Tlv) ->
   'dec_ChangeMediaCRType'(Tlv, []).

'dec_ChangeMediaCRType'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'ok'
    {131072, V1} -> 
        {ok, decode_null(V1, [])};


%% 'fail'
    {131073, V1} -> 
        {fail, 'dec_ChangeMediaFailType'(V1, [])};

      Else -> 
         {asn1_ExtAlt,ber_encode(Else)}
   end
.


%%================================
%%  ChangeMediaFailType
%%================================
'enc_ChangeMediaFailType'(Val) ->
    'enc_ChangeMediaFailType'(Val, [<<48>>]).

'enc_ChangeMediaFailType'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute reason(1) with type UTF8String
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_UTF8_string(Cindex1, [<<128>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_ChangeMediaFailType'(Tlv) ->
   'dec_ChangeMediaFailType'(Tlv, [16]).

'dec_ChangeMediaFailType'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute reason(1) with type UTF8String
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_UTF8_string(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'ChangeMediaFailType', Term1}.



%%================================
%%  SignalType
%%================================
'enc_SignalType'(Val) ->
    'enc_SignalType'(Val, [<<48>>]).

'enc_SignalType'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute signal(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
dialTone -> encode_tags([<<128>>], [0], 1);
ringingTone -> encode_tags([<<128>>], [1], 1);
busyTone -> encode_tags([<<128>>], [2], 1);
congestionTone -> encode_tags([<<128>>], [3], 1);
specialInformationTone -> encode_tags([<<128>>], [4], 1);
warningTone -> encode_tags([<<128>>], [5], 1);
payphoneRecognitionTone -> encode_tags([<<128>>], [6], 1);
callWaitingTone -> encode_tags([<<128>>], [7], 1);
callerWaitingTone -> encode_tags([<<128>>], [8], 1);
payTone -> encode_tags([<<128>>], [9], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute direction(2) with type ENUMERATED DEFAULT = external
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_DEFAULT -> {<<>>,0};
         external -> {<<>>,0};
         _ ->
            case Cindex2 of
external -> encode_tags([<<129>>], [0], 1);
internal -> encode_tags([<<129>>], [1], 1);
both -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_SignalType'(Tlv) ->
   'dec_SignalType'(Tlv, [16]).

'dec_SignalType'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute signal(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> dialTone;
1 -> ringingTone;
2 -> busyTone;
3 -> congestionTone;
4 -> specialInformationTone;
5 -> warningTone;
6 -> payphoneRecognitionTone;
7 -> callWaitingTone;
8 -> callerWaitingTone;
9 -> payTone;
Default1 -> {asn1_enum,Default1}
end,

%%-------------------------------------------------
%% attribute direction(2) with type ENUMERATED DEFAULT = external
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {case decode_integer(V2, []) of
0 -> external;
1 -> internal;
2 -> both;
Default2 -> exit({error,{asn1,{illegal_enumerated,Default2}}})
end, TempTlv3};
    _ ->
        {external,Tlv2}
end,

case Tlv3 of [] -> true; _ -> true end, % ... extra fields skipped
   {'SignalType', Term1, Term2}.



%%================================
%%  Signals
%%================================
'enc_Signals'(Val) ->
    'enc_Signals'(Val, [<<10>>]).

'enc_Signals'(Val, TagIn) ->
case Val of
dialTone -> encode_tags(TagIn, [0], 1);
ringingTone -> encode_tags(TagIn, [1], 1);
busyTone -> encode_tags(TagIn, [2], 1);
congestionTone -> encode_tags(TagIn, [3], 1);
specialInformationTone -> encode_tags(TagIn, [4], 1);
warningTone -> encode_tags(TagIn, [5], 1);
payphoneRecognitionTone -> encode_tags(TagIn, [6], 1);
callWaitingTone -> encode_tags(TagIn, [7], 1);
callerWaitingTone -> encode_tags(TagIn, [8], 1);
payTone -> encode_tags(TagIn, [9], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_Signals'(Tlv) ->
   'dec_Signals'(Tlv, [10]).

'dec_Signals'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> dialTone;
1 -> ringingTone;
2 -> busyTone;
3 -> congestionTone;
4 -> specialInformationTone;
5 -> warningTone;
6 -> payphoneRecognitionTone;
7 -> callWaitingTone;
8 -> callerWaitingTone;
9 -> payTone;
Default1 -> {asn1_enum,Default1}
end.



%%================================
%%  SignalDirection
%%================================
'enc_SignalDirection'(Val) ->
    'enc_SignalDirection'(Val, [<<10>>]).

'enc_SignalDirection'(Val, TagIn) ->
case Val of
external -> encode_tags(TagIn, [0], 1);
internal -> encode_tags(TagIn, [1], 1);
both -> encode_tags(TagIn, [2], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_SignalDirection'(Tlv) ->
   'dec_SignalDirection'(Tlv, [10]).

'dec_SignalDirection'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> external;
1 -> internal;
2 -> both;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  ANYPACK
%%================================
'enc_ANYPACK'(Val) ->
    'enc_ANYPACK'(Val, [<<48>>]).

'enc_ANYPACK'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute arg(1) with type BIT STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_unnamed_bit_string(Cindex1, [<<128>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_ANYPACK'(Tlv) ->
   'dec_ANYPACK'(Tlv, [16]).

'dec_ANYPACK'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute arg(1) with type BIT STRING
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_native_bit_string(V1, [131072]),

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'ANYPACK', Term1}.


%%%
%%% Run-time functions.
%%%

'dialyzer-suppressions'(Arg) ->
    ok.

ber_decode_nif(B) ->
    asn1rt_nif:decode_ber_tlv(B).

ber_encode([Tlv]) ->
    ber_encode(Tlv);
ber_encode(Tlv) when is_binary(Tlv) ->
    Tlv;
ber_encode(Tlv) ->
    asn1rt_nif:encode_ber_tlv(Tlv).

collect_parts(TlvList) ->
    collect_parts(TlvList, []).

collect_parts([{_,L}|Rest], Acc) when is_list(L) ->
    collect_parts(Rest, [collect_parts(L)|Acc]);
collect_parts([{3,<<Unused,Bits/binary>>}|Rest], _Acc) ->
    collect_parts_bit(Rest, [Bits], Unused);
collect_parts([{_T,V}|Rest], Acc) ->
    collect_parts(Rest, [V|Acc]);
collect_parts([], Acc) ->
    list_to_binary(lists:reverse(Acc)).

collect_parts_bit([{3,<<Unused,Bits/binary>>}|Rest], Acc, Uacc) ->
    collect_parts_bit(Rest, [Bits|Acc], Unused + Uacc);
collect_parts_bit([], Acc, Uacc) ->
    list_to_binary([Uacc|lists:reverse(Acc)]).

decode_UTF8_string(Tlv, TagsIn) ->
    Val = match_tags(Tlv, TagsIn),
    case Val of
        [_|_] = PartList ->
            collect_parts(PartList);
        Bin ->
            Bin
    end.

decode_integer(Tlv, TagIn) ->
    Bin = match_tags(Tlv, TagIn),
    Len = byte_size(Bin),
    <<Int:Len/signed-unit:8>> = Bin,
    Int.

decode_native_bit_string(Buffer, Tags) ->
    case match_and_collect(Buffer, Tags) of
        <<0>> ->
            <<>>;
        <<Unused,Bits/binary>> ->
            Size = bit_size(Bits) - Unused,
            <<Val:Size/bitstring,_:Unused/bitstring>> = Bits,
            Val
    end.

decode_null(Tlv, Tags) ->
    Val = match_tags(Tlv, Tags),
    case Val of
        <<>> ->
            'NULL';
        _ ->
            exit({error,{asn1,{decode_null,Val}}})
    end.

decode_octet_string(Tlv, TagsIn) ->
    Bin = match_and_collect(Tlv, TagsIn),
    binary:copy(Bin).

decode_restricted_string(Tlv, TagsIn) ->
    match_and_collect(Tlv, TagsIn).

encode_UTF8_string(UTF8String, TagIn) when is_binary(UTF8String) ->
    encode_tags(TagIn, UTF8String, byte_size(UTF8String));
encode_UTF8_string(UTF8String, TagIn) ->
    encode_tags(TagIn, UTF8String, length(UTF8String)).

encode_integer(Val) ->
    Bytes =
        if
            Val >= 0 ->
                encode_integer_pos(Val, []);
            true ->
                encode_integer_neg(Val, [])
        end,
    {Bytes,length(Bytes)}.

encode_integer(Val, Tag) when is_integer(Val) ->
    encode_tags(Tag, encode_integer(Val));
encode_integer(Val, _Tag) ->
    exit({error,{asn1,{encode_integer,Val}}}).

encode_integer_neg(- 1, [B1|_T] = L) when B1 > 127 ->
    L;
encode_integer_neg(N, Acc) ->
    encode_integer_neg(N bsr 8, [N band 255|Acc]).

encode_integer_pos(0, [B|_Acc] = L) when B < 128 ->
    L;
encode_integer_pos(N, Acc) ->
    encode_integer_pos(N bsr 8, [N band 255|Acc]).

encode_length(L) when L =< 127 ->
    {[L],1};
encode_length(L) ->
    Oct = minimum_octets(L),
    Len = length(Oct),
    if
        Len =< 126 ->
            {[128 bor Len|Oct],Len + 1};
        true ->
            exit({error,{asn1,too_long_length_oct,Len}})
    end.

encode_null(_Val, TagIn) ->
    encode_tags(TagIn, [], 0).

encode_restricted_string(OctetList, TagIn) when is_binary(OctetList) ->
    encode_tags(TagIn, OctetList, byte_size(OctetList));
encode_restricted_string(OctetList, TagIn) when is_list(OctetList) ->
    encode_tags(TagIn, OctetList, length(OctetList)).

encode_tags(TagIn, {BytesSoFar,LenSoFar}) ->
    encode_tags(TagIn, BytesSoFar, LenSoFar).

encode_tags([Tag|Trest], BytesSoFar, LenSoFar) ->
    {Bytes2,L2} = encode_length(LenSoFar),
    encode_tags(Trest,
                [Tag,Bytes2|BytesSoFar],
                LenSoFar + byte_size(Tag) + L2);
encode_tags([], BytesSoFar, LenSoFar) ->
    {BytesSoFar,LenSoFar}.

encode_unnamed_bit_string(Bits, TagIn) ->
    Unused = (8 - bit_size(Bits) band 7) band 7,
    Bin = <<Unused,Bits/bitstring,0:Unused>>,
    encode_tags(TagIn, Bin, byte_size(Bin)).

match_and_collect(Tlv, TagsIn) ->
    Val = match_tags(Tlv, TagsIn),
    case Val of
        [_|_] = PartList ->
            collect_parts(PartList);
        Bin when is_binary(Bin) ->
            Bin
    end.

match_tags({T,V}, [T]) ->
    V;
match_tags({T,V}, [T|Tt]) ->
    match_tags(V, Tt);
match_tags([{T,V}], [T|Tt]) ->
    match_tags(V, Tt);
match_tags([{T,_V}|_] = Vlist, [T]) ->
    Vlist;
match_tags(Tlv, []) ->
    Tlv;
match_tags({Tag,_V} = Tlv, [T|_Tt]) ->
    exit({error,{asn1,{wrong_tag,{{expected,T},{got,Tag,Tlv}}}}}).

minimum_octets(0, Acc) ->
    Acc;
minimum_octets(Val, Acc) ->
    minimum_octets(Val bsr 8, [Val band 255|Acc]).

minimum_octets(Val) ->
    minimum_octets(Val, []).
