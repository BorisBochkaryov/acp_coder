%% Generated by the Erlang ASN.1 BER_V2-compiler version, utilizing bit-syntax:4.0.3
%% Purpose: encoder and decoder to the types in mod ACPdatatypes

-module('ACPdatatypes').
-compile(nowarn_unused_vars).
-dialyzer(no_improper_lists).
-include("ACPdatatypes.hrl").
-asn1_info([{vsn,'4.0.3'},
            {module,'ACPdatatypes'},
            {options,[{i,"src"},{outdir,"src"},noobj,{i,"."},{i,"asn1"}]}]).

-export([encoding_rule/0,bit_string_format/0,
         legacy_erlang_types/0]).
-export(['dialyzer-suppressions'/1]).
-export([
'enc_CalledPartyNumber'/2,
'enc_RedirectionNumber'/2,
'enc_CallTransferNumber'/2,
'enc_CallingPartyNumber'/2,
'enc_CallingPartysCategory'/2,
'enc_CalledPartysCategory'/2,
'enc_OriginalCalledNumber'/2,
'enc_RedirectingNumber'/2,
'enc_NAIType'/2,
'enc_INNIType'/2,
'enc_NIType'/2,
'enc_NPIType'/2,
'enc_ARPIType'/2,
'enc_ScreeningType'/2,
'enc_ACPDestinationRoutingAddress'/2,
'enc_ACPRedirectionInformation'/2,
'enc_ACPOriginalRedirectionReason'/2,
'enc_ACPRedirectingIndicator'/2,
'enc_ACPRedirectingReason'/2,
'enc_OptionalBackwardCallInidicators'/2,
'enc_InBandInfoIndicator'/2,
'enc_CallDiversionIndicator'/2,
'enc_SimpleSegmentationIndicator'/2,
'enc_MLPPUserIndicator'/2,
'enc_GenericNotificationIndicatorList'/2,
'enc_GenericNotificationIndicator'/2,
'enc_TrunkGroupId'/2
]).

-export([
'dec_CalledPartyNumber'/2,
'dec_RedirectionNumber'/2,
'dec_CallTransferNumber'/2,
'dec_CallingPartyNumber'/2,
'dec_CallingPartysCategory'/2,
'dec_CalledPartysCategory'/2,
'dec_OriginalCalledNumber'/2,
'dec_RedirectingNumber'/2,
'dec_NAIType'/2,
'dec_INNIType'/2,
'dec_NIType'/2,
'dec_NPIType'/2,
'dec_ARPIType'/2,
'dec_ScreeningType'/2,
'dec_ACPDestinationRoutingAddress'/2,
'dec_ACPRedirectionInformation'/2,
'dec_ACPOriginalRedirectionReason'/2,
'dec_ACPRedirectingIndicator'/2,
'dec_ACPRedirectingReason'/2,
'dec_OptionalBackwardCallInidicators'/2,
'dec_InBandInfoIndicator'/2,
'dec_CallDiversionIndicator'/2,
'dec_SimpleSegmentationIndicator'/2,
'dec_MLPPUserIndicator'/2,
'dec_GenericNotificationIndicatorList'/2,
'dec_GenericNotificationIndicator'/2,
'dec_TrunkGroupId'/2
]).

-export([
'minACPCalledPartyNumberLength'/0,
'maxACPCalledPartyNumberLength'/0,
'minACPCallingPartyNumberLength'/0,
'maxACPCallingPartyNumberLength'/0,
'numOfACPAddresses'/0,
'numOfGenericNotificatioIndicators'/0
]).

-export([info/0]).


-export([encode/2,decode/2]).

encoding_rule() -> ber.

bit_string_format() -> bitstring.

legacy_erlang_types() -> false.

encode(Type, Data) ->
try iolist_to_binary(element(1, encode_disp(Type, Data))) of
  Bytes ->
    {ok,Bytes}
  catch
    Class:Exception when Class =:= error; Class =:= exit ->
      case Exception of
        {error,Reason}=Error ->
          Error;
        Reason ->
         {error,{asn1,Reason}}
      end
end.

decode(Type,Data) ->
try decode_disp(Type, element(1, ber_decode_nif(Data))) of
  Result ->
    {ok,Result}
  catch
    Class:Exception when Class =:= error; Class =:= exit ->
      case Exception of
        {error,Reason}=Error ->
          Error;
        Reason ->
         {error,{asn1,Reason}}
      end
end.

encode_disp('CalledPartyNumber',Data) -> 'enc_CalledPartyNumber'(Data);
encode_disp('RedirectionNumber',Data) -> 'enc_RedirectionNumber'(Data);
encode_disp('CallTransferNumber',Data) -> 'enc_CallTransferNumber'(Data);
encode_disp('CallingPartyNumber',Data) -> 'enc_CallingPartyNumber'(Data);
encode_disp('CallingPartysCategory',Data) -> 'enc_CallingPartysCategory'(Data);
encode_disp('CalledPartysCategory',Data) -> 'enc_CalledPartysCategory'(Data);
encode_disp('OriginalCalledNumber',Data) -> 'enc_OriginalCalledNumber'(Data);
encode_disp('RedirectingNumber',Data) -> 'enc_RedirectingNumber'(Data);
encode_disp('NAIType',Data) -> 'enc_NAIType'(Data);
encode_disp('INNIType',Data) -> 'enc_INNIType'(Data);
encode_disp('NIType',Data) -> 'enc_NIType'(Data);
encode_disp('NPIType',Data) -> 'enc_NPIType'(Data);
encode_disp('ARPIType',Data) -> 'enc_ARPIType'(Data);
encode_disp('ScreeningType',Data) -> 'enc_ScreeningType'(Data);
encode_disp('ACPDestinationRoutingAddress',Data) -> 'enc_ACPDestinationRoutingAddress'(Data);
encode_disp('ACPRedirectionInformation',Data) -> 'enc_ACPRedirectionInformation'(Data);
encode_disp('ACPOriginalRedirectionReason',Data) -> 'enc_ACPOriginalRedirectionReason'(Data);
encode_disp('ACPRedirectingIndicator',Data) -> 'enc_ACPRedirectingIndicator'(Data);
encode_disp('ACPRedirectingReason',Data) -> 'enc_ACPRedirectingReason'(Data);
encode_disp('OptionalBackwardCallInidicators',Data) -> 'enc_OptionalBackwardCallInidicators'(Data);
encode_disp('InBandInfoIndicator',Data) -> 'enc_InBandInfoIndicator'(Data);
encode_disp('CallDiversionIndicator',Data) -> 'enc_CallDiversionIndicator'(Data);
encode_disp('SimpleSegmentationIndicator',Data) -> 'enc_SimpleSegmentationIndicator'(Data);
encode_disp('MLPPUserIndicator',Data) -> 'enc_MLPPUserIndicator'(Data);
encode_disp('GenericNotificationIndicatorList',Data) -> 'enc_GenericNotificationIndicatorList'(Data);
encode_disp('GenericNotificationIndicator',Data) -> 'enc_GenericNotificationIndicator'(Data);
encode_disp('TrunkGroupId',Data) -> 'enc_TrunkGroupId'(Data);
encode_disp(Type,_Data) -> exit({error,{asn1,{undefined_type,Type}}}).


decode_disp('CalledPartyNumber',Data) -> 'dec_CalledPartyNumber'(Data);
decode_disp('RedirectionNumber',Data) -> 'dec_RedirectionNumber'(Data);
decode_disp('CallTransferNumber',Data) -> 'dec_CallTransferNumber'(Data);
decode_disp('CallingPartyNumber',Data) -> 'dec_CallingPartyNumber'(Data);
decode_disp('CallingPartysCategory',Data) -> 'dec_CallingPartysCategory'(Data);
decode_disp('CalledPartysCategory',Data) -> 'dec_CalledPartysCategory'(Data);
decode_disp('OriginalCalledNumber',Data) -> 'dec_OriginalCalledNumber'(Data);
decode_disp('RedirectingNumber',Data) -> 'dec_RedirectingNumber'(Data);
decode_disp('NAIType',Data) -> 'dec_NAIType'(Data);
decode_disp('INNIType',Data) -> 'dec_INNIType'(Data);
decode_disp('NIType',Data) -> 'dec_NIType'(Data);
decode_disp('NPIType',Data) -> 'dec_NPIType'(Data);
decode_disp('ARPIType',Data) -> 'dec_ARPIType'(Data);
decode_disp('ScreeningType',Data) -> 'dec_ScreeningType'(Data);
decode_disp('ACPDestinationRoutingAddress',Data) -> 'dec_ACPDestinationRoutingAddress'(Data);
decode_disp('ACPRedirectionInformation',Data) -> 'dec_ACPRedirectionInformation'(Data);
decode_disp('ACPOriginalRedirectionReason',Data) -> 'dec_ACPOriginalRedirectionReason'(Data);
decode_disp('ACPRedirectingIndicator',Data) -> 'dec_ACPRedirectingIndicator'(Data);
decode_disp('ACPRedirectingReason',Data) -> 'dec_ACPRedirectingReason'(Data);
decode_disp('OptionalBackwardCallInidicators',Data) -> 'dec_OptionalBackwardCallInidicators'(Data);
decode_disp('InBandInfoIndicator',Data) -> 'dec_InBandInfoIndicator'(Data);
decode_disp('CallDiversionIndicator',Data) -> 'dec_CallDiversionIndicator'(Data);
decode_disp('SimpleSegmentationIndicator',Data) -> 'dec_SimpleSegmentationIndicator'(Data);
decode_disp('MLPPUserIndicator',Data) -> 'dec_MLPPUserIndicator'(Data);
decode_disp('GenericNotificationIndicatorList',Data) -> 'dec_GenericNotificationIndicatorList'(Data);
decode_disp('GenericNotificationIndicator',Data) -> 'dec_GenericNotificationIndicator'(Data);
decode_disp('TrunkGroupId',Data) -> 'dec_TrunkGroupId'(Data);
decode_disp(Type,_Data) -> exit({error,{asn1,{undefined_type,Type}}}).




info() ->
   case ?MODULE:module_info(attributes) of
     Attributes when is_list(Attributes) ->
       case lists:keyfind(asn1_info, 1, Attributes) of
         {_,Info} when is_list(Info) ->
           Info;
         _ ->
           []
       end;
     _ ->
       []
   end.


%%================================
%%  CalledPartyNumber
%%================================
'enc_CalledPartyNumber'(Val) ->
    'enc_CalledPartyNumber'(Val, [<<48>>]).

'enc_CalledPartyNumber'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6} = Val,

%%-------------------------------------------------
%% attribute nai(1) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex1 of
spare -> encode_tags([<<128>>], [0], 1);
subscriberNumber -> encode_tags([<<128>>], [1], 1);
unknown -> encode_tags([<<128>>], [2], 1);
nationalNumber -> encode_tags([<<128>>], [3], 1);
internationNumber -> encode_tags([<<128>>], [4], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end
       end,

%%-------------------------------------------------
%% attribute ni(2) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex2 of
private -> encode_tags([<<129>>], [0], 1);
local -> encode_tags([<<129>>], [1], 1);
zone -> encode_tags([<<129>>], [2], 1);
intercity -> encode_tags([<<129>>], [3], 1);
international -> encode_tags([<<129>>], [4], 1);
emergency -> encode_tags([<<129>>], [5], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end
       end,

%%-------------------------------------------------
%% attribute incomplete(3) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_boolean(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute inni(4) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex4 of
routingToInternalNumberAllowed -> encode_tags([<<131>>], [0], 1);
routingToInternalNumberNotAllowed -> encode_tags([<<131>>], [1], 1);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end
       end,

%%-------------------------------------------------
%% attribute npi(5) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex5 of
spare -> encode_tags([<<132>>], [0], 1);
isdnTelephony -> encode_tags([<<132>>], [1], 1);
reserved1 -> encode_tags([<<132>>], [3], 1);
reserved2 -> encode_tags([<<132>>], [4], 1);
reserved3 -> encode_tags([<<132>>], [5], 1);
Enumval5 -> exit({error,{asn1, {enumerated_not_in_range,Enumval5}}})
end
       end,

%%-------------------------------------------------
%% attribute digits(6) with type PrintableString
%%-------------------------------------------------
   {EncBytes6,EncLen6} = encode_restricted_string(Cindex6, [<<133>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_CalledPartyNumber'(Tlv) ->
   'dec_CalledPartyNumber'(Tlv, [16]).

'dec_CalledPartyNumber'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute nai(1) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {case decode_integer(V1, []) of
0 -> spare;
1 -> subscriberNumber;
2 -> unknown;
3 -> nationalNumber;
4 -> internationNumber;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end, TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute ni(2) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {case decode_integer(V2, []) of
0 -> private;
1 -> local;
2 -> zone;
3 -> intercity;
4 -> international;
5 -> emergency;
Default2 -> exit({error,{asn1,{illegal_enumerated,Default2}}})
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute incomplete(3) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {decode_boolean(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute inni(4) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {case decode_integer(V4, []) of
0 -> routingToInternalNumberAllowed;
1 -> routingToInternalNumberNotAllowed;
Default3 -> exit({error,{asn1,{illegal_enumerated,Default3}}})
end, TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute npi(5) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {case decode_integer(V5, []) of
0 -> spare;
1 -> isdnTelephony;
3 -> reserved1;
4 -> reserved2;
5 -> reserved3;
Default4 -> exit({error,{asn1,{illegal_enumerated,Default4}}})
end, TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute digits(6) with type PrintableString
%%-------------------------------------------------
[V6|Tlv7] = Tlv6, 
Term6 = begin
binary_to_list(decode_restricted_string(V6, [131077]))
end
,

case Tlv7 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv7}}}) % extra fields not allowed
end,
   {'CalledPartyNumber', Term1, Term2, Term3, Term4, Term5, Term6}.



%%================================
%%  RedirectionNumber
%%================================
'enc_RedirectionNumber'(Val) ->
    'enc_RedirectionNumber'(Val, [<<48>>]).

'enc_RedirectionNumber'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6} = Val,

%%-------------------------------------------------
%% attribute nai(1) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex1 of
spare -> encode_tags([<<128>>], [0], 1);
subscriberNumber -> encode_tags([<<128>>], [1], 1);
unknown -> encode_tags([<<128>>], [2], 1);
nationalNumber -> encode_tags([<<128>>], [3], 1);
internationNumber -> encode_tags([<<128>>], [4], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end
       end,

%%-------------------------------------------------
%% attribute ni(2) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex2 of
private -> encode_tags([<<129>>], [0], 1);
local -> encode_tags([<<129>>], [1], 1);
zone -> encode_tags([<<129>>], [2], 1);
intercity -> encode_tags([<<129>>], [3], 1);
international -> encode_tags([<<129>>], [4], 1);
emergency -> encode_tags([<<129>>], [5], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end
       end,

%%-------------------------------------------------
%% attribute incomplete(3) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_boolean(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute inni(4) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex4 of
routingToInternalNumberAllowed -> encode_tags([<<131>>], [0], 1);
routingToInternalNumberNotAllowed -> encode_tags([<<131>>], [1], 1);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end
       end,

%%-------------------------------------------------
%% attribute npi(5) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex5 of
spare -> encode_tags([<<132>>], [0], 1);
isdnTelephony -> encode_tags([<<132>>], [1], 1);
reserved1 -> encode_tags([<<132>>], [3], 1);
reserved2 -> encode_tags([<<132>>], [4], 1);
reserved3 -> encode_tags([<<132>>], [5], 1);
Enumval5 -> exit({error,{asn1, {enumerated_not_in_range,Enumval5}}})
end
       end,

%%-------------------------------------------------
%% attribute digits(6) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex6, [<<133>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_RedirectionNumber'(Tlv) ->
   'dec_RedirectionNumber'(Tlv, [16]).

'dec_RedirectionNumber'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute nai(1) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {case decode_integer(V1, []) of
0 -> spare;
1 -> subscriberNumber;
2 -> unknown;
3 -> nationalNumber;
4 -> internationNumber;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end, TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute ni(2) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {case decode_integer(V2, []) of
0 -> private;
1 -> local;
2 -> zone;
3 -> intercity;
4 -> international;
5 -> emergency;
Default2 -> exit({error,{asn1,{illegal_enumerated,Default2}}})
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute incomplete(3) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {decode_boolean(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute inni(4) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {case decode_integer(V4, []) of
0 -> routingToInternalNumberAllowed;
1 -> routingToInternalNumberNotAllowed;
Default3 -> exit({error,{asn1,{illegal_enumerated,Default3}}})
end, TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute npi(5) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {case decode_integer(V5, []) of
0 -> spare;
1 -> isdnTelephony;
3 -> reserved1;
4 -> reserved2;
5 -> reserved3;
Default4 -> exit({error,{asn1,{illegal_enumerated,Default4}}})
end, TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute digits(6) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {begin
Val1 = decode_octet_string(V6, []),
C1 = byte_size(Val1),
if 0 =< C1, C1 =< 27 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

case Tlv7 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv7}}}) % extra fields not allowed
end,
   {'RedirectionNumber', Term1, Term2, Term3, Term4, Term5, Term6}.



%%================================
%%  CallTransferNumber
%%================================
'enc_CallTransferNumber'(Val) ->
    'enc_CallTransferNumber'(Val, [<<48>>]).

'enc_CallTransferNumber'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6} = Val,

%%-------------------------------------------------
%% attribute nai(1) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex1 of
spare -> encode_tags([<<128>>], [0], 1);
subscriberNumber -> encode_tags([<<128>>], [1], 1);
unknown -> encode_tags([<<128>>], [2], 1);
nationalNumber -> encode_tags([<<128>>], [3], 1);
internationNumber -> encode_tags([<<128>>], [4], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end
       end,

%%-------------------------------------------------
%% attribute ni(2) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex2 of
private -> encode_tags([<<129>>], [0], 1);
local -> encode_tags([<<129>>], [1], 1);
zone -> encode_tags([<<129>>], [2], 1);
intercity -> encode_tags([<<129>>], [3], 1);
international -> encode_tags([<<129>>], [4], 1);
emergency -> encode_tags([<<129>>], [5], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end
       end,

%%-------------------------------------------------
%% attribute incomplete(3) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_boolean(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute inni(4) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex4 of
routingToInternalNumberAllowed -> encode_tags([<<131>>], [0], 1);
routingToInternalNumberNotAllowed -> encode_tags([<<131>>], [1], 1);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end
       end,

%%-------------------------------------------------
%% attribute npi(5) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex5 of
spare -> encode_tags([<<132>>], [0], 1);
isdnTelephony -> encode_tags([<<132>>], [1], 1);
reserved1 -> encode_tags([<<132>>], [3], 1);
reserved2 -> encode_tags([<<132>>], [4], 1);
reserved3 -> encode_tags([<<132>>], [5], 1);
Enumval5 -> exit({error,{asn1, {enumerated_not_in_range,Enumval5}}})
end
       end,

%%-------------------------------------------------
%% attribute digits(6) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex6, [<<133>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_CallTransferNumber'(Tlv) ->
   'dec_CallTransferNumber'(Tlv, [16]).

'dec_CallTransferNumber'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute nai(1) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {case decode_integer(V1, []) of
0 -> spare;
1 -> subscriberNumber;
2 -> unknown;
3 -> nationalNumber;
4 -> internationNumber;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end, TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute ni(2) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {case decode_integer(V2, []) of
0 -> private;
1 -> local;
2 -> zone;
3 -> intercity;
4 -> international;
5 -> emergency;
Default2 -> exit({error,{asn1,{illegal_enumerated,Default2}}})
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute incomplete(3) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {decode_boolean(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute inni(4) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {case decode_integer(V4, []) of
0 -> routingToInternalNumberAllowed;
1 -> routingToInternalNumberNotAllowed;
Default3 -> exit({error,{asn1,{illegal_enumerated,Default3}}})
end, TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute npi(5) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {case decode_integer(V5, []) of
0 -> spare;
1 -> isdnTelephony;
3 -> reserved1;
4 -> reserved2;
5 -> reserved3;
Default4 -> exit({error,{asn1,{illegal_enumerated,Default4}}})
end, TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute digits(6) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {begin
Val1 = decode_octet_string(V6, []),
C1 = byte_size(Val1),
if 0 =< C1, C1 =< 27 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

case Tlv7 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv7}}}) % extra fields not allowed
end,
   {'CallTransferNumber', Term1, Term2, Term3, Term4, Term5, Term6}.



%%================================
%%  CallingPartyNumber
%%================================
'enc_CallingPartyNumber'(Val) ->
    'enc_CallingPartyNumber'(Val, [<<48>>]).

'enc_CallingPartyNumber'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7} = Val,

%%-------------------------------------------------
%% attribute nai(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
spare -> encode_tags([<<128>>], [0], 1);
subscriberNumber -> encode_tags([<<128>>], [1], 1);
unknown -> encode_tags([<<128>>], [2], 1);
nationalNumber -> encode_tags([<<128>>], [3], 1);
internationNumber -> encode_tags([<<128>>], [4], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute ni(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
private -> encode_tags([<<129>>], [0], 1);
local -> encode_tags([<<129>>], [1], 1);
zone -> encode_tags([<<129>>], [2], 1);
intercity -> encode_tags([<<129>>], [3], 1);
international -> encode_tags([<<129>>], [4], 1);
emergency -> encode_tags([<<129>>], [5], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute incomplete(3) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_boolean(Cindex3, [<<130>>]),

%%-------------------------------------------------
%% attribute npi(4) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes4,EncLen4} = case Cindex4 of
spare -> encode_tags([<<131>>], [0], 1);
isdnTelephony -> encode_tags([<<131>>], [1], 1);
reserved1 -> encode_tags([<<131>>], [3], 1);
reserved2 -> encode_tags([<<131>>], [4], 1);
reserved3 -> encode_tags([<<131>>], [5], 1);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end,

%%-------------------------------------------------
%% attribute apri(5) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes5,EncLen5} = case Cindex5 of
presentationAllowed -> encode_tags([<<132>>], [0], 1);
presentationRestricted -> encode_tags([<<132>>], [1], 1);
addressNotAvailable -> encode_tags([<<132>>], [2], 1);
spare -> encode_tags([<<132>>], [3], 1);
Enumval5 -> exit({error,{asn1, {enumerated_not_in_range,Enumval5}}})
end,

%%-------------------------------------------------
%% attribute screening(6) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes6,EncLen6} = case Cindex6 of
userProvidedNotVerified -> encode_tags([<<133>>], [0], 1);
userProvidedVerifiedAndPassed -> encode_tags([<<133>>], [1], 1);
userProvidedVerifiedAndFailed -> encode_tags([<<133>>], [2], 1);
networkProvided -> encode_tags([<<133>>], [3], 1);
Enumval6 -> exit({error,{asn1, {enumerated_not_in_range,Enumval6}}})
end,

%%-------------------------------------------------
%% attribute digits(7) with type PrintableString
%%-------------------------------------------------
   {EncBytes7,EncLen7} = encode_restricted_string(Cindex7, [<<134>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_CallingPartyNumber'(Tlv) ->
   'dec_CallingPartyNumber'(Tlv, [16]).

'dec_CallingPartyNumber'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute nai(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> spare;
1 -> subscriberNumber;
2 -> unknown;
3 -> nationalNumber;
4 -> internationNumber;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute ni(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> private;
1 -> local;
2 -> zone;
3 -> intercity;
4 -> international;
5 -> emergency;
Default2 -> exit({error,{asn1,{illegal_enumerated,Default2}}})
end,

%%-------------------------------------------------
%% attribute incomplete(3) with type BOOLEAN
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = decode_boolean(V3, [131074]),

%%-------------------------------------------------
%% attribute npi(4) with type ENUMERATED
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = case decode_integer(V4, [131075]) of
0 -> spare;
1 -> isdnTelephony;
3 -> reserved1;
4 -> reserved2;
5 -> reserved3;
Default3 -> exit({error,{asn1,{illegal_enumerated,Default3}}})
end,

%%-------------------------------------------------
%% attribute apri(5) with type ENUMERATED
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = case decode_integer(V5, [131076]) of
0 -> presentationAllowed;
1 -> presentationRestricted;
2 -> addressNotAvailable;
3 -> spare;
Default4 -> exit({error,{asn1,{illegal_enumerated,Default4}}})
end,

%%-------------------------------------------------
%% attribute screening(6) with type ENUMERATED
%%-------------------------------------------------
[V6|Tlv7] = Tlv6, 
Term6 = case decode_integer(V6, [131077]) of
0 -> userProvidedNotVerified;
1 -> userProvidedVerifiedAndPassed;
2 -> userProvidedVerifiedAndFailed;
3 -> networkProvided;
Default5 -> exit({error,{asn1,{illegal_enumerated,Default5}}})
end,

%%-------------------------------------------------
%% attribute digits(7) with type PrintableString
%%-------------------------------------------------
[V7|Tlv8] = Tlv7, 
Term7 = begin
binary_to_list(decode_restricted_string(V7, [131078]))
end
,

case Tlv8 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv8}}}) % extra fields not allowed
end,
   {'CallingPartyNumber', Term1, Term2, Term3, Term4, Term5, Term6, Term7}.



%%================================
%%  CallingPartysCategory
%%================================
'enc_CallingPartysCategory'(Val) ->
    'enc_CallingPartysCategory'(Val, [<<10>>]).

'enc_CallingPartysCategory'(Val, TagIn) ->
case Val of
unknownAtThisTime -> encode_tags(TagIn, [0], 1);
operatorFrench -> encode_tags(TagIn, [1], 1);
operatorEngish -> encode_tags(TagIn, [2], 1);
operatorGerman -> encode_tags(TagIn, [3], 1);
operatorRussian -> encode_tags(TagIn, [4], 1);
operatorSpanish -> encode_tags(TagIn, [5], 1);
reserved -> encode_tags(TagIn, [9], 1);
ordinarySubscriber -> encode_tags(TagIn, [10], 1);
subscriberWithPriority -> encode_tags(TagIn, [11], 1);
dataCall -> encode_tags(TagIn, [12], 1);
testCall -> encode_tags(TagIn, [13], 1);
spare -> encode_tags(TagIn, [14], 1);
payphone -> encode_tags(TagIn, [15], 1);
category0 -> encode_tags(TagIn, [0,224], 2);
hotelsSubscriber -> encode_tags(TagIn, [0,225], 2);
freeSubscriber -> encode_tags(TagIn, [0,226], 2);
paidSubscriber -> encode_tags(TagIn, [0,227], 2);
localSubscriber -> encode_tags(TagIn, [0,228], 2);
localTaksofon -> encode_tags(TagIn, [0,229], 2);
autoCallI -> encode_tags(TagIn, [0,240], 2);
semiautoCallI -> encode_tags(TagIn, [0,241], 2);
autoCallII -> encode_tags(TagIn, [0,242], 2);
semiautoCallII -> encode_tags(TagIn, [0,243], 2);
autoCallIII -> encode_tags(TagIn, [0,244], 2);
semiautoCallIII -> encode_tags(TagIn, [0,245], 2);
autoCallIV -> encode_tags(TagIn, [0,246], 2);
semiautoCallIV -> encode_tags(TagIn, [0,247], 2);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_CallingPartysCategory'(Tlv) ->
   'dec_CallingPartysCategory'(Tlv, [10]).

'dec_CallingPartysCategory'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> unknownAtThisTime;
1 -> operatorFrench;
2 -> operatorEngish;
3 -> operatorGerman;
4 -> operatorRussian;
5 -> operatorSpanish;
9 -> reserved;
10 -> ordinarySubscriber;
11 -> subscriberWithPriority;
12 -> dataCall;
13 -> testCall;
14 -> spare;
15 -> payphone;
224 -> category0;
225 -> hotelsSubscriber;
226 -> freeSubscriber;
227 -> paidSubscriber;
228 -> localSubscriber;
229 -> localTaksofon;
240 -> autoCallI;
241 -> semiautoCallI;
242 -> autoCallII;
243 -> semiautoCallII;
244 -> autoCallIII;
245 -> semiautoCallIII;
246 -> autoCallIV;
247 -> semiautoCallIV;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  CalledPartysCategory
%%================================
'enc_CalledPartysCategory'(Val) ->
    'enc_CalledPartysCategory'(Val, [<<10>>]).

'enc_CalledPartysCategory'(Val, TagIn) ->
case Val of
unknownAtThisTime -> encode_tags(TagIn, [0], 1);
operatorFrench -> encode_tags(TagIn, [1], 1);
operatorEngish -> encode_tags(TagIn, [2], 1);
operatorGerman -> encode_tags(TagIn, [3], 1);
operatorRussian -> encode_tags(TagIn, [4], 1);
operatorSpanish -> encode_tags(TagIn, [5], 1);
reserved -> encode_tags(TagIn, [9], 1);
ordinarySubscriber -> encode_tags(TagIn, [10], 1);
subscriberWithPriority -> encode_tags(TagIn, [11], 1);
dataCall -> encode_tags(TagIn, [12], 1);
testCall -> encode_tags(TagIn, [13], 1);
spare -> encode_tags(TagIn, [14], 1);
payphone -> encode_tags(TagIn, [15], 1);
category0 -> encode_tags(TagIn, [0,224], 2);
hotelsSubscriber -> encode_tags(TagIn, [0,225], 2);
freeSubscriber -> encode_tags(TagIn, [0,226], 2);
paidSubscriber -> encode_tags(TagIn, [0,227], 2);
localSubscriber -> encode_tags(TagIn, [0,228], 2);
localTaksofon -> encode_tags(TagIn, [0,229], 2);
autoCallI -> encode_tags(TagIn, [0,240], 2);
semiautoCallI -> encode_tags(TagIn, [0,241], 2);
autoCallII -> encode_tags(TagIn, [0,242], 2);
semiautoCallII -> encode_tags(TagIn, [0,243], 2);
autoCallIII -> encode_tags(TagIn, [0,244], 2);
semiautoCallIII -> encode_tags(TagIn, [0,245], 2);
autoCallIV -> encode_tags(TagIn, [0,246], 2);
semiautoCallIV -> encode_tags(TagIn, [0,247], 2);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_CalledPartysCategory'(Tlv) ->
   'dec_CalledPartysCategory'(Tlv, [10]).

'dec_CalledPartysCategory'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> unknownAtThisTime;
1 -> operatorFrench;
2 -> operatorEngish;
3 -> operatorGerman;
4 -> operatorRussian;
5 -> operatorSpanish;
9 -> reserved;
10 -> ordinarySubscriber;
11 -> subscriberWithPriority;
12 -> dataCall;
13 -> testCall;
14 -> spare;
15 -> payphone;
224 -> category0;
225 -> hotelsSubscriber;
226 -> freeSubscriber;
227 -> paidSubscriber;
228 -> localSubscriber;
229 -> localTaksofon;
240 -> autoCallI;
241 -> semiautoCallI;
242 -> autoCallII;
243 -> semiautoCallII;
244 -> autoCallIII;
245 -> semiautoCallIII;
246 -> autoCallIV;
247 -> semiautoCallIV;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  OriginalCalledNumber
%%================================
'enc_OriginalCalledNumber'(Val) ->
    'enc_OriginalCalledNumber'(Val, [<<48>>]).

'enc_OriginalCalledNumber'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6} = Val,

%%-------------------------------------------------
%% attribute nai(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
spare -> encode_tags([<<128>>], [0], 1);
subscriberNumber -> encode_tags([<<128>>], [1], 1);
unknown -> encode_tags([<<128>>], [2], 1);
nationalNumber -> encode_tags([<<128>>], [3], 1);
internationNumber -> encode_tags([<<128>>], [4], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute ni(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
private -> encode_tags([<<129>>], [0], 1);
local -> encode_tags([<<129>>], [1], 1);
zone -> encode_tags([<<129>>], [2], 1);
intercity -> encode_tags([<<129>>], [3], 1);
international -> encode_tags([<<129>>], [4], 1);
emergency -> encode_tags([<<129>>], [5], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute incomplete(3) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_boolean(Cindex3, [<<130>>]),

%%-------------------------------------------------
%% attribute npi(4) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes4,EncLen4} = case Cindex4 of
spare -> encode_tags([<<131>>], [0], 1);
isdnTelephony -> encode_tags([<<131>>], [1], 1);
reserved1 -> encode_tags([<<131>>], [3], 1);
reserved2 -> encode_tags([<<131>>], [4], 1);
reserved3 -> encode_tags([<<131>>], [5], 1);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end,

%%-------------------------------------------------
%% attribute apri(5) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes5,EncLen5} = case Cindex5 of
presentationAllowed -> encode_tags([<<132>>], [0], 1);
presentationRestricted -> encode_tags([<<132>>], [1], 1);
addressNotAvailable -> encode_tags([<<132>>], [2], 1);
spare -> encode_tags([<<132>>], [3], 1);
Enumval5 -> exit({error,{asn1, {enumerated_not_in_range,Enumval5}}})
end,

%%-------------------------------------------------
%% attribute digits(6) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes6,EncLen6} = encode_restricted_string(Cindex6, [<<133>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_OriginalCalledNumber'(Tlv) ->
   'dec_OriginalCalledNumber'(Tlv, [16]).

'dec_OriginalCalledNumber'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute nai(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> spare;
1 -> subscriberNumber;
2 -> unknown;
3 -> nationalNumber;
4 -> internationNumber;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute ni(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> private;
1 -> local;
2 -> zone;
3 -> intercity;
4 -> international;
5 -> emergency;
Default2 -> exit({error,{asn1,{illegal_enumerated,Default2}}})
end,

%%-------------------------------------------------
%% attribute incomplete(3) with type BOOLEAN
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = decode_boolean(V3, [131074]),

%%-------------------------------------------------
%% attribute npi(4) with type ENUMERATED
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = case decode_integer(V4, [131075]) of
0 -> spare;
1 -> isdnTelephony;
3 -> reserved1;
4 -> reserved2;
5 -> reserved3;
Default3 -> exit({error,{asn1,{illegal_enumerated,Default3}}})
end,

%%-------------------------------------------------
%% attribute apri(5) with type ENUMERATED
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = case decode_integer(V5, [131076]) of
0 -> presentationAllowed;
1 -> presentationRestricted;
2 -> addressNotAvailable;
3 -> spare;
Default4 -> exit({error,{asn1,{illegal_enumerated,Default4}}})
end,

%%-------------------------------------------------
%% attribute digits(6) with type OCTET STRING
%%-------------------------------------------------
[V6|Tlv7] = Tlv6, 
Term6 = begin
Val1 = decode_octet_string(V6, [131077]),
C1 = byte_size(Val1),
if 0 =< C1, C1 =< 27 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv7 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv7}}}) % extra fields not allowed
end,
   {'OriginalCalledNumber', Term1, Term2, Term3, Term4, Term5, Term6}.



%%================================
%%  RedirectingNumber
%%================================
'enc_RedirectingNumber'(Val) ->
    'enc_RedirectingNumber'(Val, [<<48>>]).

'enc_RedirectingNumber'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6} = Val,

%%-------------------------------------------------
%% attribute nai(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
spare -> encode_tags([<<128>>], [0], 1);
subscriberNumber -> encode_tags([<<128>>], [1], 1);
unknown -> encode_tags([<<128>>], [2], 1);
nationalNumber -> encode_tags([<<128>>], [3], 1);
internationNumber -> encode_tags([<<128>>], [4], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute ni(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
private -> encode_tags([<<129>>], [0], 1);
local -> encode_tags([<<129>>], [1], 1);
zone -> encode_tags([<<129>>], [2], 1);
intercity -> encode_tags([<<129>>], [3], 1);
international -> encode_tags([<<129>>], [4], 1);
emergency -> encode_tags([<<129>>], [5], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute incomplete(3) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_boolean(Cindex3, [<<130>>]),

%%-------------------------------------------------
%% attribute npi(4) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes4,EncLen4} = case Cindex4 of
spare -> encode_tags([<<131>>], [0], 1);
isdnTelephony -> encode_tags([<<131>>], [1], 1);
reserved1 -> encode_tags([<<131>>], [3], 1);
reserved2 -> encode_tags([<<131>>], [4], 1);
reserved3 -> encode_tags([<<131>>], [5], 1);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end,

%%-------------------------------------------------
%% attribute apri(5) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes5,EncLen5} = case Cindex5 of
presentationAllowed -> encode_tags([<<132>>], [0], 1);
presentationRestricted -> encode_tags([<<132>>], [1], 1);
addressNotAvailable -> encode_tags([<<132>>], [2], 1);
spare -> encode_tags([<<132>>], [3], 1);
Enumval5 -> exit({error,{asn1, {enumerated_not_in_range,Enumval5}}})
end,

%%-------------------------------------------------
%% attribute digits(6) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes6,EncLen6} = encode_restricted_string(Cindex6, [<<133>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_RedirectingNumber'(Tlv) ->
   'dec_RedirectingNumber'(Tlv, [16]).

'dec_RedirectingNumber'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute nai(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> spare;
1 -> subscriberNumber;
2 -> unknown;
3 -> nationalNumber;
4 -> internationNumber;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute ni(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> private;
1 -> local;
2 -> zone;
3 -> intercity;
4 -> international;
5 -> emergency;
Default2 -> exit({error,{asn1,{illegal_enumerated,Default2}}})
end,

%%-------------------------------------------------
%% attribute incomplete(3) with type BOOLEAN
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = decode_boolean(V3, [131074]),

%%-------------------------------------------------
%% attribute npi(4) with type ENUMERATED
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = case decode_integer(V4, [131075]) of
0 -> spare;
1 -> isdnTelephony;
3 -> reserved1;
4 -> reserved2;
5 -> reserved3;
Default3 -> exit({error,{asn1,{illegal_enumerated,Default3}}})
end,

%%-------------------------------------------------
%% attribute apri(5) with type ENUMERATED
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = case decode_integer(V5, [131076]) of
0 -> presentationAllowed;
1 -> presentationRestricted;
2 -> addressNotAvailable;
3 -> spare;
Default4 -> exit({error,{asn1,{illegal_enumerated,Default4}}})
end,

%%-------------------------------------------------
%% attribute digits(6) with type OCTET STRING
%%-------------------------------------------------
[V6|Tlv7] = Tlv6, 
Term6 = begin
Val1 = decode_octet_string(V6, [131077]),
C1 = byte_size(Val1),
if 0 =< C1, C1 =< 27 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv7 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv7}}}) % extra fields not allowed
end,
   {'RedirectingNumber', Term1, Term2, Term3, Term4, Term5, Term6}.



%%================================
%%  NAIType
%%================================
'enc_NAIType'(Val) ->
    'enc_NAIType'(Val, [<<10>>]).

'enc_NAIType'(Val, TagIn) ->
case Val of
spare -> encode_tags(TagIn, [0], 1);
subscriberNumber -> encode_tags(TagIn, [1], 1);
unknown -> encode_tags(TagIn, [2], 1);
nationalNumber -> encode_tags(TagIn, [3], 1);
internationNumber -> encode_tags(TagIn, [4], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_NAIType'(Tlv) ->
   'dec_NAIType'(Tlv, [10]).

'dec_NAIType'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> spare;
1 -> subscriberNumber;
2 -> unknown;
3 -> nationalNumber;
4 -> internationNumber;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  INNIType
%%================================
'enc_INNIType'(Val) ->
    'enc_INNIType'(Val, [<<10>>]).

'enc_INNIType'(Val, TagIn) ->
case Val of
routingToInternalNumberAllowed -> encode_tags(TagIn, [0], 1);
routingToInternalNumberNotAllowed -> encode_tags(TagIn, [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_INNIType'(Tlv) ->
   'dec_INNIType'(Tlv, [10]).

'dec_INNIType'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> routingToInternalNumberAllowed;
1 -> routingToInternalNumberNotAllowed;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  NIType
%%================================
'enc_NIType'(Val) ->
    'enc_NIType'(Val, [<<10>>]).

'enc_NIType'(Val, TagIn) ->
case Val of
private -> encode_tags(TagIn, [0], 1);
local -> encode_tags(TagIn, [1], 1);
zone -> encode_tags(TagIn, [2], 1);
intercity -> encode_tags(TagIn, [3], 1);
international -> encode_tags(TagIn, [4], 1);
emergency -> encode_tags(TagIn, [5], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_NIType'(Tlv) ->
   'dec_NIType'(Tlv, [10]).

'dec_NIType'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> private;
1 -> local;
2 -> zone;
3 -> intercity;
4 -> international;
5 -> emergency;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  NPIType
%%================================
'enc_NPIType'(Val) ->
    'enc_NPIType'(Val, [<<10>>]).

'enc_NPIType'(Val, TagIn) ->
case Val of
spare -> encode_tags(TagIn, [0], 1);
isdnTelephony -> encode_tags(TagIn, [1], 1);
reserved1 -> encode_tags(TagIn, [3], 1);
reserved2 -> encode_tags(TagIn, [4], 1);
reserved3 -> encode_tags(TagIn, [5], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_NPIType'(Tlv) ->
   'dec_NPIType'(Tlv, [10]).

'dec_NPIType'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> spare;
1 -> isdnTelephony;
3 -> reserved1;
4 -> reserved2;
5 -> reserved3;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  ARPIType
%%================================
'enc_ARPIType'(Val) ->
    'enc_ARPIType'(Val, [<<10>>]).

'enc_ARPIType'(Val, TagIn) ->
case Val of
presentationAllowed -> encode_tags(TagIn, [0], 1);
presentationRestricted -> encode_tags(TagIn, [1], 1);
addressNotAvailable -> encode_tags(TagIn, [2], 1);
spare -> encode_tags(TagIn, [3], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_ARPIType'(Tlv) ->
   'dec_ARPIType'(Tlv, [10]).

'dec_ARPIType'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> presentationAllowed;
1 -> presentationRestricted;
2 -> addressNotAvailable;
3 -> spare;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  ScreeningType
%%================================
'enc_ScreeningType'(Val) ->
    'enc_ScreeningType'(Val, [<<10>>]).

'enc_ScreeningType'(Val, TagIn) ->
case Val of
userProvidedNotVerified -> encode_tags(TagIn, [0], 1);
userProvidedVerifiedAndPassed -> encode_tags(TagIn, [1], 1);
userProvidedVerifiedAndFailed -> encode_tags(TagIn, [2], 1);
networkProvided -> encode_tags(TagIn, [3], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_ScreeningType'(Tlv) ->
   'dec_ScreeningType'(Tlv, [10]).

'dec_ScreeningType'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> userProvidedNotVerified;
1 -> userProvidedVerifiedAndPassed;
2 -> userProvidedVerifiedAndFailed;
3 -> networkProvided;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  ACPDestinationRoutingAddress
%%================================
'enc_ACPDestinationRoutingAddress'(Val) ->
    'enc_ACPDestinationRoutingAddress'(Val, [<<48>>]).

'enc_ACPDestinationRoutingAddress'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_ACPDestinationRoutingAddress_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ACPDestinationRoutingAddress_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ACPDestinationRoutingAddress_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_CalledPartyNumber'(H, [<<48>>]),
   'enc_ACPDestinationRoutingAddress_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_ACPDestinationRoutingAddress'(Tlv) ->
   'dec_ACPDestinationRoutingAddress'(Tlv, [16]).

'dec_ACPDestinationRoutingAddress'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_CalledPartyNumber'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  ACPRedirectionInformation
%%================================
'enc_ACPRedirectionInformation'(Val) ->
    'enc_ACPRedirectionInformation'(Val, [<<48>>]).

'enc_ACPRedirectionInformation'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute originalRedirectionReason(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
unknown -> encode_tags([<<128>>], [0], 1);
busy -> encode_tags([<<128>>], [1], 1);
noReply -> encode_tags([<<128>>], [2], 1);
unconditional -> encode_tags([<<128>>], [3], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute redirectingIndicator(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
noRedirection -> encode_tags([<<129>>], [0], 1);
reRouted -> encode_tags([<<129>>], [1], 1);
reRoutedAllRestricted -> encode_tags([<<129>>], [2], 1);
diversion -> encode_tags([<<129>>], [3], 1);
diversionAllRestricted -> encode_tags([<<129>>], [4], 1);
reRoutedRestricted -> encode_tags([<<129>>], [5], 1);
diversionRestricted -> encode_tags([<<129>>], [6], 1);
spare -> encode_tags([<<129>>], [7], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute redirectingReason(3) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes3,EncLen3} = case Cindex3 of
unknown -> encode_tags([<<130>>], [0], 1);
busy -> encode_tags([<<130>>], [1], 1);
noReply -> encode_tags([<<130>>], [2], 1);
unconditional -> encode_tags([<<130>>], [3], 1);
deflectAlert -> encode_tags([<<130>>], [4], 1);
deflectResp -> encode_tags([<<130>>], [5], 1);
noReachable -> encode_tags([<<130>>], [6], 1);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end,

%%-------------------------------------------------
%% attribute redirectionCounter(4) with type INTEGER
%%-------------------------------------------------
   {EncBytes4,EncLen4} = encode_integer(Cindex4, [<<131>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_ACPRedirectionInformation'(Tlv) ->
   'dec_ACPRedirectionInformation'(Tlv, [16]).

'dec_ACPRedirectionInformation'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute originalRedirectionReason(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> unknown;
1 -> busy;
2 -> noReply;
3 -> unconditional;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute redirectingIndicator(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> noRedirection;
1 -> reRouted;
2 -> reRoutedAllRestricted;
3 -> diversion;
4 -> diversionAllRestricted;
5 -> reRoutedRestricted;
6 -> diversionRestricted;
7 -> spare;
Default2 -> exit({error,{asn1,{illegal_enumerated,Default2}}})
end,

%%-------------------------------------------------
%% attribute redirectingReason(3) with type ENUMERATED
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = case decode_integer(V3, [131074]) of
0 -> unknown;
1 -> busy;
2 -> noReply;
3 -> unconditional;
4 -> deflectAlert;
5 -> deflectResp;
6 -> noReachable;
Default3 -> exit({error,{asn1,{illegal_enumerated,Default3}}})
end,

%%-------------------------------------------------
%% attribute redirectionCounter(4) with type INTEGER
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = begin
Val1 = decode_integer(V4, [131075]),
if 1 =< Val1, Val1 =< 5 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv5 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed
end,
   {'ACPRedirectionInformation', Term1, Term2, Term3, Term4}.



%%================================
%%  ACPOriginalRedirectionReason
%%================================
'enc_ACPOriginalRedirectionReason'(Val) ->
    'enc_ACPOriginalRedirectionReason'(Val, [<<10>>]).

'enc_ACPOriginalRedirectionReason'(Val, TagIn) ->
case Val of
unknown -> encode_tags(TagIn, [0], 1);
busy -> encode_tags(TagIn, [1], 1);
noReply -> encode_tags(TagIn, [2], 1);
unconditional -> encode_tags(TagIn, [3], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_ACPOriginalRedirectionReason'(Tlv) ->
   'dec_ACPOriginalRedirectionReason'(Tlv, [10]).

'dec_ACPOriginalRedirectionReason'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> unknown;
1 -> busy;
2 -> noReply;
3 -> unconditional;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  ACPRedirectingIndicator
%%================================
'enc_ACPRedirectingIndicator'(Val) ->
    'enc_ACPRedirectingIndicator'(Val, [<<10>>]).

'enc_ACPRedirectingIndicator'(Val, TagIn) ->
case Val of
noRedirection -> encode_tags(TagIn, [0], 1);
reRouted -> encode_tags(TagIn, [1], 1);
reRoutedAllRestricted -> encode_tags(TagIn, [2], 1);
diversion -> encode_tags(TagIn, [3], 1);
diversionAllRestricted -> encode_tags(TagIn, [4], 1);
reRoutedRestricted -> encode_tags(TagIn, [5], 1);
diversionRestricted -> encode_tags(TagIn, [6], 1);
spare -> encode_tags(TagIn, [7], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_ACPRedirectingIndicator'(Tlv) ->
   'dec_ACPRedirectingIndicator'(Tlv, [10]).

'dec_ACPRedirectingIndicator'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> noRedirection;
1 -> reRouted;
2 -> reRoutedAllRestricted;
3 -> diversion;
4 -> diversionAllRestricted;
5 -> reRoutedRestricted;
6 -> diversionRestricted;
7 -> spare;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  ACPRedirectingReason
%%================================
'enc_ACPRedirectingReason'(Val) ->
    'enc_ACPRedirectingReason'(Val, [<<10>>]).

'enc_ACPRedirectingReason'(Val, TagIn) ->
case Val of
unknown -> encode_tags(TagIn, [0], 1);
busy -> encode_tags(TagIn, [1], 1);
noReply -> encode_tags(TagIn, [2], 1);
unconditional -> encode_tags(TagIn, [3], 1);
deflectAlert -> encode_tags(TagIn, [4], 1);
deflectResp -> encode_tags(TagIn, [5], 1);
noReachable -> encode_tags(TagIn, [6], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_ACPRedirectingReason'(Tlv) ->
   'dec_ACPRedirectingReason'(Tlv, [10]).

'dec_ACPRedirectingReason'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> unknown;
1 -> busy;
2 -> noReply;
3 -> unconditional;
4 -> deflectAlert;
5 -> deflectResp;
6 -> noReachable;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  OptionalBackwardCallInidicators
%%================================
'enc_OptionalBackwardCallInidicators'(Val) ->
    'enc_OptionalBackwardCallInidicators'(Val, [<<48>>]).

'enc_OptionalBackwardCallInidicators'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute inbInfoInd(1) with type ENUMERATED DEFAULT = noIndication
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_DEFAULT -> {<<>>,0};
         noIndication -> {<<>>,0};
         _ ->
            case Cindex1 of
noIndication -> encode_tags([<<128>>], [0], 1);
inBandInfoOrPatternAvailable -> encode_tags([<<128>>], [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end
       end,

%%-------------------------------------------------
%% attribute callDiversionInd(2) with type ENUMERATED DEFAULT = noIndication
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_DEFAULT -> {<<>>,0};
         noIndication -> {<<>>,0};
         _ ->
            case Cindex2 of
noIndication -> encode_tags([<<129>>], [0], 1);
callDiversionMayOccur -> encode_tags([<<129>>], [1], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end
       end,

%%-------------------------------------------------
%% attribute simpleSegmentationInf(3) with type ENUMERATED DEFAULT = noAdditionalInformation
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_DEFAULT -> {<<>>,0};
         noAdditionalInformation -> {<<>>,0};
         _ ->
            case Cindex3 of
noAdditionalInformation -> encode_tags([<<130>>], [0], 1);
additionalInformationWillBeSent -> encode_tags([<<130>>], [1], 1);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end
       end,

%%-------------------------------------------------
%% attribute mlppUserInd(4) with type ENUMERATED DEFAULT = noIndication
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_DEFAULT -> {<<>>,0};
         noIndication -> {<<>>,0};
         _ ->
            case Cindex4 of
noIndication -> encode_tags([<<131>>], [0], 1);
mlppUser -> encode_tags([<<131>>], [1], 1);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_OptionalBackwardCallInidicators'(Tlv) ->
   'dec_OptionalBackwardCallInidicators'(Tlv, [16]).

'dec_OptionalBackwardCallInidicators'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute inbInfoInd(1) with type ENUMERATED DEFAULT = noIndication
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {case decode_integer(V1, []) of
0 -> noIndication;
1 -> inBandInfoOrPatternAvailable;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end, TempTlv2};
    _ ->
        {noIndication,Tlv1}
end,

%%-------------------------------------------------
%% attribute callDiversionInd(2) with type ENUMERATED DEFAULT = noIndication
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {case decode_integer(V2, []) of
0 -> noIndication;
1 -> callDiversionMayOccur;
Default2 -> exit({error,{asn1,{illegal_enumerated,Default2}}})
end, TempTlv3};
    _ ->
        {noIndication,Tlv2}
end,

%%-------------------------------------------------
%% attribute simpleSegmentationInf(3) with type ENUMERATED DEFAULT = noAdditionalInformation
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {case decode_integer(V3, []) of
0 -> noAdditionalInformation;
1 -> additionalInformationWillBeSent;
Default3 -> exit({error,{asn1,{illegal_enumerated,Default3}}})
end, TempTlv4};
    _ ->
        {noAdditionalInformation,Tlv3}
end,

%%-------------------------------------------------
%% attribute mlppUserInd(4) with type ENUMERATED DEFAULT = noIndication
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {case decode_integer(V4, []) of
0 -> noIndication;
1 -> mlppUser;
Default4 -> exit({error,{asn1,{illegal_enumerated,Default4}}})
end, TempTlv5};
    _ ->
        {noIndication,Tlv4}
end,

case Tlv5 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed
end,
   {'OptionalBackwardCallInidicators', Term1, Term2, Term3, Term4}.



%%================================
%%  InBandInfoIndicator
%%================================
'enc_InBandInfoIndicator'(Val) ->
    'enc_InBandInfoIndicator'(Val, [<<10>>]).

'enc_InBandInfoIndicator'(Val, TagIn) ->
case Val of
noIndication -> encode_tags(TagIn, [0], 1);
inBandInfoOrPatternAvailable -> encode_tags(TagIn, [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_InBandInfoIndicator'(Tlv) ->
   'dec_InBandInfoIndicator'(Tlv, [10]).

'dec_InBandInfoIndicator'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> noIndication;
1 -> inBandInfoOrPatternAvailable;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  CallDiversionIndicator
%%================================
'enc_CallDiversionIndicator'(Val) ->
    'enc_CallDiversionIndicator'(Val, [<<10>>]).

'enc_CallDiversionIndicator'(Val, TagIn) ->
case Val of
noIndication -> encode_tags(TagIn, [0], 1);
callDiversionMayOccur -> encode_tags(TagIn, [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_CallDiversionIndicator'(Tlv) ->
   'dec_CallDiversionIndicator'(Tlv, [10]).

'dec_CallDiversionIndicator'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> noIndication;
1 -> callDiversionMayOccur;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  SimpleSegmentationIndicator
%%================================
'enc_SimpleSegmentationIndicator'(Val) ->
    'enc_SimpleSegmentationIndicator'(Val, [<<10>>]).

'enc_SimpleSegmentationIndicator'(Val, TagIn) ->
case Val of
noAdditionalInformation -> encode_tags(TagIn, [0], 1);
additionalInformationWillBeSent -> encode_tags(TagIn, [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_SimpleSegmentationIndicator'(Tlv) ->
   'dec_SimpleSegmentationIndicator'(Tlv, [10]).

'dec_SimpleSegmentationIndicator'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> noAdditionalInformation;
1 -> additionalInformationWillBeSent;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  MLPPUserIndicator
%%================================
'enc_MLPPUserIndicator'(Val) ->
    'enc_MLPPUserIndicator'(Val, [<<10>>]).

'enc_MLPPUserIndicator'(Val, TagIn) ->
case Val of
noIndication -> encode_tags(TagIn, [0], 1);
mlppUser -> encode_tags(TagIn, [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_MLPPUserIndicator'(Tlv) ->
   'dec_MLPPUserIndicator'(Tlv, [10]).

'dec_MLPPUserIndicator'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> noIndication;
1 -> mlppUser;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  GenericNotificationIndicatorList
%%================================
'enc_GenericNotificationIndicatorList'(Val) ->
    'enc_GenericNotificationIndicatorList'(Val, [<<48>>]).

'enc_GenericNotificationIndicatorList'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_GenericNotificationIndicatorList_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_GenericNotificationIndicatorList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_GenericNotificationIndicatorList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = case H of
userSuspended -> encode_tags([<<10>>], [0], 1);
userResumed -> encode_tags([<<10>>], [1], 1);
bearerServiceChange -> encode_tags([<<10>>], [2], 1);
callCompletionDelay -> encode_tags([<<10>>], [4], 1);
conferenceEstablished -> encode_tags([<<10>>], [66], 1);
conferenceDisconnected -> encode_tags([<<10>>], [67], 1);
otherPartyAdded -> encode_tags([<<10>>], [68], 1);
isolated -> encode_tags([<<10>>], [69], 1);
reattached -> encode_tags([<<10>>], [70], 1);
otherPartyIsolated -> encode_tags([<<10>>], [71], 1);
otherPartyReattached -> encode_tags([<<10>>], [72], 1);
otherPartySplit -> encode_tags([<<10>>], [73], 1);
otherPartyDisconnected -> encode_tags([<<10>>], [74], 1);
conferenceFloating -> encode_tags([<<10>>], [75], 1);
callIsAWaitingCall -> encode_tags([<<10>>], [96], 1);
callTransferAlerting -> encode_tags([<<10>>], [113], 1);
callTransferActive -> encode_tags([<<10>>], [114], 1);
remoteHold -> encode_tags([<<10>>], [121], 1);
remoteRetrieval -> encode_tags([<<10>>], [122], 1);
callIsDiverting -> encode_tags([<<10>>], [123], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,
   'enc_GenericNotificationIndicatorList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_GenericNotificationIndicatorList'(Tlv) ->
   'dec_GenericNotificationIndicatorList'(Tlv, [16]).

'dec_GenericNotificationIndicatorList'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[case decode_integer(V1, [10]) of
0 -> userSuspended;
1 -> userResumed;
2 -> bearerServiceChange;
4 -> callCompletionDelay;
66 -> conferenceEstablished;
67 -> conferenceDisconnected;
68 -> otherPartyAdded;
69 -> isolated;
70 -> reattached;
71 -> otherPartyIsolated;
72 -> otherPartyReattached;
73 -> otherPartySplit;
74 -> otherPartyDisconnected;
75 -> conferenceFloating;
96 -> callIsAWaitingCall;
113 -> callTransferAlerting;
114 -> callTransferActive;
121 -> remoteHold;
122 -> remoteRetrieval;
123 -> callIsDiverting;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end || V1 <- Tlv1].




%%================================
%%  GenericNotificationIndicator
%%================================
'enc_GenericNotificationIndicator'(Val) ->
    'enc_GenericNotificationIndicator'(Val, [<<10>>]).

'enc_GenericNotificationIndicator'(Val, TagIn) ->
case Val of
userSuspended -> encode_tags(TagIn, [0], 1);
userResumed -> encode_tags(TagIn, [1], 1);
bearerServiceChange -> encode_tags(TagIn, [2], 1);
callCompletionDelay -> encode_tags(TagIn, [4], 1);
conferenceEstablished -> encode_tags(TagIn, [66], 1);
conferenceDisconnected -> encode_tags(TagIn, [67], 1);
otherPartyAdded -> encode_tags(TagIn, [68], 1);
isolated -> encode_tags(TagIn, [69], 1);
reattached -> encode_tags(TagIn, [70], 1);
otherPartyIsolated -> encode_tags(TagIn, [71], 1);
otherPartyReattached -> encode_tags(TagIn, [72], 1);
otherPartySplit -> encode_tags(TagIn, [73], 1);
otherPartyDisconnected -> encode_tags(TagIn, [74], 1);
conferenceFloating -> encode_tags(TagIn, [75], 1);
callIsAWaitingCall -> encode_tags(TagIn, [96], 1);
callTransferAlerting -> encode_tags(TagIn, [113], 1);
callTransferActive -> encode_tags(TagIn, [114], 1);
remoteHold -> encode_tags(TagIn, [121], 1);
remoteRetrieval -> encode_tags(TagIn, [122], 1);
callIsDiverting -> encode_tags(TagIn, [123], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_GenericNotificationIndicator'(Tlv) ->
   'dec_GenericNotificationIndicator'(Tlv, [10]).

'dec_GenericNotificationIndicator'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> userSuspended;
1 -> userResumed;
2 -> bearerServiceChange;
4 -> callCompletionDelay;
66 -> conferenceEstablished;
67 -> conferenceDisconnected;
68 -> otherPartyAdded;
69 -> isolated;
70 -> reattached;
71 -> otherPartyIsolated;
72 -> otherPartyReattached;
73 -> otherPartySplit;
74 -> otherPartyDisconnected;
75 -> conferenceFloating;
96 -> callIsAWaitingCall;
113 -> callTransferAlerting;
114 -> callTransferActive;
121 -> remoteHold;
122 -> remoteRetrieval;
123 -> callIsDiverting;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  TrunkGroupId
%%================================
'enc_TrunkGroupId'(Val) ->
    'enc_TrunkGroupId'(Val, [<<48>>]).

'enc_TrunkGroupId'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute trunkGroupId(1) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute trunkId(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute pCMId(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute channelNumber(4) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex4, [<<131>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_TrunkGroupId'(Tlv) ->
   'dec_TrunkGroupId'(Tlv, [16]).

'dec_TrunkGroupId'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute trunkGroupId(1) with type OCTET STRING
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_octet_string(V1, [131072]),

%%-------------------------------------------------
%% attribute trunkId(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {decode_octet_string(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute pCMId(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {decode_octet_string(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute channelNumber(4) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {decode_integer(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

case Tlv5 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed
end,
   {'TrunkGroupId', Term1, Term2, Term3, Term4}.

'minACPCalledPartyNumberLength'() ->
0.

'maxACPCalledPartyNumberLength'() ->
27.

'minACPCallingPartyNumberLength'() ->
0.

'maxACPCallingPartyNumberLength'() ->
27.

'numOfACPAddresses'() ->
27.

'numOfGenericNotificatioIndicators'() ->
10.


%%%
%%% Run-time functions.
%%%

'dialyzer-suppressions'(Arg) ->
    ok.

ber_decode_nif(B) ->
    asn1rt_nif:decode_ber_tlv(B).

collect_parts(TlvList) ->
    collect_parts(TlvList, []).

collect_parts([{_,L}|Rest], Acc) when is_list(L) ->
    collect_parts(Rest, [collect_parts(L)|Acc]);
collect_parts([{3,<<Unused,Bits/binary>>}|Rest], _Acc) ->
    collect_parts_bit(Rest, [Bits], Unused);
collect_parts([{_T,V}|Rest], Acc) ->
    collect_parts(Rest, [V|Acc]);
collect_parts([], Acc) ->
    list_to_binary(lists:reverse(Acc)).

collect_parts_bit([{3,<<Unused,Bits/binary>>}|Rest], Acc, Uacc) ->
    collect_parts_bit(Rest, [Bits|Acc], Unused + Uacc);
collect_parts_bit([], Acc, Uacc) ->
    list_to_binary([Uacc|lists:reverse(Acc)]).

decode_boolean(Tlv, TagIn) ->
    Val = match_tags(Tlv, TagIn),
    case Val of
        <<0:8>> ->
            false;
        <<_:8>> ->
            true;
        _ ->
            exit({error,{asn1,{decode_boolean,Val}}})
    end.

decode_integer(Tlv, TagIn) ->
    Bin = match_tags(Tlv, TagIn),
    Len = byte_size(Bin),
    <<Int:Len/signed-unit:8>> = Bin,
    Int.

decode_octet_string(Tlv, TagsIn) ->
    Bin = match_and_collect(Tlv, TagsIn),
    binary:copy(Bin).

decode_restricted_string(Tlv, TagsIn) ->
    match_and_collect(Tlv, TagsIn).

encode_boolean(true, TagIn) ->
    encode_tags(TagIn, [255], 1);
encode_boolean(false, TagIn) ->
    encode_tags(TagIn, [0], 1);
encode_boolean(X, _) ->
    exit({error,{asn1,{encode_boolean,X}}}).

encode_integer(Val) ->
    Bytes =
        if
            Val >= 0 ->
                encode_integer_pos(Val, []);
            true ->
                encode_integer_neg(Val, [])
        end,
    {Bytes,length(Bytes)}.

encode_integer(Val, Tag) when is_integer(Val) ->
    encode_tags(Tag, encode_integer(Val));
encode_integer(Val, _Tag) ->
    exit({error,{asn1,{encode_integer,Val}}}).

encode_integer_neg(- 1, [B1|_T] = L) when B1 > 127 ->
    L;
encode_integer_neg(N, Acc) ->
    encode_integer_neg(N bsr 8, [N band 255|Acc]).

encode_integer_pos(0, [B|_Acc] = L) when B < 128 ->
    L;
encode_integer_pos(N, Acc) ->
    encode_integer_pos(N bsr 8, [N band 255|Acc]).

encode_length(L) when L =< 127 ->
    {[L],1};
encode_length(L) ->
    Oct = minimum_octets(L),
    Len = length(Oct),
    if
        Len =< 126 ->
            {[128 bor Len|Oct],Len + 1};
        true ->
            exit({error,{asn1,too_long_length_oct,Len}})
    end.

encode_restricted_string(OctetList, TagIn) when is_binary(OctetList) ->
    encode_tags(TagIn, OctetList, byte_size(OctetList));
encode_restricted_string(OctetList, TagIn) when is_list(OctetList) ->
    encode_tags(TagIn, OctetList, length(OctetList)).

encode_tags(TagIn, {BytesSoFar,LenSoFar}) ->
    encode_tags(TagIn, BytesSoFar, LenSoFar).

encode_tags([Tag|Trest], BytesSoFar, LenSoFar) ->
    {Bytes2,L2} = encode_length(LenSoFar),
    encode_tags(Trest,
                [Tag,Bytes2|BytesSoFar],
                LenSoFar + byte_size(Tag) + L2);
encode_tags([], BytesSoFar, LenSoFar) ->
    {BytesSoFar,LenSoFar}.

match_and_collect(Tlv, TagsIn) ->
    Val = match_tags(Tlv, TagsIn),
    case Val of
        [_|_] = PartList ->
            collect_parts(PartList);
        Bin when is_binary(Bin) ->
            Bin
    end.

match_tags({T,V}, [T]) ->
    V;
match_tags({T,V}, [T|Tt]) ->
    match_tags(V, Tt);
match_tags([{T,V}], [T|Tt]) ->
    match_tags(V, Tt);
match_tags([{T,_V}|_] = Vlist, [T]) ->
    Vlist;
match_tags(Tlv, []) ->
    Tlv;
match_tags({Tag,_V} = Tlv, [T|_Tt]) ->
    exit({error,{asn1,{wrong_tag,{{expected,T},{got,Tag,Tlv}}}}}).

minimum_octets(0, Acc) ->
    Acc;
minimum_octets(Val, Acc) ->
    minimum_octets(Val bsr 8, [Val band 255|Acc]).

minimum_octets(Val) ->
    minimum_octets(Val, []).
