%% Generated by the Erlang ASN.1 BER_V2-compiler version, utilizing bit-syntax:4.0.3
%% Purpose: encoder and decoder to the types in mod INCS3Internals

-module('INCS3Internals').
-compile(nowarn_unused_vars).
-dialyzer(no_improper_lists).
-include("INCS3Internals.hrl").
-asn1_info([{vsn,'4.0.3'},
            {module,'INCS3Internals'},
            {options,[{i,"src"},{outdir,"src"},noobj,{i,"."},{i,"asn1"}]}]).

-export([encoding_rule/0,bit_string_format/0,
         legacy_erlang_types/0]).
-export(['dialyzer-suppressions'/1]).
-export([
'enc_CallFlag'/2,
'enc_CallRef'/2,
'enc_InfoDirection'/2,
'enc_AddressEndType'/2,
'enc_CauseInitiator'/2,
'enc_EventIndicator'/2,
'enc_EventPresentationRestrictedIndicator'/2,
'enc_EventInformation'/2,
'enc_RedirectionRestrictionIndicator'/2,
'enc_NotificationSubscriptionOptions'/2,
'enc_RedirectingReason'/2,
'enc_CallDiversionInformation'/2,
'enc_CallProgressType'/2,
'enc_FailureType'/2,
'enc_NetworkSRType'/2,
'enc_ReleaseType'/2,
'enc_ServiceFeatureType'/2,
'enc_SetupCRType'/2,
'enc_SDPType'/2,
'enc_ReferType'/2,
'enc_SetupAckType'/2,
'enc_SetupModeType'/2,
'enc_SetupIRType'/2,
'enc_CHUNT'/2,
'enc_SubsequentAddressType'/2,
'enc_UserDataType'/2,
'enc_MGTSetTriggerTableArg'/2,
'enc_BCSMStateType'/2,
'enc_DPFacilityArg'/2,
'enc_PartyType'/2,
'enc_DPArg'/2,
'enc_DPUTSIArg'/2,
'enc_OBCSMPars'/2,
'enc_PointInCall'/2,
'enc_ChargingEventIndArg'/2,
'enc_PICArg'/2,
'enc_EventTime'/2
]).

-export([
'dec_CallFlag'/2,
'dec_CallRef'/2,
'dec_InfoDirection'/2,
'dec_AddressEndType'/2,
'dec_CauseInitiator'/2,
'dec_EventIndicator'/2,
'dec_EventPresentationRestrictedIndicator'/2,
'dec_EventInformation'/2,
'dec_RedirectionRestrictionIndicator'/2,
'dec_NotificationSubscriptionOptions'/2,
'dec_RedirectingReason'/2,
'dec_CallDiversionInformation'/2,
'dec_CallProgressType'/2,
'dec_FailureType'/2,
'dec_NetworkSRType'/2,
'dec_ReleaseType'/2,
'dec_ServiceFeatureType'/2,
'dec_SetupCRType'/2,
'dec_SDPType'/2,
'dec_ReferType'/2,
'dec_SetupAckType'/2,
'dec_SetupModeType'/2,
'dec_SetupIRType'/2,
'dec_CHUNT'/2,
'dec_SubsequentAddressType'/2,
'dec_UserDataType'/2,
'dec_MGTSetTriggerTableArg'/2,
'dec_BCSMStateType'/2,
'dec_DPFacilityArg'/2,
'dec_PartyType'/2,
'dec_DPArg'/2,
'dec_DPUTSIArg'/2,
'dec_OBCSMPars'/2,
'dec_PointInCall'/2,
'dec_ChargingEventIndArg'/2,
'dec_PICArg'/2,
'dec_EventTime'/2
]).

-export([
'emptyString'/0,
'oct0'/0,
'oct1'/0,
'oct2'/0,
'oct3'/0,
'oct4'/0,
'oct5'/0,
'oct6'/0,
'oct7'/0,
'oct8'/0,
'oct9'/0,
'octa'/0,
'octb'/0
]).

-export([info/0]).


-export([encode/2,decode/2]).

encoding_rule() -> ber.

bit_string_format() -> bitstring.

legacy_erlang_types() -> false.

encode(Type, Data) ->
try iolist_to_binary(element(1, encode_disp(Type, Data))) of
  Bytes ->
    {ok,Bytes}
  catch
    Class:Exception when Class =:= error; Class =:= exit ->
      case Exception of
        {error,Reason}=Error ->
          Error;
        Reason ->
         {error,{asn1,Reason}}
      end
end.

decode(Type,Data) ->
try decode_disp(Type, element(1, ber_decode_nif(Data))) of
  Result ->
    {ok,Result}
  catch
    Class:Exception when Class =:= error; Class =:= exit ->
      case Exception of
        {error,Reason}=Error ->
          Error;
        Reason ->
         {error,{asn1,Reason}}
      end
end.

encode_disp('CallFlag',Data) -> 'enc_CallFlag'(Data);
encode_disp('CallRef',Data) -> 'enc_CallRef'(Data);
encode_disp('InfoDirection',Data) -> 'enc_InfoDirection'(Data);
encode_disp('AddressEndType',Data) -> 'enc_AddressEndType'(Data);
encode_disp('CauseInitiator',Data) -> 'enc_CauseInitiator'(Data);
encode_disp('EventIndicator',Data) -> 'enc_EventIndicator'(Data);
encode_disp('EventPresentationRestrictedIndicator',Data) -> 'enc_EventPresentationRestrictedIndicator'(Data);
encode_disp('EventInformation',Data) -> 'enc_EventInformation'(Data);
encode_disp('RedirectionRestrictionIndicator',Data) -> 'enc_RedirectionRestrictionIndicator'(Data);
encode_disp('NotificationSubscriptionOptions',Data) -> 'enc_NotificationSubscriptionOptions'(Data);
encode_disp('RedirectingReason',Data) -> 'enc_RedirectingReason'(Data);
encode_disp('CallDiversionInformation',Data) -> 'enc_CallDiversionInformation'(Data);
encode_disp('CallProgressType',Data) -> 'enc_CallProgressType'(Data);
encode_disp('FailureType',Data) -> 'enc_FailureType'(Data);
encode_disp('NetworkSRType',Data) -> 'enc_NetworkSRType'(Data);
encode_disp('ReleaseType',Data) -> 'enc_ReleaseType'(Data);
encode_disp('ServiceFeatureType',Data) -> 'enc_ServiceFeatureType'(Data);
encode_disp('SetupCRType',Data) -> 'enc_SetupCRType'(Data);
encode_disp('SDPType',Data) -> 'enc_SDPType'(Data);
encode_disp('ReferType',Data) -> 'enc_ReferType'(Data);
encode_disp('SetupAckType',Data) -> 'enc_SetupAckType'(Data);
encode_disp('SetupModeType',Data) -> 'enc_SetupModeType'(Data);
encode_disp('SetupIRType',Data) -> 'enc_SetupIRType'(Data);
encode_disp('CHUNT',Data) -> 'enc_CHUNT'(Data);
encode_disp('SubsequentAddressType',Data) -> 'enc_SubsequentAddressType'(Data);
encode_disp('UserDataType',Data) -> 'enc_UserDataType'(Data);
encode_disp('MGTSetTriggerTableArg',Data) -> 'enc_MGTSetTriggerTableArg'(Data);
encode_disp('BCSMStateType',Data) -> 'enc_BCSMStateType'(Data);
encode_disp('DPFacilityArg',Data) -> 'enc_DPFacilityArg'(Data);
encode_disp('PartyType',Data) -> 'enc_PartyType'(Data);
encode_disp('DPArg',Data) -> 'enc_DPArg'(Data);
encode_disp('DPUTSIArg',Data) -> 'enc_DPUTSIArg'(Data);
encode_disp('OBCSMPars',Data) -> 'enc_OBCSMPars'(Data);
encode_disp('PointInCall',Data) -> 'enc_PointInCall'(Data);
encode_disp('ChargingEventIndArg',Data) -> 'enc_ChargingEventIndArg'(Data);
encode_disp('PICArg',Data) -> 'enc_PICArg'(Data);
encode_disp('EventTime',Data) -> 'enc_EventTime'(Data);
encode_disp(Type,_Data) -> exit({error,{asn1,{undefined_type,Type}}}).


decode_disp('CallFlag',Data) -> 'dec_CallFlag'(Data);
decode_disp('CallRef',Data) -> 'dec_CallRef'(Data);
decode_disp('InfoDirection',Data) -> 'dec_InfoDirection'(Data);
decode_disp('AddressEndType',Data) -> 'dec_AddressEndType'(Data);
decode_disp('CauseInitiator',Data) -> 'dec_CauseInitiator'(Data);
decode_disp('EventIndicator',Data) -> 'dec_EventIndicator'(Data);
decode_disp('EventPresentationRestrictedIndicator',Data) -> 'dec_EventPresentationRestrictedIndicator'(Data);
decode_disp('EventInformation',Data) -> 'dec_EventInformation'(Data);
decode_disp('RedirectionRestrictionIndicator',Data) -> 'dec_RedirectionRestrictionIndicator'(Data);
decode_disp('NotificationSubscriptionOptions',Data) -> 'dec_NotificationSubscriptionOptions'(Data);
decode_disp('RedirectingReason',Data) -> 'dec_RedirectingReason'(Data);
decode_disp('CallDiversionInformation',Data) -> 'dec_CallDiversionInformation'(Data);
decode_disp('CallProgressType',Data) -> 'dec_CallProgressType'(Data);
decode_disp('FailureType',Data) -> 'dec_FailureType'(Data);
decode_disp('NetworkSRType',Data) -> 'dec_NetworkSRType'(Data);
decode_disp('ReleaseType',Data) -> 'dec_ReleaseType'(Data);
decode_disp('ServiceFeatureType',Data) -> 'dec_ServiceFeatureType'(Data);
decode_disp('SetupCRType',Data) -> 'dec_SetupCRType'(Data);
decode_disp('SDPType',Data) -> 'dec_SDPType'(Data);
decode_disp('ReferType',Data) -> 'dec_ReferType'(Data);
decode_disp('SetupAckType',Data) -> 'dec_SetupAckType'(Data);
decode_disp('SetupModeType',Data) -> 'dec_SetupModeType'(Data);
decode_disp('SetupIRType',Data) -> 'dec_SetupIRType'(Data);
decode_disp('CHUNT',Data) -> 'dec_CHUNT'(Data);
decode_disp('SubsequentAddressType',Data) -> 'dec_SubsequentAddressType'(Data);
decode_disp('UserDataType',Data) -> 'dec_UserDataType'(Data);
decode_disp('MGTSetTriggerTableArg',Data) -> 'dec_MGTSetTriggerTableArg'(Data);
decode_disp('BCSMStateType',Data) -> 'dec_BCSMStateType'(Data);
decode_disp('DPFacilityArg',Data) -> 'dec_DPFacilityArg'(Data);
decode_disp('PartyType',Data) -> 'dec_PartyType'(Data);
decode_disp('DPArg',Data) -> 'dec_DPArg'(Data);
decode_disp('DPUTSIArg',Data) -> 'dec_DPUTSIArg'(Data);
decode_disp('OBCSMPars',Data) -> 'dec_OBCSMPars'(Data);
decode_disp('PointInCall',Data) -> 'dec_PointInCall'(Data);
decode_disp('ChargingEventIndArg',Data) -> 'dec_ChargingEventIndArg'(Data);
decode_disp('PICArg',Data) -> 'dec_PICArg'(Data);
decode_disp('EventTime',Data) -> 'dec_EventTime'(Data);
decode_disp(Type,_Data) -> exit({error,{asn1,{undefined_type,Type}}}).




info() ->
   case ?MODULE:module_info(attributes) of
     Attributes when is_list(Attributes) ->
       case lists:keyfind(asn1_info, 1, Attributes) of
         {_,Info} when is_list(Info) ->
           Info;
         _ ->
           []
       end;
     _ ->
       []
   end.


%%================================
%%  CallFlag
%%================================
'enc_CallFlag'(Val) ->
    'enc_CallFlag'(Val, [<<10>>]).

'enc_CallFlag'(Val, TagIn) ->
case Val of
senderRef -> encode_tags(TagIn, [0], 1);
receiverRef -> encode_tags(TagIn, [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_CallFlag'(Tlv) ->
   'dec_CallFlag'(Tlv, [10]).

'dec_CallFlag'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> senderRef;
1 -> receiverRef;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  CallRef
%%================================
'enc_CallRef'(Val) ->
    'enc_CallRef'(Val, [<<2>>]).

'enc_CallRef'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_CallRef'(Tlv) ->
   'dec_CallRef'(Tlv, [2]).

'dec_CallRef'(Tlv, TagIn) ->
decode_integer(Tlv, TagIn).



%%================================
%%  InfoDirection
%%================================
'enc_InfoDirection'(Val) ->
    'enc_InfoDirection'(Val, [<<10>>]).

'enc_InfoDirection'(Val, TagIn) ->
case Val of
utsi -> encode_tags(TagIn, [0], 1);
stui -> encode_tags(TagIn, [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_InfoDirection'(Tlv) ->
   'dec_InfoDirection'(Tlv, [10]).

'dec_InfoDirection'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> utsi;
1 -> stui;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  AddressEndType
%%================================
'enc_AddressEndType'(Val) ->
    'enc_AddressEndType'(Val, [<<48>>]).

'enc_AddressEndType'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute callRef(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute digits(2) with type PrintableString OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex2, [<<129>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_AddressEndType'(Tlv) ->
   'dec_AddressEndType'(Tlv, [16]).

'dec_AddressEndType'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute callRef(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1, [131072]),

%%-------------------------------------------------
%% attribute digits(2) with type PrintableString OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
binary_to_list(decode_restricted_string(V2, []))
end
, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'AddressEndType', Term1, Term2}.



%%================================
%%  CauseInitiator
%%================================
'enc_CauseInitiator'(Val) ->
    'enc_CauseInitiator'(Val, [<<10>>]).

'enc_CauseInitiator'(Val, TagIn) ->
case Val of
user -> encode_tags(TagIn, [0], 1);
isupNetwork -> encode_tags(TagIn, [1], 1);
nonIsupNetwork -> encode_tags(TagIn, [2], 1);
system -> encode_tags(TagIn, [3], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_CauseInitiator'(Tlv) ->
   'dec_CauseInitiator'(Tlv, [10]).

'dec_CauseInitiator'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> user;
1 -> isupNetwork;
2 -> nonIsupNetwork;
3 -> system;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  EventIndicator
%%================================
'enc_EventIndicator'(Val) ->
    'enc_EventIndicator'(Val, [<<10>>]).

'enc_EventIndicator'(Val, TagIn) ->
case Val of
alerting -> encode_tags(TagIn, [0], 1);
progress -> encode_tags(TagIn, [1], 1);
inBandInfo -> encode_tags(TagIn, [2], 1);
cfb -> encode_tags(TagIn, [3], 1);
cfnr -> encode_tags(TagIn, [4], 1);
cfu -> encode_tags(TagIn, [5], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_EventIndicator'(Tlv) ->
   'dec_EventIndicator'(Tlv, [10]).

'dec_EventIndicator'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> alerting;
1 -> progress;
2 -> inBandInfo;
3 -> cfb;
4 -> cfnr;
5 -> cfu;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  EventPresentationRestrictedIndicator
%%================================
'enc_EventPresentationRestrictedIndicator'(Val) ->
    'enc_EventPresentationRestrictedIndicator'(Val, [<<10>>]).

'enc_EventPresentationRestrictedIndicator'(Val, TagIn) ->
case Val of
noIndication -> encode_tags(TagIn, [0], 1);
restricted -> encode_tags(TagIn, [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_EventPresentationRestrictedIndicator'(Tlv) ->
   'dec_EventPresentationRestrictedIndicator'(Tlv, [10]).

'dec_EventPresentationRestrictedIndicator'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> noIndication;
1 -> restricted;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  EventInformation
%%================================
'enc_EventInformation'(Val) ->
    'enc_EventInformation'(Val, [<<48>>]).

'enc_EventInformation'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute eventIndicator(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
alerting -> encode_tags([<<128>>], [0], 1);
progress -> encode_tags([<<128>>], [1], 1);
inBandInfo -> encode_tags([<<128>>], [2], 1);
cfb -> encode_tags([<<128>>], [3], 1);
cfnr -> encode_tags([<<128>>], [4], 1);
cfu -> encode_tags([<<128>>], [5], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute eventPresentationIndicator(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
noIndication -> encode_tags([<<129>>], [0], 1);
restricted -> encode_tags([<<129>>], [1], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_EventInformation'(Tlv) ->
   'dec_EventInformation'(Tlv, [16]).

'dec_EventInformation'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute eventIndicator(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> alerting;
1 -> progress;
2 -> inBandInfo;
3 -> cfb;
4 -> cfnr;
5 -> cfu;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute eventPresentationIndicator(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> noIndication;
1 -> restricted;
Default2 -> exit({error,{asn1,{illegal_enumerated,Default2}}})
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'EventInformation', Term1, Term2}.



%%================================
%%  RedirectionRestrictionIndicator
%%================================
'enc_RedirectionRestrictionIndicator'(Val) ->
    'enc_RedirectionRestrictionIndicator'(Val, [<<10>>]).

'enc_RedirectionRestrictionIndicator'(Val, TagIn) ->
case Val of
presentationAllowed -> encode_tags(TagIn, [0], 1);
presentationRestricted -> encode_tags(TagIn, [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_RedirectionRestrictionIndicator'(Tlv) ->
   'dec_RedirectionRestrictionIndicator'(Tlv, [10]).

'dec_RedirectionRestrictionIndicator'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> presentationAllowed;
1 -> presentationRestricted;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  NotificationSubscriptionOptions
%%================================
'enc_NotificationSubscriptionOptions'(Val) ->
    'enc_NotificationSubscriptionOptions'(Val, [<<10>>]).

'enc_NotificationSubscriptionOptions'(Val, TagIn) ->
case Val of
unknown -> encode_tags(TagIn, [0], 1);
presentationNotAllowed -> encode_tags(TagIn, [1], 1);
presentationAllowedWithRedirectingNumber -> encode_tags(TagIn, [2], 1);
presentationAllowedWithoutRedirectingNumber -> encode_tags(TagIn, [3], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_NotificationSubscriptionOptions'(Tlv) ->
   'dec_NotificationSubscriptionOptions'(Tlv, [10]).

'dec_NotificationSubscriptionOptions'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> unknown;
1 -> presentationNotAllowed;
2 -> presentationAllowedWithRedirectingNumber;
3 -> presentationAllowedWithoutRedirectingNumber;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  RedirectingReason
%%================================
'enc_RedirectingReason'(Val) ->
    'enc_RedirectingReason'(Val, [<<10>>]).

'enc_RedirectingReason'(Val, TagIn) ->
case Val of
unknown -> encode_tags(TagIn, [0], 1);
busy -> encode_tags(TagIn, [1], 1);
noReply -> encode_tags(TagIn, [2], 1);
unconditional -> encode_tags(TagIn, [3], 1);
deflectAlert -> encode_tags(TagIn, [4], 1);
deflectResp -> encode_tags(TagIn, [5], 1);
notReachable -> encode_tags(TagIn, [6], 1);
timeOfDay -> encode_tags(TagIn, [7], 1);
doNotDisturb -> encode_tags(TagIn, [8], 1);
followMe -> encode_tags(TagIn, [9], 1);
outOfService -> encode_tags(TagIn, [10], 1);
away -> encode_tags(TagIn, [11], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_RedirectingReason'(Tlv) ->
   'dec_RedirectingReason'(Tlv, [10]).

'dec_RedirectingReason'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> unknown;
1 -> busy;
2 -> noReply;
3 -> unconditional;
4 -> deflectAlert;
5 -> deflectResp;
6 -> notReachable;
7 -> timeOfDay;
8 -> doNotDisturb;
9 -> followMe;
10 -> outOfService;
11 -> away;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  CallDiversionInformation
%%================================
'enc_CallDiversionInformation'(Val) ->
    'enc_CallDiversionInformation'(Val, [<<48>>]).

'enc_CallDiversionInformation'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute notificationSubsOpts(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
unknown -> encode_tags([<<128>>], [0], 1);
presentationNotAllowed -> encode_tags([<<128>>], [1], 1);
presentationAllowedWithRedirectingNumber -> encode_tags([<<128>>], [2], 1);
presentationAllowedWithoutRedirectingNumber -> encode_tags([<<128>>], [3], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute redirectingReason(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
unknown -> encode_tags([<<129>>], [0], 1);
busy -> encode_tags([<<129>>], [1], 1);
noReply -> encode_tags([<<129>>], [2], 1);
unconditional -> encode_tags([<<129>>], [3], 1);
deflectAlert -> encode_tags([<<129>>], [4], 1);
deflectResp -> encode_tags([<<129>>], [5], 1);
notReachable -> encode_tags([<<129>>], [6], 1);
timeOfDay -> encode_tags([<<129>>], [7], 1);
doNotDisturb -> encode_tags([<<129>>], [8], 1);
followMe -> encode_tags([<<129>>], [9], 1);
outOfService -> encode_tags([<<129>>], [10], 1);
away -> encode_tags([<<129>>], [11], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_CallDiversionInformation'(Tlv) ->
   'dec_CallDiversionInformation'(Tlv, [16]).

'dec_CallDiversionInformation'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute notificationSubsOpts(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> unknown;
1 -> presentationNotAllowed;
2 -> presentationAllowedWithRedirectingNumber;
3 -> presentationAllowedWithoutRedirectingNumber;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute redirectingReason(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> unknown;
1 -> busy;
2 -> noReply;
3 -> unconditional;
4 -> deflectAlert;
5 -> deflectResp;
6 -> notReachable;
7 -> timeOfDay;
8 -> doNotDisturb;
9 -> followMe;
10 -> outOfService;
11 -> away;
Default2 -> exit({error,{asn1,{illegal_enumerated,Default2}}})
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'CallDiversionInformation', Term1, Term2}.



%%================================
%%  CallProgressType
%%================================
'enc_CallProgressType'(Val) ->
    'enc_CallProgressType'(Val, [<<48>>]).

'enc_CallProgressType'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8, Cindex9, Cindex10, Cindex11, Cindex12, Cindex13, Cindex14, Cindex15, Cindex16, Cindex17} = Val,

%%-------------------------------------------------
%% attribute cause(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
normal -> encode_tags([<<128>>], [0], 1);
originationDenied -> encode_tags([<<128>>], [1], 1);
collectDigits -> encode_tags([<<128>>], [2], 1);
authorisationFailure -> encode_tags([<<128>>], [3], 1);
bPtyAlerted -> encode_tags([<<128>>], [4], 1);
noIndication -> encode_tags([<<128>>], [5], 1);
aPtyAbandon -> encode_tags([<<128>>], [6], 1);
invalidCollectedInformation -> encode_tags([<<128>>], [7], 1);
collectInformationFailure -> encode_tags([<<128>>], [8], 1);
aPtyDisc -> encode_tags([<<128>>], [9], 1);
bPtyDisc -> encode_tags([<<128>>], [10], 1);
routeSelectFailure -> encode_tags([<<128>>], [11], 1);
oNoAnswer -> encode_tags([<<128>>], [12], 1);
terminationDenied -> encode_tags([<<128>>], [13], 1);
notReachable -> encode_tags([<<128>>], [14], 1);
bPtyNoAnswer -> encode_tags([<<128>>], [15], 1);
bPtyBusyUDUB -> encode_tags([<<128>>], [16], 1);
bPtyBusyNDUB -> encode_tags([<<128>>], [17], 1);
ss7Failure -> encode_tags([<<128>>], [18], 1);
calledPartyRejected -> encode_tags([<<128>>], [19], 1);
tException -> encode_tags([<<128>>], [20], 1);
routeFailure1 -> encode_tags([<<128>>], [21], 1);
routeFailure2 -> encode_tags([<<128>>], [22], 1);
ssActivating -> encode_tags([<<128>>], [23], 1);
conversationTimeout -> encode_tags([<<128>>], [24], 1);
noCircuitAvailable -> encode_tags([<<128>>], [25], 1);
coreNotification -> encode_tags([<<128>>], [26], 1);
unsupportedMedia -> encode_tags([<<128>>], [27], 1);
numberIncomplete -> encode_tags([<<128>>], [28], 1);
invalidNumber -> encode_tags([<<128>>], [29], 1);
unassignedNumber -> encode_tags([<<128>>], [30], 1);
doNotDisturb -> encode_tags([<<128>>], [31], 1);
externalControlled -> encode_tags([<<128>>], [32], 1);
systemFailure -> encode_tags([<<128>>], [33], 1);
applicationNotification -> encode_tags([<<128>>], [34], 1);
referOk -> encode_tags([<<128>>], [35], 1);
referFailure -> encode_tags([<<128>>], [36], 1);
hole -> encode_tags([<<128>>], [37], 1);
hold -> encode_tags([<<128>>], [38], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute causeInitiator(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
user -> encode_tags([<<129>>], [0], 1);
isupNetwork -> encode_tags([<<129>>], [1], 1);
nonIsupNetwork -> encode_tags([<<129>>], [2], 1);
system -> encode_tags([<<129>>], [3], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute causeIsup(3) with type BIT STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_unnamed_bit_string(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute eventInformation(4)   External INCS3Internals:EventInformation OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_EventInformation'(Cindex4, [<<163>>])
       end,

%%-------------------------------------------------
%% attribute additionalInfo(5) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_CallProgressType_additionalInfo'(Cindex5, [<<164>>])
       end,

%%-------------------------------------------------
%% attribute oBCI(6)   External ACPdatatypes:OptionalBackwardCallInidicators OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'ACPdatatypes':'enc_OptionalBackwardCallInidicators'(Cindex6, [<<165>>])
       end,

%%-------------------------------------------------
%% attribute gNotification(7)   External ACPdatatypes:GenericNotificationIndicatorList OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'ACPdatatypes':'enc_GenericNotificationIndicatorList'(Cindex7, [<<166>>])
       end,

%%-------------------------------------------------
%% attribute redirectionNumber(8)   External ACPdatatypes:RedirectionNumber OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case Cindex8 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'ACPdatatypes':'enc_RedirectionNumber'(Cindex8, [<<167>>])
       end,

%%-------------------------------------------------
%% attribute redirectionRestInd(9) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes9,EncLen9} =  case Cindex9 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex9 of
presentationAllowed -> encode_tags([<<136>>], [0], 1);
presentationRestricted -> encode_tags([<<136>>], [1], 1);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end
       end,

%%-------------------------------------------------
%% attribute callDiversionInfo(10)   External INCS3Internals:CallDiversionInformation OPTIONAL
%%-------------------------------------------------
   {EncBytes10,EncLen10} =  case Cindex10 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_CallDiversionInformation'(Cindex10, [<<169>>])
       end,

%%-------------------------------------------------
%% attribute facility(11) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes11,EncLen11} =  case Cindex11 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex11, [<<138>>])
       end,

%%-------------------------------------------------
%% attribute sdp(12)   External INCS3Internals:SDPType OPTIONAL
%%-------------------------------------------------
   {EncBytes12,EncLen12} =  case Cindex12 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_SDPType'(Cindex12, [<<171>>])
       end,

%%-------------------------------------------------
%% attribute mediaPoint(13) with type BIT STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes13,EncLen13} =  case Cindex13 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_unnamed_bit_string(Cindex13, [<<140>>])
       end,

%%-------------------------------------------------
%% attribute trunkGroupId(14)   External ACPdatatypes:TrunkGroupId OPTIONAL
%%-------------------------------------------------
   {EncBytes14,EncLen14} =  case Cindex14 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'ACPdatatypes':'enc_TrunkGroupId'(Cindex14, [<<173>>])
       end,

%%-------------------------------------------------
%% attribute callTransferNumber(15)   External ACPdatatypes:CallTransferNumber OPTIONAL
%%-------------------------------------------------
   {EncBytes15,EncLen15} =  case Cindex15 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'ACPdatatypes':'enc_CallTransferNumber'(Cindex15, [<<174>>])
       end,

%%-------------------------------------------------
%% attribute refer(16)   External INCS3Internals:ReferType OPTIONAL
%%-------------------------------------------------
   {EncBytes16,EncLen16} =  case Cindex16 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_ReferType'(Cindex16, [<<175>>])
       end,

%%-------------------------------------------------
%% attribute eventTime(17)   External INCS3Internals:EventTime OPTIONAL
%%-------------------------------------------------
   {EncBytes17,EncLen17} =  case Cindex17 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_EventTime'(Cindex17, [<<176>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10, EncBytes11, EncBytes12, EncBytes13, EncBytes14, EncBytes15, EncBytes16, EncBytes17],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10 + EncLen11 + EncLen12 + EncLen13 + EncLen14 + EncLen15 + EncLen16 + EncLen17,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  CallProgressType_additionalInfo
%%================================
'enc_CallProgressType_additionalInfo'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_CallProgressType_additionalInfo_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_CallProgressType_additionalInfo_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_CallProgressType_additionalInfo_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'INCS3datatypes':'enc_AdditionalInformation'(H, []),
   'enc_CallProgressType_additionalInfo_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_CallProgressType'(Tlv) ->
   'dec_CallProgressType'(Tlv, [16]).

'dec_CallProgressType'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute cause(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> normal;
1 -> originationDenied;
2 -> collectDigits;
3 -> authorisationFailure;
4 -> bPtyAlerted;
5 -> noIndication;
6 -> aPtyAbandon;
7 -> invalidCollectedInformation;
8 -> collectInformationFailure;
9 -> aPtyDisc;
10 -> bPtyDisc;
11 -> routeSelectFailure;
12 -> oNoAnswer;
13 -> terminationDenied;
14 -> notReachable;
15 -> bPtyNoAnswer;
16 -> bPtyBusyUDUB;
17 -> bPtyBusyNDUB;
18 -> ss7Failure;
19 -> calledPartyRejected;
20 -> tException;
21 -> routeFailure1;
22 -> routeFailure2;
23 -> ssActivating;
24 -> conversationTimeout;
25 -> noCircuitAvailable;
26 -> coreNotification;
27 -> unsupportedMedia;
28 -> numberIncomplete;
29 -> invalidNumber;
30 -> unassignedNumber;
31 -> doNotDisturb;
32 -> externalControlled;
33 -> systemFailure;
34 -> applicationNotification;
35 -> referOk;
36 -> referFailure;
37 -> hole;
38 -> hold;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute causeInitiator(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> user;
1 -> isupNetwork;
2 -> nonIsupNetwork;
3 -> system;
Default2 -> exit({error,{asn1,{illegal_enumerated,Default2}}})
end,

%%-------------------------------------------------
%% attribute causeIsup(3) with type BIT STRING OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {decode_native_bit_string(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute eventInformation(4)   External INCS3Internals:EventInformation OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'dec_EventInformation'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute additionalInfo(5) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {'dec_CallProgressType_additionalInfo'(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute oBCI(6)   External ACPdatatypes:OptionalBackwardCallInidicators OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {'ACPdatatypes':'dec_OptionalBackwardCallInidicators'(V6, []), TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute gNotification(7)   External ACPdatatypes:GenericNotificationIndicatorList OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {'ACPdatatypes':'dec_GenericNotificationIndicatorList'(V7, []), TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

%%-------------------------------------------------
%% attribute redirectionNumber(8)   External ACPdatatypes:RedirectionNumber OPTIONAL
%%-------------------------------------------------
{Term8,Tlv9} = case Tlv8 of
[{131079,V8}|TempTlv9] ->
    {'ACPdatatypes':'dec_RedirectionNumber'(V8, []), TempTlv9};
    _ ->
        { asn1_NOVALUE, Tlv8}
end,

%%-------------------------------------------------
%% attribute redirectionRestInd(9) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term9,Tlv10} = case Tlv9 of
[{131080,V9}|TempTlv10] ->
    {case decode_integer(V9, []) of
0 -> presentationAllowed;
1 -> presentationRestricted;
Default3 -> exit({error,{asn1,{illegal_enumerated,Default3}}})
end, TempTlv10};
    _ ->
        { asn1_NOVALUE, Tlv9}
end,

%%-------------------------------------------------
%% attribute callDiversionInfo(10)   External INCS3Internals:CallDiversionInformation OPTIONAL
%%-------------------------------------------------
{Term10,Tlv11} = case Tlv10 of
[{131081,V10}|TempTlv11] ->
    {'dec_CallDiversionInformation'(V10, []), TempTlv11};
    _ ->
        { asn1_NOVALUE, Tlv10}
end,

%%-------------------------------------------------
%% attribute facility(11) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term11,Tlv12} = case Tlv11 of
[{131082,V11}|TempTlv12] ->
    {decode_octet_string(V11, []), TempTlv12};
    _ ->
        { asn1_NOVALUE, Tlv11}
end,

%%-------------------------------------------------
%% attribute sdp(12)   External INCS3Internals:SDPType OPTIONAL
%%-------------------------------------------------
{Term12,Tlv13} = case Tlv12 of
[{131083,V12}|TempTlv13] ->
    {'dec_SDPType'(V12, []), TempTlv13};
    _ ->
        { asn1_NOVALUE, Tlv12}
end,

%%-------------------------------------------------
%% attribute mediaPoint(13) with type BIT STRING OPTIONAL
%%-------------------------------------------------
{Term13,Tlv14} = case Tlv13 of
[{131084,V13}|TempTlv14] ->
    {decode_native_bit_string(V13, []), TempTlv14};
    _ ->
        { asn1_NOVALUE, Tlv13}
end,

%%-------------------------------------------------
%% attribute trunkGroupId(14)   External ACPdatatypes:TrunkGroupId OPTIONAL
%%-------------------------------------------------
{Term14,Tlv15} = case Tlv14 of
[{131085,V14}|TempTlv15] ->
    {'ACPdatatypes':'dec_TrunkGroupId'(V14, []), TempTlv15};
    _ ->
        { asn1_NOVALUE, Tlv14}
end,

%%-------------------------------------------------
%% attribute callTransferNumber(15)   External ACPdatatypes:CallTransferNumber OPTIONAL
%%-------------------------------------------------
{Term15,Tlv16} = case Tlv15 of
[{131086,V15}|TempTlv16] ->
    {'ACPdatatypes':'dec_CallTransferNumber'(V15, []), TempTlv16};
    _ ->
        { asn1_NOVALUE, Tlv15}
end,

%%-------------------------------------------------
%% attribute refer(16)   External INCS3Internals:ReferType OPTIONAL
%%-------------------------------------------------
{Term16,Tlv17} = case Tlv16 of
[{131087,V16}|TempTlv17] ->
    {'dec_ReferType'(V16, []), TempTlv17};
    _ ->
        { asn1_NOVALUE, Tlv16}
end,

%%-------------------------------------------------
%% attribute eventTime(17)   External INCS3Internals:EventTime OPTIONAL
%%-------------------------------------------------
{Term17,Tlv18} = case Tlv17 of
[{131088,V17}|TempTlv18] ->
    {'dec_EventTime'(V17, []), TempTlv18};
    _ ->
        { asn1_NOVALUE, Tlv17}
end,

case Tlv18 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv18}}}) % extra fields not allowed
end,
   {'CallProgressType', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9, Term10, Term11, Term12, Term13, Term14, Term15, Term16, Term17}.

'dec_CallProgressType_additionalInfo'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['INCS3datatypes':'dec_AdditionalInformation'(V1, []) || V1 <- Tlv1].




%%================================
%%  FailureType
%%================================
'enc_FailureType'(Val) ->
    'enc_FailureType'(Val, [<<48>>]).

'enc_FailureType'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute callRef(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute cause(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
normal -> encode_tags([<<129>>], [0], 1);
originationDenied -> encode_tags([<<129>>], [1], 1);
collectDigits -> encode_tags([<<129>>], [2], 1);
authorisationFailure -> encode_tags([<<129>>], [3], 1);
bPtyAlerted -> encode_tags([<<129>>], [4], 1);
noIndication -> encode_tags([<<129>>], [5], 1);
aPtyAbandon -> encode_tags([<<129>>], [6], 1);
invalidCollectedInformation -> encode_tags([<<129>>], [7], 1);
collectInformationFailure -> encode_tags([<<129>>], [8], 1);
aPtyDisc -> encode_tags([<<129>>], [9], 1);
bPtyDisc -> encode_tags([<<129>>], [10], 1);
routeSelectFailure -> encode_tags([<<129>>], [11], 1);
oNoAnswer -> encode_tags([<<129>>], [12], 1);
terminationDenied -> encode_tags([<<129>>], [13], 1);
notReachable -> encode_tags([<<129>>], [14], 1);
bPtyNoAnswer -> encode_tags([<<129>>], [15], 1);
bPtyBusyUDUB -> encode_tags([<<129>>], [16], 1);
bPtyBusyNDUB -> encode_tags([<<129>>], [17], 1);
ss7Failure -> encode_tags([<<129>>], [18], 1);
calledPartyRejected -> encode_tags([<<129>>], [19], 1);
tException -> encode_tags([<<129>>], [20], 1);
routeFailure1 -> encode_tags([<<129>>], [21], 1);
routeFailure2 -> encode_tags([<<129>>], [22], 1);
ssActivating -> encode_tags([<<129>>], [23], 1);
conversationTimeout -> encode_tags([<<129>>], [24], 1);
noCircuitAvailable -> encode_tags([<<129>>], [25], 1);
coreNotification -> encode_tags([<<129>>], [26], 1);
unsupportedMedia -> encode_tags([<<129>>], [27], 1);
numberIncomplete -> encode_tags([<<129>>], [28], 1);
invalidNumber -> encode_tags([<<129>>], [29], 1);
unassignedNumber -> encode_tags([<<129>>], [30], 1);
doNotDisturb -> encode_tags([<<129>>], [31], 1);
externalControlled -> encode_tags([<<129>>], [32], 1);
systemFailure -> encode_tags([<<129>>], [33], 1);
applicationNotification -> encode_tags([<<129>>], [34], 1);
referOk -> encode_tags([<<129>>], [35], 1);
referFailure -> encode_tags([<<129>>], [36], 1);
hole -> encode_tags([<<129>>], [37], 1);
hold -> encode_tags([<<129>>], [38], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_FailureType'(Tlv) ->
   'dec_FailureType'(Tlv, [16]).

'dec_FailureType'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute callRef(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1, [131072]),

%%-------------------------------------------------
%% attribute cause(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> normal;
1 -> originationDenied;
2 -> collectDigits;
3 -> authorisationFailure;
4 -> bPtyAlerted;
5 -> noIndication;
6 -> aPtyAbandon;
7 -> invalidCollectedInformation;
8 -> collectInformationFailure;
9 -> aPtyDisc;
10 -> bPtyDisc;
11 -> routeSelectFailure;
12 -> oNoAnswer;
13 -> terminationDenied;
14 -> notReachable;
15 -> bPtyNoAnswer;
16 -> bPtyBusyUDUB;
17 -> bPtyBusyNDUB;
18 -> ss7Failure;
19 -> calledPartyRejected;
20 -> tException;
21 -> routeFailure1;
22 -> routeFailure2;
23 -> ssActivating;
24 -> conversationTimeout;
25 -> noCircuitAvailable;
26 -> coreNotification;
27 -> unsupportedMedia;
28 -> numberIncomplete;
29 -> invalidNumber;
30 -> unassignedNumber;
31 -> doNotDisturb;
32 -> externalControlled;
33 -> systemFailure;
34 -> applicationNotification;
35 -> referOk;
36 -> referFailure;
37 -> hole;
38 -> hold;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'FailureType', Term1, Term2}.



%%================================
%%  NetworkSRType
%%================================
'enc_NetworkSRType'(Val) ->
    'enc_NetworkSRType'(Val, [<<48>>]).

'enc_NetworkSRType'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute callRef(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_NetworkSRType'(Tlv) ->
   'dec_NetworkSRType'(Tlv, [16]).

'dec_NetworkSRType'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute callRef(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1, [131072]),

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'NetworkSRType', Term1}.



%%================================
%%  ReleaseType
%%================================
'enc_ReleaseType'(Val) ->
    'enc_ReleaseType'(Val, [<<48>>]).

'enc_ReleaseType'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8, Cindex9, Cindex10} = Val,

%%-------------------------------------------------
%% attribute cause(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
normal -> encode_tags([<<128>>], [0], 1);
originationDenied -> encode_tags([<<128>>], [1], 1);
collectDigits -> encode_tags([<<128>>], [2], 1);
authorisationFailure -> encode_tags([<<128>>], [3], 1);
bPtyAlerted -> encode_tags([<<128>>], [4], 1);
noIndication -> encode_tags([<<128>>], [5], 1);
aPtyAbandon -> encode_tags([<<128>>], [6], 1);
invalidCollectedInformation -> encode_tags([<<128>>], [7], 1);
collectInformationFailure -> encode_tags([<<128>>], [8], 1);
aPtyDisc -> encode_tags([<<128>>], [9], 1);
bPtyDisc -> encode_tags([<<128>>], [10], 1);
routeSelectFailure -> encode_tags([<<128>>], [11], 1);
oNoAnswer -> encode_tags([<<128>>], [12], 1);
terminationDenied -> encode_tags([<<128>>], [13], 1);
notReachable -> encode_tags([<<128>>], [14], 1);
bPtyNoAnswer -> encode_tags([<<128>>], [15], 1);
bPtyBusyUDUB -> encode_tags([<<128>>], [16], 1);
bPtyBusyNDUB -> encode_tags([<<128>>], [17], 1);
ss7Failure -> encode_tags([<<128>>], [18], 1);
calledPartyRejected -> encode_tags([<<128>>], [19], 1);
tException -> encode_tags([<<128>>], [20], 1);
routeFailure1 -> encode_tags([<<128>>], [21], 1);
routeFailure2 -> encode_tags([<<128>>], [22], 1);
ssActivating -> encode_tags([<<128>>], [23], 1);
conversationTimeout -> encode_tags([<<128>>], [24], 1);
noCircuitAvailable -> encode_tags([<<128>>], [25], 1);
coreNotification -> encode_tags([<<128>>], [26], 1);
unsupportedMedia -> encode_tags([<<128>>], [27], 1);
numberIncomplete -> encode_tags([<<128>>], [28], 1);
invalidNumber -> encode_tags([<<128>>], [29], 1);
unassignedNumber -> encode_tags([<<128>>], [30], 1);
doNotDisturb -> encode_tags([<<128>>], [31], 1);
externalControlled -> encode_tags([<<128>>], [32], 1);
systemFailure -> encode_tags([<<128>>], [33], 1);
applicationNotification -> encode_tags([<<128>>], [34], 1);
referOk -> encode_tags([<<128>>], [35], 1);
referFailure -> encode_tags([<<128>>], [36], 1);
hole -> encode_tags([<<128>>], [37], 1);
hold -> encode_tags([<<128>>], [38], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute causeInitiator(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
user -> encode_tags([<<129>>], [0], 1);
isupNetwork -> encode_tags([<<129>>], [1], 1);
nonIsupNetwork -> encode_tags([<<129>>], [2], 1);
system -> encode_tags([<<129>>], [3], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute dialledDigits(3) with type PrintableString OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute causeIsup(4) with type BIT STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_unnamed_bit_string(Cindex4, [<<131>>])
       end,

%%-------------------------------------------------
%% attribute additionalInfo(5) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_ReleaseType_additionalInfo'(Cindex5, [<<164>>])
       end,

%%-------------------------------------------------
%% attribute trunkGroupId(6)   External ACPdatatypes:TrunkGroupId OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'ACPdatatypes':'enc_TrunkGroupId'(Cindex6, [<<165>>])
       end,

%%-------------------------------------------------
%% attribute sid(7) with type BIT STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_unnamed_bit_string(Cindex7, [<<134>>])
       end,

%%-------------------------------------------------
%% attribute refer(8)   External INCS3Internals:ReferType OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case Cindex8 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_ReferType'(Cindex8, [<<167>>])
       end,

%%-------------------------------------------------
%% attribute needAck(9) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes9,EncLen9} = encode_boolean(Cindex9, [<<136>>]),

%%-------------------------------------------------
%% attribute eventTime(10)   External INCS3Internals:EventTime OPTIONAL
%%-------------------------------------------------
   {EncBytes10,EncLen10} =  case Cindex10 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_EventTime'(Cindex10, [<<169>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ReleaseType_additionalInfo
%%================================
'enc_ReleaseType_additionalInfo'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_ReleaseType_additionalInfo_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ReleaseType_additionalInfo_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ReleaseType_additionalInfo_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'INCS3datatypes':'enc_AdditionalInformation'(H, []),
   'enc_ReleaseType_additionalInfo_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_ReleaseType'(Tlv) ->
   'dec_ReleaseType'(Tlv, [16]).

'dec_ReleaseType'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute cause(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> normal;
1 -> originationDenied;
2 -> collectDigits;
3 -> authorisationFailure;
4 -> bPtyAlerted;
5 -> noIndication;
6 -> aPtyAbandon;
7 -> invalidCollectedInformation;
8 -> collectInformationFailure;
9 -> aPtyDisc;
10 -> bPtyDisc;
11 -> routeSelectFailure;
12 -> oNoAnswer;
13 -> terminationDenied;
14 -> notReachable;
15 -> bPtyNoAnswer;
16 -> bPtyBusyUDUB;
17 -> bPtyBusyNDUB;
18 -> ss7Failure;
19 -> calledPartyRejected;
20 -> tException;
21 -> routeFailure1;
22 -> routeFailure2;
23 -> ssActivating;
24 -> conversationTimeout;
25 -> noCircuitAvailable;
26 -> coreNotification;
27 -> unsupportedMedia;
28 -> numberIncomplete;
29 -> invalidNumber;
30 -> unassignedNumber;
31 -> doNotDisturb;
32 -> externalControlled;
33 -> systemFailure;
34 -> applicationNotification;
35 -> referOk;
36 -> referFailure;
37 -> hole;
38 -> hold;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute causeInitiator(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> user;
1 -> isupNetwork;
2 -> nonIsupNetwork;
3 -> system;
Default2 -> exit({error,{asn1,{illegal_enumerated,Default2}}})
end,

%%-------------------------------------------------
%% attribute dialledDigits(3) with type PrintableString OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {begin
binary_to_list(decode_restricted_string(V3, []))
end
, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute causeIsup(4) with type BIT STRING OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {decode_native_bit_string(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute additionalInfo(5) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {'dec_ReleaseType_additionalInfo'(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute trunkGroupId(6)   External ACPdatatypes:TrunkGroupId OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {'ACPdatatypes':'dec_TrunkGroupId'(V6, []), TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute sid(7) with type BIT STRING OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {decode_native_bit_string(V7, []), TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

%%-------------------------------------------------
%% attribute refer(8)   External INCS3Internals:ReferType OPTIONAL
%%-------------------------------------------------
{Term8,Tlv9} = case Tlv8 of
[{131079,V8}|TempTlv9] ->
    {'dec_ReferType'(V8, []), TempTlv9};
    _ ->
        { asn1_NOVALUE, Tlv8}
end,

%%-------------------------------------------------
%% attribute needAck(9) with type BOOLEAN
%%-------------------------------------------------
[V9|Tlv10] = Tlv9, 
Term9 = decode_boolean(V9, [131080]),

%%-------------------------------------------------
%% attribute eventTime(10)   External INCS3Internals:EventTime OPTIONAL
%%-------------------------------------------------
{Term10,Tlv11} = case Tlv10 of
[{131081,V10}|TempTlv11] ->
    {'dec_EventTime'(V10, []), TempTlv11};
    _ ->
        { asn1_NOVALUE, Tlv10}
end,

case Tlv11 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv11}}}) % extra fields not allowed
end,
   {'ReleaseType', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9, Term10}.

'dec_ReleaseType_additionalInfo'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['INCS3datatypes':'dec_AdditionalInformation'(V1, []) || V1 <- Tlv1].




%%================================
%%  ServiceFeatureType
%%================================
'enc_ServiceFeatureType'(Val) ->
    'enc_ServiceFeatureType'(Val, [<<48>>]).

'enc_ServiceFeatureType'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute cause(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
flash -> encode_tags([<<128>>], [0], 1);
refer -> encode_tags([<<128>>], [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute callRef(2) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_ServiceFeatureType_callRef'(Cindex2, [<<161>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ServiceFeatureType_callRef
%%================================
'enc_ServiceFeatureType_callRef'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_ServiceFeatureType_callRef_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ServiceFeatureType_callRef_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ServiceFeatureType_callRef_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'INCS3datatypes':'enc_AdditionalInformation'(H, []),
   'enc_ServiceFeatureType_callRef_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_ServiceFeatureType'(Tlv) ->
   'dec_ServiceFeatureType'(Tlv, [16]).

'dec_ServiceFeatureType'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute cause(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> flash;
1 -> refer;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute callRef(2) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_ServiceFeatureType_callRef'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'ServiceFeatureType', Term1, Term2}.

'dec_ServiceFeatureType_callRef'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['INCS3datatypes':'dec_AdditionalInformation'(V1, []) || V1 <- Tlv1].




%%================================
%%  SetupCRType
%%================================
'enc_SetupCRType'(Val) ->
    'enc_SetupCRType'(Val, [<<48>>]).

'enc_SetupCRType'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8} = Val,

%%-------------------------------------------------
%% attribute connectedNumber(1)   External ACPdatatypes:CallingPartyNumber OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'ACPdatatypes':'enc_CallingPartyNumber'(Cindex1, [<<160>>])
       end,

%%-------------------------------------------------
%% attribute additionalInfo(2) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_SetupCRType_additionalInfo'(Cindex2, [<<161>>]),

%%-------------------------------------------------
%% attribute redirectionNumber(3)   External ACPdatatypes:RedirectionNumber OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'ACPdatatypes':'enc_RedirectionNumber'(Cindex3, [<<162>>])
       end,

%%-------------------------------------------------
%% attribute redirectionRestInd(4) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex4 of
presentationAllowed -> encode_tags([<<131>>], [0], 1);
presentationRestricted -> encode_tags([<<131>>], [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end
       end,

%%-------------------------------------------------
%% attribute sdp(5)   External INCS3Internals:SDPType OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_SDPType'(Cindex5, [<<164>>])
       end,

%%-------------------------------------------------
%% attribute mediaPoint(6) with type BIT STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_unnamed_bit_string(Cindex6, [<<133>>])
       end,

%%-------------------------------------------------
%% attribute refer(7)   External INCS3Internals:ReferType OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_ReferType'(Cindex7, [<<166>>])
       end,

%%-------------------------------------------------
%% attribute eventTime(8)   External INCS3Internals:EventTime
%%-------------------------------------------------
   {EncBytes8,EncLen8} = 'enc_EventTime'(Cindex8, [<<167>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  SetupCRType_additionalInfo
%%================================
'enc_SetupCRType_additionalInfo'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_SetupCRType_additionalInfo_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_SetupCRType_additionalInfo_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_SetupCRType_additionalInfo_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'INCS3datatypes':'enc_AdditionalInformation'(H, []),
   'enc_SetupCRType_additionalInfo_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_SetupCRType'(Tlv) ->
   'dec_SetupCRType'(Tlv, [16]).

'dec_SetupCRType'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute connectedNumber(1)   External ACPdatatypes:CallingPartyNumber OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {'ACPdatatypes':'dec_CallingPartyNumber'(V1, []), TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute additionalInfo(2) with type SEQUENCE OF
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_SetupCRType_additionalInfo'(V2, [131073]),

%%-------------------------------------------------
%% attribute redirectionNumber(3)   External ACPdatatypes:RedirectionNumber OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'ACPdatatypes':'dec_RedirectionNumber'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute redirectionRestInd(4) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {case decode_integer(V4, []) of
0 -> presentationAllowed;
1 -> presentationRestricted;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end, TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute sdp(5)   External INCS3Internals:SDPType OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {'dec_SDPType'(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute mediaPoint(6) with type BIT STRING OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {decode_native_bit_string(V6, []), TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute refer(7)   External INCS3Internals:ReferType OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {'dec_ReferType'(V7, []), TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

%%-------------------------------------------------
%% attribute eventTime(8)   External INCS3Internals:EventTime
%%-------------------------------------------------
[V8|Tlv9] = Tlv8, 
Term8 = 'dec_EventTime'(V8, [131079]),

case Tlv9 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv9}}}) % extra fields not allowed
end,
   {'SetupCRType', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8}.

'dec_SetupCRType_additionalInfo'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['INCS3datatypes':'dec_AdditionalInformation'(V1, []) || V1 <- Tlv1].




%%================================
%%  SDPType
%%================================
'enc_SDPType'(Val) ->
    'enc_SDPType'(Val, [<<48>>]).

'enc_SDPType'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute type(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
offer -> encode_tags([<<128>>], [0], 1);
answer -> encode_tags([<<128>>], [1], 1);
unknown -> encode_tags([<<128>>], [2], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute body(2) with type BIT STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_unnamed_bit_string(Cindex2, [<<129>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_SDPType'(Tlv) ->
   'dec_SDPType'(Tlv, [16]).

'dec_SDPType'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute type(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> offer;
1 -> answer;
2 -> unknown;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute body(2) with type BIT STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_native_bit_string(V2, [131073]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'SDPType', Term1, Term2}.



%%================================
%%  ReferType
%%================================
'enc_ReferType'(Val) ->
    'enc_ReferType'(Val, [<<48>>]).

'enc_ReferType'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5} = Val,

%%-------------------------------------------------
%% attribute exchange(1) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute routingKey(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute sid(3) with type BIT STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_unnamed_bit_string(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute callRef(4) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex4, [<<131>>])
       end,

%%-------------------------------------------------
%% attribute confId(5) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex5, [<<132>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_ReferType'(Tlv) ->
   'dec_ReferType'(Tlv, [16]).

'dec_ReferType'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute exchange(1) with type OCTET STRING
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_octet_string(V1, [131072]),

%%-------------------------------------------------
%% attribute routingKey(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {decode_octet_string(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute sid(3) with type BIT STRING OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {decode_native_bit_string(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute callRef(4) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {decode_octet_string(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute confId(5) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {decode_octet_string(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

case Tlv6 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv6}}}) % extra fields not allowed
end,
   {'ReferType', Term1, Term2, Term3, Term4, Term5}.



%%================================
%%  SetupAckType
%%================================
'enc_SetupAckType'(Val) ->
    'enc_SetupAckType'(Val, [<<48>>]).

'enc_SetupAckType'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute refer(1)   External INCS3Internals:ReferType OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_ReferType'(Cindex1, [<<160>>])
       end,

%%-------------------------------------------------
%% attribute trunkGroupId(2)   External ACPdatatypes:TrunkGroupId OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'ACPdatatypes':'enc_TrunkGroupId'(Cindex2, [<<161>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_SetupAckType'(Tlv) ->
   'dec_SetupAckType'(Tlv, [16]).

'dec_SetupAckType'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute refer(1)   External INCS3Internals:ReferType OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {'dec_ReferType'(V1, []), TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute trunkGroupId(2)   External ACPdatatypes:TrunkGroupId OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'ACPdatatypes':'dec_TrunkGroupId'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'SetupAckType', Term1, Term2}.



%%================================
%%  SetupModeType
%%================================
'enc_SetupModeType'(Val) ->
    'enc_SetupModeType'(Val, [<<10>>]).

'enc_SetupModeType'(Val, TagIn) ->
case Val of
normal -> encode_tags(TagIn, [0], 1);
dummy -> encode_tags(TagIn, [1], 1);
internal -> encode_tags(TagIn, [2], 1);
callback -> encode_tags(TagIn, [3], 1);
parking -> encode_tags(TagIn, [4], 1);
supervice -> encode_tags(TagIn, [5], 1);
acd -> encode_tags(TagIn, [6], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_SetupModeType'(Tlv) ->
   'dec_SetupModeType'(Tlv, [10]).

'dec_SetupModeType'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> normal;
1 -> dummy;
2 -> internal;
3 -> callback;
4 -> parking;
5 -> supervice;
6 -> acd;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  SetupIRType
%%================================
'enc_SetupIRType'(Val) ->
    'enc_SetupIRType'(Val, [<<48>>]).

'enc_SetupIRType'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8, Cindex9, Cindex10, Cindex11, Cindex12, Cindex13, Cindex14, Cindex15, Cindex16, Cindex17, Cindex18, Cindex19, Cindex20, Cindex21, Cindex22, Cindex23, Cindex24, Cindex25, Cindex26} = Val,

%%-------------------------------------------------
%% attribute domain(1) with type PrintableString
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute calledPartyNumber(2)   External ACPdatatypes:CalledPartyNumber OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'ACPdatatypes':'enc_CalledPartyNumber'(Cindex2, [<<161>>])
       end,

%%-------------------------------------------------
%% attribute calledPartysCategory(3) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex3 of
unknownAtThisTime -> encode_tags([<<130>>], [0], 1);
operatorFrench -> encode_tags([<<130>>], [1], 1);
operatorEngish -> encode_tags([<<130>>], [2], 1);
operatorGerman -> encode_tags([<<130>>], [3], 1);
operatorRussian -> encode_tags([<<130>>], [4], 1);
operatorSpanish -> encode_tags([<<130>>], [5], 1);
reserved -> encode_tags([<<130>>], [9], 1);
ordinarySubscriber -> encode_tags([<<130>>], [10], 1);
subscriberWithPriority -> encode_tags([<<130>>], [11], 1);
dataCall -> encode_tags([<<130>>], [12], 1);
testCall -> encode_tags([<<130>>], [13], 1);
spare -> encode_tags([<<130>>], [14], 1);
payphone -> encode_tags([<<130>>], [15], 1);
category0 -> encode_tags([<<130>>], [0,224], 2);
hotelsSubscriber -> encode_tags([<<130>>], [0,225], 2);
freeSubscriber -> encode_tags([<<130>>], [0,226], 2);
paidSubscriber -> encode_tags([<<130>>], [0,227], 2);
localSubscriber -> encode_tags([<<130>>], [0,228], 2);
localTaksofon -> encode_tags([<<130>>], [0,229], 2);
autoCallI -> encode_tags([<<130>>], [0,240], 2);
semiautoCallI -> encode_tags([<<130>>], [0,241], 2);
autoCallII -> encode_tags([<<130>>], [0,242], 2);
semiautoCallII -> encode_tags([<<130>>], [0,243], 2);
autoCallIII -> encode_tags([<<130>>], [0,244], 2);
semiautoCallIII -> encode_tags([<<130>>], [0,245], 2);
autoCallIV -> encode_tags([<<130>>], [0,246], 2);
semiautoCallIV -> encode_tags([<<130>>], [0,247], 2);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end
       end,

%%-------------------------------------------------
%% attribute callingPartyNumber(4)   External ACPdatatypes:CallingPartyNumber OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'ACPdatatypes':'enc_CallingPartyNumber'(Cindex4, [<<163>>])
       end,

%%-------------------------------------------------
%% attribute callingPartysCategory(5) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex5 of
unknownAtThisTime -> encode_tags([<<132>>], [0], 1);
operatorFrench -> encode_tags([<<132>>], [1], 1);
operatorEngish -> encode_tags([<<132>>], [2], 1);
operatorGerman -> encode_tags([<<132>>], [3], 1);
operatorRussian -> encode_tags([<<132>>], [4], 1);
operatorSpanish -> encode_tags([<<132>>], [5], 1);
reserved -> encode_tags([<<132>>], [9], 1);
ordinarySubscriber -> encode_tags([<<132>>], [10], 1);
subscriberWithPriority -> encode_tags([<<132>>], [11], 1);
dataCall -> encode_tags([<<132>>], [12], 1);
testCall -> encode_tags([<<132>>], [13], 1);
spare -> encode_tags([<<132>>], [14], 1);
payphone -> encode_tags([<<132>>], [15], 1);
category0 -> encode_tags([<<132>>], [0,224], 2);
hotelsSubscriber -> encode_tags([<<132>>], [0,225], 2);
freeSubscriber -> encode_tags([<<132>>], [0,226], 2);
paidSubscriber -> encode_tags([<<132>>], [0,227], 2);
localSubscriber -> encode_tags([<<132>>], [0,228], 2);
localTaksofon -> encode_tags([<<132>>], [0,229], 2);
autoCallI -> encode_tags([<<132>>], [0,240], 2);
semiautoCallI -> encode_tags([<<132>>], [0,241], 2);
autoCallII -> encode_tags([<<132>>], [0,242], 2);
semiautoCallII -> encode_tags([<<132>>], [0,243], 2);
autoCallIII -> encode_tags([<<132>>], [0,244], 2);
semiautoCallIII -> encode_tags([<<132>>], [0,245], 2);
autoCallIV -> encode_tags([<<132>>], [0,246], 2);
semiautoCallIV -> encode_tags([<<132>>], [0,247], 2);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end
       end,

%%-------------------------------------------------
%% attribute locationNumber(6) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex6, [<<133>>])
       end,

%%-------------------------------------------------
%% attribute originalCalledNumber(7)   External ACPdatatypes:OriginalCalledNumber OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'ACPdatatypes':'enc_OriginalCalledNumber'(Cindex7, [<<166>>])
       end,

%%-------------------------------------------------
%% attribute userTeleserviceInformation(8) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case Cindex8 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex8, [<<135>>])
       end,

%%-------------------------------------------------
%% attribute genericNumber(9)   External INCS3datatypes:GenericNumbers OPTIONAL
%%-------------------------------------------------
   {EncBytes9,EncLen9} =  case Cindex9 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_GenericNumbers'(Cindex9, [<<168>>])
       end,

%%-------------------------------------------------
%% attribute forwardCallIndicators(10) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes10,EncLen10} =  case Cindex10 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_SetupIRType_forwardCallIndicators'(Cindex10, [<<169>>])
       end,

%%-------------------------------------------------
%% attribute redirectingNumber(11)   External ACPdatatypes:RedirectingNumber OPTIONAL
%%-------------------------------------------------
   {EncBytes11,EncLen11} =  case Cindex11 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'ACPdatatypes':'enc_RedirectingNumber'(Cindex11, [<<170>>])
       end,

%%-------------------------------------------------
%% attribute redirectingInformation(12) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes12,EncLen12} =  case Cindex12 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex12, [<<139>>])
       end,

%%-------------------------------------------------
%% attribute uSIServiceIndicator(13)   External INCS3datatypes:USIServiceIndicator OPTIONAL
%%-------------------------------------------------
   {EncBytes13,EncLen13} =  case Cindex13 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_USIServiceIndicator'(Cindex13, [<<172>>])
       end,

%%-------------------------------------------------
%% attribute uSIInformation(14) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes14,EncLen14} =  case Cindex14 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex14, [<<141>>])
       end,

%%-------------------------------------------------
%% attribute isupCallRef(15) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes15,EncLen15} =  case Cindex15 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex15, [<<142>>])
       end,

%%-------------------------------------------------
%% attribute sdp(16)   External INCS3Internals:SDPType OPTIONAL
%%-------------------------------------------------
   {EncBytes16,EncLen16} =  case Cindex16 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_SDPType'(Cindex16, [<<175>>])
       end,

%%-------------------------------------------------
%% attribute mediaPoint(17) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes17,EncLen17} =  case Cindex17 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex17, [<<144>>])
       end,

%%-------------------------------------------------
%% attribute additionalInfo(18) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes18,EncLen18} = 'enc_SetupIRType_additionalInfo'(Cindex18, [<<177>>]),

%%-------------------------------------------------
%% attribute trunkGroupId(19)   External ACPdatatypes:TrunkGroupId OPTIONAL
%%-------------------------------------------------
   {EncBytes19,EncLen19} =  case Cindex19 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'ACPdatatypes':'enc_TrunkGroupId'(Cindex19, [<<178>>])
       end,

%%-------------------------------------------------
%% attribute callingPartyInfo(20) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes20,EncLen20} = 'enc_SetupIRType_callingPartyInfo'(Cindex20, [<<179>>]),

%%-------------------------------------------------
%% attribute calledPartyInfo(21) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes21,EncLen21} = 'enc_SetupIRType_calledPartyInfo'(Cindex21, [<<180>>]),

%%-------------------------------------------------
%% attribute callingIfaceInfo(22) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes22,EncLen22} = 'enc_SetupIRType_callingIfaceInfo'(Cindex22, [<<181>>]),

%%-------------------------------------------------
%% attribute calledIfaceInfo(23) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes23,EncLen23} = 'enc_SetupIRType_calledIfaceInfo'(Cindex23, [<<182>>]),

%%-------------------------------------------------
%% attribute refer(24) with type CHOICE OPTIONAL
%%-------------------------------------------------
   {EncBytes24,EncLen24} =  case Cindex24 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_SetupIRType_refer'(Cindex24, [<<183>>])
       end,

%%-------------------------------------------------
%% attribute mode(25) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes25,EncLen25} =  case Cindex25 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex25 of
normal -> encode_tags([<<152>>], [0], 1);
dummy -> encode_tags([<<152>>], [1], 1);
internal -> encode_tags([<<152>>], [2], 1);
callback -> encode_tags([<<152>>], [3], 1);
parking -> encode_tags([<<152>>], [4], 1);
supervice -> encode_tags([<<152>>], [5], 1);
acd -> encode_tags([<<152>>], [6], 1);
Enumval10 -> exit({error,{asn1, {enumerated_not_in_range,Enumval10}}})
end
       end,

%%-------------------------------------------------
%% attribute eventTime(26)   External INCS3Internals:EventTime OPTIONAL
%%-------------------------------------------------
   {EncBytes26,EncLen26} =  case Cindex26 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_EventTime'(Cindex26, [<<185>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10, EncBytes11, EncBytes12, EncBytes13, EncBytes14, EncBytes15, EncBytes16, EncBytes17, EncBytes18, EncBytes19, EncBytes20, EncBytes21, EncBytes22, EncBytes23, EncBytes24, EncBytes25, EncBytes26],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10 + EncLen11 + EncLen12 + EncLen13 + EncLen14 + EncLen15 + EncLen16 + EncLen17 + EncLen18 + EncLen19 + EncLen20 + EncLen21 + EncLen22 + EncLen23 + EncLen24 + EncLen25 + EncLen26,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  SetupIRType_forwardCallIndicators
%%================================
'enc_SetupIRType_forwardCallIndicators'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_SetupIRType_forwardCallIndicators_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_SetupIRType_forwardCallIndicators_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_SetupIRType_forwardCallIndicators_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = encode_integer(H, [<<2>>]),
   'enc_SetupIRType_forwardCallIndicators_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  SetupIRType_additionalInfo
%%================================
'enc_SetupIRType_additionalInfo'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_SetupIRType_additionalInfo_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_SetupIRType_additionalInfo_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_SetupIRType_additionalInfo_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'INCS3datatypes':'enc_AdditionalInformation'(H, []),
   'enc_SetupIRType_additionalInfo_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  SetupIRType_callingPartyInfo
%%================================
'enc_SetupIRType_callingPartyInfo'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_SetupIRType_callingPartyInfo_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_SetupIRType_callingPartyInfo_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_SetupIRType_callingPartyInfo_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = encode_restricted_string(H, [<<19>>]),
   'enc_SetupIRType_callingPartyInfo_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  SetupIRType_calledPartyInfo
%%================================
'enc_SetupIRType_calledPartyInfo'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_SetupIRType_calledPartyInfo_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_SetupIRType_calledPartyInfo_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_SetupIRType_calledPartyInfo_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = encode_restricted_string(H, [<<19>>]),
   'enc_SetupIRType_calledPartyInfo_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  SetupIRType_callingIfaceInfo
%%================================
'enc_SetupIRType_callingIfaceInfo'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_SetupIRType_callingIfaceInfo_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_SetupIRType_callingIfaceInfo_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_SetupIRType_callingIfaceInfo_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = encode_restricted_string(H, [<<19>>]),
   'enc_SetupIRType_callingIfaceInfo_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  SetupIRType_calledIfaceInfo
%%================================
'enc_SetupIRType_calledIfaceInfo'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_SetupIRType_calledIfaceInfo_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_SetupIRType_calledIfaceInfo_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_SetupIRType_calledIfaceInfo_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = encode_restricted_string(H, [<<19>>]),
   'enc_SetupIRType_calledIfaceInfo_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  SetupIRType_refer
%%================================
'enc_SetupIRType_refer'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      refer ->
         'enc_SetupIRType_refer_refer'(element(2,Val), [<<160>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  SetupIRType_refer_refer
%%================================
'enc_SetupIRType_refer_refer'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_SetupIRType_refer_refer_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_SetupIRType_refer_refer_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_SetupIRType_refer_refer_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_CHUNT'(H, [<<48>>]),
   'enc_SetupIRType_refer_refer_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_SetupIRType'(Tlv) ->
   'dec_SetupIRType'(Tlv, [16]).

'dec_SetupIRType'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute domain(1) with type PrintableString
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
binary_to_list(decode_restricted_string(V1, [131072]))
end
,

%%-------------------------------------------------
%% attribute calledPartyNumber(2)   External ACPdatatypes:CalledPartyNumber OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'ACPdatatypes':'dec_CalledPartyNumber'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute calledPartysCategory(3) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {case decode_integer(V3, []) of
0 -> unknownAtThisTime;
1 -> operatorFrench;
2 -> operatorEngish;
3 -> operatorGerman;
4 -> operatorRussian;
5 -> operatorSpanish;
9 -> reserved;
10 -> ordinarySubscriber;
11 -> subscriberWithPriority;
12 -> dataCall;
13 -> testCall;
14 -> spare;
15 -> payphone;
224 -> category0;
225 -> hotelsSubscriber;
226 -> freeSubscriber;
227 -> paidSubscriber;
228 -> localSubscriber;
229 -> localTaksofon;
240 -> autoCallI;
241 -> semiautoCallI;
242 -> autoCallII;
243 -> semiautoCallII;
244 -> autoCallIII;
245 -> semiautoCallIII;
246 -> autoCallIV;
247 -> semiautoCallIV;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute callingPartyNumber(4)   External ACPdatatypes:CallingPartyNumber OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'ACPdatatypes':'dec_CallingPartyNumber'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute callingPartysCategory(5) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {case decode_integer(V5, []) of
0 -> unknownAtThisTime;
1 -> operatorFrench;
2 -> operatorEngish;
3 -> operatorGerman;
4 -> operatorRussian;
5 -> operatorSpanish;
9 -> reserved;
10 -> ordinarySubscriber;
11 -> subscriberWithPriority;
12 -> dataCall;
13 -> testCall;
14 -> spare;
15 -> payphone;
224 -> category0;
225 -> hotelsSubscriber;
226 -> freeSubscriber;
227 -> paidSubscriber;
228 -> localSubscriber;
229 -> localTaksofon;
240 -> autoCallI;
241 -> semiautoCallI;
242 -> autoCallII;
243 -> semiautoCallII;
244 -> autoCallIII;
245 -> semiautoCallIII;
246 -> autoCallIV;
247 -> semiautoCallIV;
Default2 -> exit({error,{asn1,{illegal_enumerated,Default2}}})
end, TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute locationNumber(6) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {decode_octet_string(V6, []), TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute originalCalledNumber(7)   External ACPdatatypes:OriginalCalledNumber OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {'ACPdatatypes':'dec_OriginalCalledNumber'(V7, []), TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

%%-------------------------------------------------
%% attribute userTeleserviceInformation(8) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term8,Tlv9} = case Tlv8 of
[{131079,V8}|TempTlv9] ->
    {decode_octet_string(V8, []), TempTlv9};
    _ ->
        { asn1_NOVALUE, Tlv8}
end,

%%-------------------------------------------------
%% attribute genericNumber(9)   External INCS3datatypes:GenericNumbers OPTIONAL
%%-------------------------------------------------
{Term9,Tlv10} = case Tlv9 of
[{131080,V9}|TempTlv10] ->
    {'INCS3datatypes':'dec_GenericNumbers'(V9, []), TempTlv10};
    _ ->
        { asn1_NOVALUE, Tlv9}
end,

%%-------------------------------------------------
%% attribute forwardCallIndicators(10) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term10,Tlv11} = case Tlv10 of
[{131081,V10}|TempTlv11] ->
    {'dec_SetupIRType_forwardCallIndicators'(V10, []), TempTlv11};
    _ ->
        { asn1_NOVALUE, Tlv10}
end,

%%-------------------------------------------------
%% attribute redirectingNumber(11)   External ACPdatatypes:RedirectingNumber OPTIONAL
%%-------------------------------------------------
{Term11,Tlv12} = case Tlv11 of
[{131082,V11}|TempTlv12] ->
    {'ACPdatatypes':'dec_RedirectingNumber'(V11, []), TempTlv12};
    _ ->
        { asn1_NOVALUE, Tlv11}
end,

%%-------------------------------------------------
%% attribute redirectingInformation(12) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term12,Tlv13} = case Tlv12 of
[{131083,V12}|TempTlv13] ->
    {begin
Val1 = decode_octet_string(V12, []),
C1 = byte_size(Val1),
if C1 =:= 2 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv13};
    _ ->
        { asn1_NOVALUE, Tlv12}
end,

%%-------------------------------------------------
%% attribute uSIServiceIndicator(13)   External INCS3datatypes:USIServiceIndicator OPTIONAL
%%-------------------------------------------------
{Term13,Tlv14} = case Tlv13 of
[{131084,V13}|TempTlv14] ->
    {'INCS3datatypes':'dec_USIServiceIndicator'(V13, []), TempTlv14};
    _ ->
        { asn1_NOVALUE, Tlv13}
end,

%%-------------------------------------------------
%% attribute uSIInformation(14) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term14,Tlv15} = case Tlv14 of
[{131085,V14}|TempTlv15] ->
    {begin
Val2 = decode_octet_string(V14, []),
C2 = byte_size(Val2),
if 1 =< C2, C2 =< 5 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv15};
    _ ->
        { asn1_NOVALUE, Tlv14}
end,

%%-------------------------------------------------
%% attribute isupCallRef(15) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term15,Tlv16} = case Tlv15 of
[{131086,V15}|TempTlv16] ->
    {decode_octet_string(V15, []), TempTlv16};
    _ ->
        { asn1_NOVALUE, Tlv15}
end,

%%-------------------------------------------------
%% attribute sdp(16)   External INCS3Internals:SDPType OPTIONAL
%%-------------------------------------------------
{Term16,Tlv17} = case Tlv16 of
[{131087,V16}|TempTlv17] ->
    {'dec_SDPType'(V16, []), TempTlv17};
    _ ->
        { asn1_NOVALUE, Tlv16}
end,

%%-------------------------------------------------
%% attribute mediaPoint(17) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term17,Tlv18} = case Tlv17 of
[{131088,V17}|TempTlv18] ->
    {decode_octet_string(V17, []), TempTlv18};
    _ ->
        { asn1_NOVALUE, Tlv17}
end,

%%-------------------------------------------------
%% attribute additionalInfo(18) with type SEQUENCE OF
%%-------------------------------------------------
[V18|Tlv19] = Tlv18, 
Term18 = 'dec_SetupIRType_additionalInfo'(V18, [131089]),

%%-------------------------------------------------
%% attribute trunkGroupId(19)   External ACPdatatypes:TrunkGroupId OPTIONAL
%%-------------------------------------------------
{Term19,Tlv20} = case Tlv19 of
[{131090,V19}|TempTlv20] ->
    {'ACPdatatypes':'dec_TrunkGroupId'(V19, []), TempTlv20};
    _ ->
        { asn1_NOVALUE, Tlv19}
end,

%%-------------------------------------------------
%% attribute callingPartyInfo(20) with type SEQUENCE OF
%%-------------------------------------------------
[V20|Tlv21] = Tlv20, 
Term20 = 'dec_SetupIRType_callingPartyInfo'(V20, [131091]),

%%-------------------------------------------------
%% attribute calledPartyInfo(21) with type SEQUENCE OF
%%-------------------------------------------------
[V21|Tlv22] = Tlv21, 
Term21 = 'dec_SetupIRType_calledPartyInfo'(V21, [131092]),

%%-------------------------------------------------
%% attribute callingIfaceInfo(22) with type SEQUENCE OF
%%-------------------------------------------------
[V22|Tlv23] = Tlv22, 
Term22 = 'dec_SetupIRType_callingIfaceInfo'(V22, [131093]),

%%-------------------------------------------------
%% attribute calledIfaceInfo(23) with type SEQUENCE OF
%%-------------------------------------------------
[V23|Tlv24] = Tlv23, 
Term23 = 'dec_SetupIRType_calledIfaceInfo'(V23, [131094]),

%%-------------------------------------------------
%% attribute refer(24) with type CHOICE OPTIONAL
%%-------------------------------------------------
{Term24,Tlv25} = case Tlv24 of
[{131095,V24}|TempTlv25] ->
    {'dec_SetupIRType_refer'(V24, []), TempTlv25};
    _ ->
        { asn1_NOVALUE, Tlv24}
end,

%%-------------------------------------------------
%% attribute mode(25) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term25,Tlv26} = case Tlv25 of
[{131096,V25}|TempTlv26] ->
    {case decode_integer(V25, []) of
0 -> normal;
1 -> dummy;
2 -> internal;
3 -> callback;
4 -> parking;
5 -> supervice;
6 -> acd;
Default3 -> exit({error,{asn1,{illegal_enumerated,Default3}}})
end, TempTlv26};
    _ ->
        { asn1_NOVALUE, Tlv25}
end,

%%-------------------------------------------------
%% attribute eventTime(26)   External INCS3Internals:EventTime OPTIONAL
%%-------------------------------------------------
{Term26,Tlv27} = case Tlv26 of
[{131097,V26}|TempTlv27] ->
    {'dec_EventTime'(V26, []), TempTlv27};
    _ ->
        { asn1_NOVALUE, Tlv26}
end,

case Tlv27 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv27}}}) % extra fields not allowed
end,
   {'SetupIRType', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9, Term10, Term11, Term12, Term13, Term14, Term15, Term16, Term17, Term18, Term19, Term20, Term21, Term22, Term23, Term24, Term25, Term26}.

'dec_SetupIRType_forwardCallIndicators'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[decode_integer(V1, [2]) || V1 <- Tlv1].


'dec_SetupIRType_additionalInfo'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['INCS3datatypes':'dec_AdditionalInformation'(V1, []) || V1 <- Tlv1].


'dec_SetupIRType_callingPartyInfo'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[begin
binary_to_list(decode_restricted_string(V1, [19]))
end
 || V1 <- Tlv1].


'dec_SetupIRType_calledPartyInfo'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[begin
binary_to_list(decode_restricted_string(V1, [19]))
end
 || V1 <- Tlv1].


'dec_SetupIRType_callingIfaceInfo'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[begin
binary_to_list(decode_restricted_string(V1, [19]))
end
 || V1 <- Tlv1].


'dec_SetupIRType_calledIfaceInfo'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[begin
binary_to_list(decode_restricted_string(V1, [19]))
end
 || V1 <- Tlv1].


'dec_SetupIRType_refer'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'refer'
    {131072, V1} -> 
        {refer, 'dec_SetupIRType_refer_refer'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.
'dec_SetupIRType_refer_refer'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_CHUNT'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  CHUNT
%%================================
'enc_CHUNT'(Val) ->
    'enc_CHUNT'(Val, [<<48>>]).

'enc_CHUNT'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute chunt-refer(1) with type CHOICE
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_CHUNT_chunt-refer'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  CHUNT_chunt-refer
%%================================
'enc_CHUNT_chunt-refer'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      'chunt-refer' ->
         'enc_CHUNT_chunt-refer_chunt-refer'(element(2,Val), [<<160>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  CHUNT_chunt-refer_chunt-refer
%%================================
'enc_CHUNT_chunt-refer_chunt-refer'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_CHUNT_chunt-refer_chunt-refer_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_CHUNT_chunt-refer_chunt-refer_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_CHUNT_chunt-refer_chunt-refer_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = encode_restricted_string(H, [<<4>>]),
   'enc_CHUNT_chunt-refer_chunt-refer_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_CHUNT'(Tlv) ->
   'dec_CHUNT'(Tlv, [16]).

'dec_CHUNT'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute chunt-refer(1) with type CHOICE
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_CHUNT_chunt-refer'(V1, [131072]),

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'CHUNT', Term1}.

'dec_CHUNT_chunt-refer'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'chunt-refer'
    {131072, V1} -> 
        {'chunt-refer', 'dec_CHUNT_chunt-refer_chunt-refer'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.
'dec_CHUNT_chunt-refer_chunt-refer'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[decode_octet_string(V1, [4]) || V1 <- Tlv1].




%%================================
%%  SubsequentAddressType
%%================================
'enc_SubsequentAddressType'(Val) ->
    'enc_SubsequentAddressType'(Val, [<<48>>]).

'enc_SubsequentAddressType'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute callRef(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute digits(2) with type PrintableString
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_restricted_string(Cindex2, [<<129>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_SubsequentAddressType'(Tlv) ->
   'dec_SubsequentAddressType'(Tlv, [16]).

'dec_SubsequentAddressType'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute callRef(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1, [131072]),

%%-------------------------------------------------
%% attribute digits(2) with type PrintableString
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
binary_to_list(decode_restricted_string(V2, [131073]))
end
,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'SubsequentAddressType', Term1, Term2}.



%%================================
%%  UserDataType
%%================================
'enc_UserDataType'(Val) ->
    'enc_UserDataType'(Val, [<<48>>]).

'enc_UserDataType'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute callRef(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute uSIServiceIndicator(2)   External INCS3datatypes:USIServiceIndicator
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'INCS3datatypes':'enc_USIServiceIndicator'(Cindex2, [<<161>>]),

%%-------------------------------------------------
%% attribute uSIInformation(3) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_restricted_string(Cindex3, [<<130>>]),

%%-------------------------------------------------
%% attribute infoDirection(4) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes4,EncLen4} = case Cindex4 of
utsi -> encode_tags([<<131>>], [0], 1);
stui -> encode_tags([<<131>>], [1], 1);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_UserDataType'(Tlv) ->
   'dec_UserDataType'(Tlv, [16]).

'dec_UserDataType'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute callRef(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1, [131072]),

%%-------------------------------------------------
%% attribute uSIServiceIndicator(2)   External INCS3datatypes:USIServiceIndicator
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'INCS3datatypes':'dec_USIServiceIndicator'(V2, [131073]),

%%-------------------------------------------------
%% attribute uSIInformation(3) with type OCTET STRING
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = begin
Val1 = decode_octet_string(V3, [131074]),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 5 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute infoDirection(4) with type ENUMERATED
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = case decode_integer(V4, [131075]) of
0 -> utsi;
1 -> stui;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

case Tlv5 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed
end,
   {'UserDataType', Term1, Term2, Term3, Term4}.



%%================================
%%  MGTSetTriggerTableArg
%%================================
'enc_MGTSetTriggerTableArg'(Val) ->
    'enc_MGTSetTriggerTableArg'(Val, [<<48>>]).

'enc_MGTSetTriggerTableArg'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_MGTSetTriggerTableArg_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_MGTSetTriggerTableArg_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_MGTSetTriggerTableArg_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_MGTSetTriggerTableArg_SEQOF'(H, [<<48>>]),
   'enc_MGTSetTriggerTableArg_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  MGTSetTriggerTableArg_SEQOF
%%================================
'enc_MGTSetTriggerTableArg_SEQOF'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute legID(1) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute serviceKey(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute eventTypeBCSM(3) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes3,EncLen3} = case Cindex3 of
origAttemptAuthorized -> encode_tags([<<130>>], [1], 1);
collectedInfo -> encode_tags([<<130>>], [2], 1);
analysedInformation -> encode_tags([<<130>>], [3], 1);
routeSelectFailure -> encode_tags([<<130>>], [4], 1);
oCalledPartyBusy -> encode_tags([<<130>>], [5], 1);
oNoAnswer -> encode_tags([<<130>>], [6], 1);
oAnswer -> encode_tags([<<130>>], [7], 1);
oMidCall -> encode_tags([<<130>>], [8], 1);
oDisconnect -> encode_tags([<<130>>], [9], 1);
oAbandon -> encode_tags([<<130>>], [10], 1);
termAttemptAuthorized -> encode_tags([<<130>>], [12], 1);
tBusy -> encode_tags([<<130>>], [13], 1);
tNoAnswer -> encode_tags([<<130>>], [14], 1);
tAnswer -> encode_tags([<<130>>], [15], 1);
tMidCall -> encode_tags([<<130>>], [16], 1);
tDisconnect -> encode_tags([<<130>>], [17], 1);
tAbandon -> encode_tags([<<130>>], [18], 1);
oTermSeized -> encode_tags([<<130>>], [19], 1);
oSuspend -> encode_tags([<<130>>], [20], 1);
tSuspend -> encode_tags([<<130>>], [21], 1);
origAttempt -> encode_tags([<<130>>], [22], 1);
termAttempt -> encode_tags([<<130>>], [23], 1);
oReAnswer -> encode_tags([<<130>>], [24], 1);
tReAnswer -> encode_tags([<<130>>], [25], 1);
facilitySelectedAndAvailable -> encode_tags([<<130>>], [26], 1);
callAccepted -> encode_tags([<<130>>], [27], 1);
authorizeRouteFailure -> encode_tags([<<130>>], [28], 1);
originationDenied -> encode_tags([<<130>>], [29], 1);
terminationDenied -> encode_tags([<<130>>], [30], 1);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end,

%%-------------------------------------------------
%% attribute monitorMode(4) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes4,EncLen4} = case Cindex4 of
interrupted -> encode_tags([<<131>>], [0], 1);
notifyAndContinue -> encode_tags([<<131>>], [1], 1);
transparent -> encode_tags([<<131>>], [2], 1);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_MGTSetTriggerTableArg'(Tlv) ->
   'dec_MGTSetTriggerTableArg'(Tlv, [16]).

'dec_MGTSetTriggerTableArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_MGTSetTriggerTableArg_SEQOF'(V1, [16]) || V1 <- Tlv1].


'dec_MGTSetTriggerTableArg_SEQOF'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute legID(1) with type OCTET STRING
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_octet_string(V1, [131072]),
C1 = byte_size(Val1),
if C1 =:= 1 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute serviceKey(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [131073]),
if 0 =< Val2, Val2 =< 2147483647 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute eventTypeBCSM(3) with type ENUMERATED
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = case decode_integer(V3, [131074]) of
1 -> origAttemptAuthorized;
2 -> collectedInfo;
3 -> analysedInformation;
4 -> routeSelectFailure;
5 -> oCalledPartyBusy;
6 -> oNoAnswer;
7 -> oAnswer;
8 -> oMidCall;
9 -> oDisconnect;
10 -> oAbandon;
12 -> termAttemptAuthorized;
13 -> tBusy;
14 -> tNoAnswer;
15 -> tAnswer;
16 -> tMidCall;
17 -> tDisconnect;
18 -> tAbandon;
19 -> oTermSeized;
20 -> oSuspend;
21 -> tSuspend;
22 -> origAttempt;
23 -> termAttempt;
24 -> oReAnswer;
25 -> tReAnswer;
26 -> facilitySelectedAndAvailable;
27 -> callAccepted;
28 -> authorizeRouteFailure;
29 -> originationDenied;
30 -> terminationDenied;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute monitorMode(4) with type ENUMERATED
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = case decode_integer(V4, [131075]) of
0 -> interrupted;
1 -> notifyAndContinue;
2 -> transparent;
Default2 -> exit({error,{asn1,{illegal_enumerated,Default2}}})
end,

case Tlv5 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed
end,
   {'MGTSetTriggerTableArg_SEQOF', Term1, Term2, Term3, Term4}.



%%================================
%%  BCSMStateType
%%================================
'enc_BCSMStateType'(Val) ->
    'enc_BCSMStateType'(Val, [<<10>>]).

'enc_BCSMStateType'(Val, TagIn) ->
case Val of
nullState -> encode_tags(TagIn, [0], 1);
waitOrigAttemptAuthorized -> encode_tags(TagIn, [1], 1);
analyseInformation -> encode_tags(TagIn, [2], 1);
waitMidCall -> encode_tags(TagIn, [3], 1);
selectRoute -> encode_tags(TagIn, [4], 1);
origAttempt -> encode_tags(TagIn, [5], 1);
collectInfo -> encode_tags(TagIn, [6], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_BCSMStateType'(Tlv) ->
   'dec_BCSMStateType'(Tlv, [10]).

'dec_BCSMStateType'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> nullState;
1 -> waitOrigAttemptAuthorized;
2 -> analyseInformation;
3 -> waitMidCall;
4 -> selectRoute;
5 -> origAttempt;
6 -> collectInfo;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  DPFacilityArg
%%================================
'enc_DPFacilityArg'(Val) ->
    'enc_DPFacilityArg'(Val, [<<48>>]).

'enc_DPFacilityArg'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute legID(1) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<4>>]),

%%-------------------------------------------------
%% attribute party(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
localParty -> encode_tags([<<10>>], [0], 1);
remoteParty -> encode_tags([<<10>>], [1], 1);
surrogateParty -> encode_tags([<<10>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_DPFacilityArg'(Tlv) ->
   'dec_DPFacilityArg'(Tlv, [16]).

'dec_DPFacilityArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute legID(1) with type OCTET STRING
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_octet_string(V1, [4]),
C1 = byte_size(Val1),
if C1 =:= 1 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute party(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [10]) of
0 -> localParty;
1 -> remoteParty;
2 -> surrogateParty;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'DPFacilityArg', Term1, Term2}.



%%================================
%%  PartyType
%%================================
'enc_PartyType'(Val) ->
    'enc_PartyType'(Val, [<<10>>]).

'enc_PartyType'(Val, TagIn) ->
case Val of
localParty -> encode_tags(TagIn, [0], 1);
remoteParty -> encode_tags(TagIn, [1], 1);
surrogateParty -> encode_tags(TagIn, [2], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_PartyType'(Tlv) ->
   'dec_PartyType'(Tlv, [10]).

'dec_PartyType'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> localParty;
1 -> remoteParty;
2 -> surrogateParty;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  DPArg
%%================================
'enc_DPArg'(Val) ->
    'enc_DPArg'(Val, [<<48>>]).

'enc_DPArg'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8, Cindex9, Cindex10, Cindex11, Cindex12, Cindex13, Cindex14, Cindex15, Cindex16, Cindex17} = Val,

%%-------------------------------------------------
%% attribute legID(1) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute bcsmEvent(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
origAttemptAuthorized -> encode_tags([<<129>>], [1], 1);
collectedInfo -> encode_tags([<<129>>], [2], 1);
analysedInformation -> encode_tags([<<129>>], [3], 1);
routeSelectFailure -> encode_tags([<<129>>], [4], 1);
oCalledPartyBusy -> encode_tags([<<129>>], [5], 1);
oNoAnswer -> encode_tags([<<129>>], [6], 1);
oAnswer -> encode_tags([<<129>>], [7], 1);
oMidCall -> encode_tags([<<129>>], [8], 1);
oDisconnect -> encode_tags([<<129>>], [9], 1);
oAbandon -> encode_tags([<<129>>], [10], 1);
termAttemptAuthorized -> encode_tags([<<129>>], [12], 1);
tBusy -> encode_tags([<<129>>], [13], 1);
tNoAnswer -> encode_tags([<<129>>], [14], 1);
tAnswer -> encode_tags([<<129>>], [15], 1);
tMidCall -> encode_tags([<<129>>], [16], 1);
tDisconnect -> encode_tags([<<129>>], [17], 1);
tAbandon -> encode_tags([<<129>>], [18], 1);
oTermSeized -> encode_tags([<<129>>], [19], 1);
oSuspend -> encode_tags([<<129>>], [20], 1);
tSuspend -> encode_tags([<<129>>], [21], 1);
origAttempt -> encode_tags([<<129>>], [22], 1);
termAttempt -> encode_tags([<<129>>], [23], 1);
oReAnswer -> encode_tags([<<129>>], [24], 1);
tReAnswer -> encode_tags([<<129>>], [25], 1);
facilitySelectedAndAvailable -> encode_tags([<<129>>], [26], 1);
callAccepted -> encode_tags([<<129>>], [27], 1);
authorizeRouteFailure -> encode_tags([<<129>>], [28], 1);
originationDenied -> encode_tags([<<129>>], [29], 1);
terminationDenied -> encode_tags([<<129>>], [30], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute party(3) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex3 of
localParty -> encode_tags([<<130>>], [0], 1);
remoteParty -> encode_tags([<<130>>], [1], 1);
surrogateParty -> encode_tags([<<130>>], [2], 1);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end
       end,

%%-------------------------------------------------
%% attribute cgPN(4)   External ACPdatatypes:CallingPartyNumber OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'ACPdatatypes':'enc_CallingPartyNumber'(Cindex4, [<<163>>])
       end,

%%-------------------------------------------------
%% attribute cdPN(5)   External ACPdatatypes:CalledPartyNumber OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'ACPdatatypes':'enc_CalledPartyNumber'(Cindex5, [<<164>>])
       end,

%%-------------------------------------------------
%% attribute callingPartysCategory(6) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex6 of
unknownAtThisTime -> encode_tags([<<133>>], [0], 1);
operatorFrench -> encode_tags([<<133>>], [1], 1);
operatorEngish -> encode_tags([<<133>>], [2], 1);
operatorGerman -> encode_tags([<<133>>], [3], 1);
operatorRussian -> encode_tags([<<133>>], [4], 1);
operatorSpanish -> encode_tags([<<133>>], [5], 1);
reserved -> encode_tags([<<133>>], [9], 1);
ordinarySubscriber -> encode_tags([<<133>>], [10], 1);
subscriberWithPriority -> encode_tags([<<133>>], [11], 1);
dataCall -> encode_tags([<<133>>], [12], 1);
testCall -> encode_tags([<<133>>], [13], 1);
spare -> encode_tags([<<133>>], [14], 1);
payphone -> encode_tags([<<133>>], [15], 1);
category0 -> encode_tags([<<133>>], [0,224], 2);
hotelsSubscriber -> encode_tags([<<133>>], [0,225], 2);
freeSubscriber -> encode_tags([<<133>>], [0,226], 2);
paidSubscriber -> encode_tags([<<133>>], [0,227], 2);
localSubscriber -> encode_tags([<<133>>], [0,228], 2);
localTaksofon -> encode_tags([<<133>>], [0,229], 2);
autoCallI -> encode_tags([<<133>>], [0,240], 2);
semiautoCallI -> encode_tags([<<133>>], [0,241], 2);
autoCallII -> encode_tags([<<133>>], [0,242], 2);
semiautoCallII -> encode_tags([<<133>>], [0,243], 2);
autoCallIII -> encode_tags([<<133>>], [0,244], 2);
semiautoCallIII -> encode_tags([<<133>>], [0,245], 2);
autoCallIV -> encode_tags([<<133>>], [0,246], 2);
semiautoCallIV -> encode_tags([<<133>>], [0,247], 2);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end
       end,

%%-------------------------------------------------
%% attribute locationNumber(7) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex7, [<<134>>])
       end,

%%-------------------------------------------------
%% attribute originalCalledNumber(8)   External ACPdatatypes:OriginalCalledNumber OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case Cindex8 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'ACPdatatypes':'enc_OriginalCalledNumber'(Cindex8, [<<167>>])
       end,

%%-------------------------------------------------
%% attribute userTeleserviceInformation(9) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes9,EncLen9} =  case Cindex9 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex9, [<<136>>])
       end,

%%-------------------------------------------------
%% attribute genericNumber(10)   External INCS3datatypes:GenericNumbers OPTIONAL
%%-------------------------------------------------
   {EncBytes10,EncLen10} =  case Cindex10 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_GenericNumbers'(Cindex10, [<<169>>])
       end,

%%-------------------------------------------------
%% attribute forwardCallIndicators(11) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes11,EncLen11} =  case Cindex11 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex11, [<<138>>])
       end,

%%-------------------------------------------------
%% attribute redirectingNumber(12) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes12,EncLen12} =  case Cindex12 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex12, [<<139>>])
       end,

%%-------------------------------------------------
%% attribute redirectingInformation(13) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes13,EncLen13} =  case Cindex13 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex13, [<<140>>])
       end,

%%-------------------------------------------------
%% attribute uSIServiceIndicator(14)   External INCS3datatypes:USIServiceIndicator OPTIONAL
%%-------------------------------------------------
   {EncBytes14,EncLen14} =  case Cindex14 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_USIServiceIndicator'(Cindex14, [<<173>>])
       end,

%%-------------------------------------------------
%% attribute uSIInformation(15) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes15,EncLen15} =  case Cindex15 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex15, [<<142>>])
       end,

%%-------------------------------------------------
%% attribute digits(16) with type PrintableString OPTIONAL
%%-------------------------------------------------
   {EncBytes16,EncLen16} =  case Cindex16 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex16, [<<143>>])
       end,

%%-------------------------------------------------
%% attribute cause(17) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes17,EncLen17} =  case Cindex17 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex17 of
normal -> encode_tags([<<144>>], [0], 1);
originationDenied -> encode_tags([<<144>>], [1], 1);
collectDigits -> encode_tags([<<144>>], [2], 1);
authorisationFailure -> encode_tags([<<144>>], [3], 1);
bPtyAlerted -> encode_tags([<<144>>], [4], 1);
noIndication -> encode_tags([<<144>>], [5], 1);
aPtyAbandon -> encode_tags([<<144>>], [6], 1);
invalidCollectedInformation -> encode_tags([<<144>>], [7], 1);
collectInformationFailure -> encode_tags([<<144>>], [8], 1);
aPtyDisc -> encode_tags([<<144>>], [9], 1);
bPtyDisc -> encode_tags([<<144>>], [10], 1);
routeSelectFailure -> encode_tags([<<144>>], [11], 1);
oNoAnswer -> encode_tags([<<144>>], [12], 1);
terminationDenied -> encode_tags([<<144>>], [13], 1);
notReachable -> encode_tags([<<144>>], [14], 1);
bPtyNoAnswer -> encode_tags([<<144>>], [15], 1);
bPtyBusyUDUB -> encode_tags([<<144>>], [16], 1);
bPtyBusyNDUB -> encode_tags([<<144>>], [17], 1);
ss7Failure -> encode_tags([<<144>>], [18], 1);
calledPartyRejected -> encode_tags([<<144>>], [19], 1);
tException -> encode_tags([<<144>>], [20], 1);
routeFailure1 -> encode_tags([<<144>>], [21], 1);
routeFailure2 -> encode_tags([<<144>>], [22], 1);
ssActivating -> encode_tags([<<144>>], [23], 1);
conversationTimeout -> encode_tags([<<144>>], [24], 1);
noCircuitAvailable -> encode_tags([<<144>>], [25], 1);
coreNotification -> encode_tags([<<144>>], [26], 1);
unsupportedMedia -> encode_tags([<<144>>], [27], 1);
numberIncomplete -> encode_tags([<<144>>], [28], 1);
invalidNumber -> encode_tags([<<144>>], [29], 1);
unassignedNumber -> encode_tags([<<144>>], [30], 1);
doNotDisturb -> encode_tags([<<144>>], [31], 1);
externalControlled -> encode_tags([<<144>>], [32], 1);
systemFailure -> encode_tags([<<144>>], [33], 1);
applicationNotification -> encode_tags([<<144>>], [34], 1);
referOk -> encode_tags([<<144>>], [35], 1);
referFailure -> encode_tags([<<144>>], [36], 1);
hole -> encode_tags([<<144>>], [37], 1);
hold -> encode_tags([<<144>>], [38], 1);
Enumval12 -> exit({error,{asn1, {enumerated_not_in_range,Enumval12}}})
end
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10, EncBytes11, EncBytes12, EncBytes13, EncBytes14, EncBytes15, EncBytes16, EncBytes17],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10 + EncLen11 + EncLen12 + EncLen13 + EncLen14 + EncLen15 + EncLen16 + EncLen17,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_DPArg'(Tlv) ->
   'dec_DPArg'(Tlv, [16]).

'dec_DPArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute legID(1) with type OCTET STRING
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_octet_string(V1, [131072]),
C1 = byte_size(Val1),
if C1 =:= 1 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute bcsmEvent(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
1 -> origAttemptAuthorized;
2 -> collectedInfo;
3 -> analysedInformation;
4 -> routeSelectFailure;
5 -> oCalledPartyBusy;
6 -> oNoAnswer;
7 -> oAnswer;
8 -> oMidCall;
9 -> oDisconnect;
10 -> oAbandon;
12 -> termAttemptAuthorized;
13 -> tBusy;
14 -> tNoAnswer;
15 -> tAnswer;
16 -> tMidCall;
17 -> tDisconnect;
18 -> tAbandon;
19 -> oTermSeized;
20 -> oSuspend;
21 -> tSuspend;
22 -> origAttempt;
23 -> termAttempt;
24 -> oReAnswer;
25 -> tReAnswer;
26 -> facilitySelectedAndAvailable;
27 -> callAccepted;
28 -> authorizeRouteFailure;
29 -> originationDenied;
30 -> terminationDenied;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute party(3) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {case decode_integer(V3, []) of
0 -> localParty;
1 -> remoteParty;
2 -> surrogateParty;
Default2 -> exit({error,{asn1,{illegal_enumerated,Default2}}})
end, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute cgPN(4)   External ACPdatatypes:CallingPartyNumber OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'ACPdatatypes':'dec_CallingPartyNumber'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute cdPN(5)   External ACPdatatypes:CalledPartyNumber OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {'ACPdatatypes':'dec_CalledPartyNumber'(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute callingPartysCategory(6) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {case decode_integer(V6, []) of
0 -> unknownAtThisTime;
1 -> operatorFrench;
2 -> operatorEngish;
3 -> operatorGerman;
4 -> operatorRussian;
5 -> operatorSpanish;
9 -> reserved;
10 -> ordinarySubscriber;
11 -> subscriberWithPriority;
12 -> dataCall;
13 -> testCall;
14 -> spare;
15 -> payphone;
224 -> category0;
225 -> hotelsSubscriber;
226 -> freeSubscriber;
227 -> paidSubscriber;
228 -> localSubscriber;
229 -> localTaksofon;
240 -> autoCallI;
241 -> semiautoCallI;
242 -> autoCallII;
243 -> semiautoCallII;
244 -> autoCallIII;
245 -> semiautoCallIII;
246 -> autoCallIV;
247 -> semiautoCallIV;
Default3 -> exit({error,{asn1,{illegal_enumerated,Default3}}})
end, TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute locationNumber(7) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {decode_octet_string(V7, []), TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

%%-------------------------------------------------
%% attribute originalCalledNumber(8)   External ACPdatatypes:OriginalCalledNumber OPTIONAL
%%-------------------------------------------------
{Term8,Tlv9} = case Tlv8 of
[{131079,V8}|TempTlv9] ->
    {'ACPdatatypes':'dec_OriginalCalledNumber'(V8, []), TempTlv9};
    _ ->
        { asn1_NOVALUE, Tlv8}
end,

%%-------------------------------------------------
%% attribute userTeleserviceInformation(9) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term9,Tlv10} = case Tlv9 of
[{131080,V9}|TempTlv10] ->
    {decode_octet_string(V9, []), TempTlv10};
    _ ->
        { asn1_NOVALUE, Tlv9}
end,

%%-------------------------------------------------
%% attribute genericNumber(10)   External INCS3datatypes:GenericNumbers OPTIONAL
%%-------------------------------------------------
{Term10,Tlv11} = case Tlv10 of
[{131081,V10}|TempTlv11] ->
    {'INCS3datatypes':'dec_GenericNumbers'(V10, []), TempTlv11};
    _ ->
        { asn1_NOVALUE, Tlv10}
end,

%%-------------------------------------------------
%% attribute forwardCallIndicators(11) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term11,Tlv12} = case Tlv11 of
[{131082,V11}|TempTlv12] ->
    {begin
Val2 = decode_octet_string(V11, []),
C2 = byte_size(Val2),
if C2 =:= 2 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv12};
    _ ->
        { asn1_NOVALUE, Tlv11}
end,

%%-------------------------------------------------
%% attribute redirectingNumber(12) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term12,Tlv13} = case Tlv12 of
[{131083,V12}|TempTlv13] ->
    {begin
Val3 = decode_octet_string(V12, []),
C3 = byte_size(Val3),
if 1 =< C3, C3 =< 27 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv13};
    _ ->
        { asn1_NOVALUE, Tlv12}
end,

%%-------------------------------------------------
%% attribute redirectingInformation(13) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term13,Tlv14} = case Tlv13 of
[{131084,V13}|TempTlv14] ->
    {begin
Val4 = decode_octet_string(V13, []),
C4 = byte_size(Val4),
if C4 =:= 2 ->
Val4;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv14};
    _ ->
        { asn1_NOVALUE, Tlv13}
end,

%%-------------------------------------------------
%% attribute uSIServiceIndicator(14)   External INCS3datatypes:USIServiceIndicator OPTIONAL
%%-------------------------------------------------
{Term14,Tlv15} = case Tlv14 of
[{131085,V14}|TempTlv15] ->
    {'INCS3datatypes':'dec_USIServiceIndicator'(V14, []), TempTlv15};
    _ ->
        { asn1_NOVALUE, Tlv14}
end,

%%-------------------------------------------------
%% attribute uSIInformation(15) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term15,Tlv16} = case Tlv15 of
[{131086,V15}|TempTlv16] ->
    {begin
Val5 = decode_octet_string(V15, []),
C5 = byte_size(Val5),
if 1 =< C5, C5 =< 5 ->
Val5;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv16};
    _ ->
        { asn1_NOVALUE, Tlv15}
end,

%%-------------------------------------------------
%% attribute digits(16) with type PrintableString OPTIONAL
%%-------------------------------------------------
{Term16,Tlv17} = case Tlv16 of
[{131087,V16}|TempTlv17] ->
    {begin
binary_to_list(decode_restricted_string(V16, []))
end
, TempTlv17};
    _ ->
        { asn1_NOVALUE, Tlv16}
end,

%%-------------------------------------------------
%% attribute cause(17) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term17,Tlv18} = case Tlv17 of
[{131088,V17}|TempTlv18] ->
    {case decode_integer(V17, []) of
0 -> normal;
1 -> originationDenied;
2 -> collectDigits;
3 -> authorisationFailure;
4 -> bPtyAlerted;
5 -> noIndication;
6 -> aPtyAbandon;
7 -> invalidCollectedInformation;
8 -> collectInformationFailure;
9 -> aPtyDisc;
10 -> bPtyDisc;
11 -> routeSelectFailure;
12 -> oNoAnswer;
13 -> terminationDenied;
14 -> notReachable;
15 -> bPtyNoAnswer;
16 -> bPtyBusyUDUB;
17 -> bPtyBusyNDUB;
18 -> ss7Failure;
19 -> calledPartyRejected;
20 -> tException;
21 -> routeFailure1;
22 -> routeFailure2;
23 -> ssActivating;
24 -> conversationTimeout;
25 -> noCircuitAvailable;
26 -> coreNotification;
27 -> unsupportedMedia;
28 -> numberIncomplete;
29 -> invalidNumber;
30 -> unassignedNumber;
31 -> doNotDisturb;
32 -> externalControlled;
33 -> systemFailure;
34 -> applicationNotification;
35 -> referOk;
36 -> referFailure;
37 -> hole;
38 -> hold;
Default4 -> exit({error,{asn1,{illegal_enumerated,Default4}}})
end, TempTlv18};
    _ ->
        { asn1_NOVALUE, Tlv17}
end,

case Tlv18 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv18}}}) % extra fields not allowed
end,
   {'DPArg', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9, Term10, Term11, Term12, Term13, Term14, Term15, Term16, Term17}.



%%================================
%%  DPUTSIArg
%%================================
'enc_DPUTSIArg'(Val) ->
    'enc_DPUTSIArg'(Val, [<<48>>]).

'enc_DPUTSIArg'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute legID(1) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute uSIServiceIndicator(2)   External INCS3datatypes:USIServiceIndicator
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'INCS3datatypes':'enc_USIServiceIndicator'(Cindex2, [<<161>>]),

%%-------------------------------------------------
%% attribute uSIInformation(3) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_restricted_string(Cindex3, [<<130>>]),

%%-------------------------------------------------
%% attribute party(4) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes4,EncLen4} = case Cindex4 of
localParty -> encode_tags([<<131>>], [0], 1);
remoteParty -> encode_tags([<<131>>], [1], 1);
surrogateParty -> encode_tags([<<131>>], [2], 1);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_DPUTSIArg'(Tlv) ->
   'dec_DPUTSIArg'(Tlv, [16]).

'dec_DPUTSIArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute legID(1) with type OCTET STRING
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_octet_string(V1, [131072]),
C1 = byte_size(Val1),
if C1 =:= 1 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute uSIServiceIndicator(2)   External INCS3datatypes:USIServiceIndicator
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'INCS3datatypes':'dec_USIServiceIndicator'(V2, [131073]),

%%-------------------------------------------------
%% attribute uSIInformation(3) with type OCTET STRING
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = begin
Val2 = decode_octet_string(V3, [131074]),
C2 = byte_size(Val2),
if 1 =< C2, C2 =< 5 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute party(4) with type ENUMERATED
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = case decode_integer(V4, [131075]) of
0 -> localParty;
1 -> remoteParty;
2 -> surrogateParty;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

case Tlv5 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed
end,
   {'DPUTSIArg', Term1, Term2, Term3, Term4}.



%%================================
%%  OBCSMPars
%%================================
'enc_OBCSMPars'(Val) ->
    'enc_OBCSMPars'(Val, [<<48>>]).

'enc_OBCSMPars'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8, Cindex9, Cindex10, Cindex11, Cindex12, Cindex13, Cindex14, Cindex15, Cindex16} = Val,

%%-------------------------------------------------
%% attribute startState(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
nullState -> encode_tags([<<128>>], [0], 1);
waitOrigAttemptAuthorized -> encode_tags([<<128>>], [1], 1);
analyseInformation -> encode_tags([<<128>>], [2], 1);
waitMidCall -> encode_tags([<<128>>], [3], 1);
selectRoute -> encode_tags([<<128>>], [4], 1);
origAttempt -> encode_tags([<<128>>], [5], 1);
collectInfo -> encode_tags([<<128>>], [6], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute legID(2) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_restricted_string(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute cgPN(3)   External ACPdatatypes:CallingPartyNumber OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'ACPdatatypes':'enc_CallingPartyNumber'(Cindex3, [<<162>>])
       end,

%%-------------------------------------------------
%% attribute routingInfo(4) with type CHOICE
%%-------------------------------------------------
   {EncBytes4,EncLen4} = 'enc_OBCSMPars_routingInfo'(Cindex4, [<<163>>]),

%%-------------------------------------------------
%% attribute routeList(5)   External INCS3datatypes:RouteList OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_RouteList'(Cindex5, [<<164>>])
       end,

%%-------------------------------------------------
%% attribute callingPartysCategory(6) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex6 of
unknownAtThisTime -> encode_tags([<<133>>], [0], 1);
operatorFrench -> encode_tags([<<133>>], [1], 1);
operatorEngish -> encode_tags([<<133>>], [2], 1);
operatorGerman -> encode_tags([<<133>>], [3], 1);
operatorRussian -> encode_tags([<<133>>], [4], 1);
operatorSpanish -> encode_tags([<<133>>], [5], 1);
reserved -> encode_tags([<<133>>], [9], 1);
ordinarySubscriber -> encode_tags([<<133>>], [10], 1);
subscriberWithPriority -> encode_tags([<<133>>], [11], 1);
dataCall -> encode_tags([<<133>>], [12], 1);
testCall -> encode_tags([<<133>>], [13], 1);
spare -> encode_tags([<<133>>], [14], 1);
payphone -> encode_tags([<<133>>], [15], 1);
category0 -> encode_tags([<<133>>], [0,224], 2);
hotelsSubscriber -> encode_tags([<<133>>], [0,225], 2);
freeSubscriber -> encode_tags([<<133>>], [0,226], 2);
paidSubscriber -> encode_tags([<<133>>], [0,227], 2);
localSubscriber -> encode_tags([<<133>>], [0,228], 2);
localTaksofon -> encode_tags([<<133>>], [0,229], 2);
autoCallI -> encode_tags([<<133>>], [0,240], 2);
semiautoCallI -> encode_tags([<<133>>], [0,241], 2);
autoCallII -> encode_tags([<<133>>], [0,242], 2);
semiautoCallII -> encode_tags([<<133>>], [0,243], 2);
autoCallIII -> encode_tags([<<133>>], [0,244], 2);
semiautoCallIII -> encode_tags([<<133>>], [0,245], 2);
autoCallIV -> encode_tags([<<133>>], [0,246], 2);
semiautoCallIV -> encode_tags([<<133>>], [0,247], 2);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end
       end,

%%-------------------------------------------------
%% attribute locationNumber(7) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex7, [<<134>>])
       end,

%%-------------------------------------------------
%% attribute originalCalledNumber(8)   External ACPdatatypes:OriginalCalledNumber OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case Cindex8 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'ACPdatatypes':'enc_OriginalCalledNumber'(Cindex8, [<<167>>])
       end,

%%-------------------------------------------------
%% attribute userTeleserviceInformation(9) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes9,EncLen9} =  case Cindex9 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex9, [<<136>>])
       end,

%%-------------------------------------------------
%% attribute genericNumber(10)   External INCS3datatypes:GenericNumbers OPTIONAL
%%-------------------------------------------------
   {EncBytes10,EncLen10} =  case Cindex10 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_GenericNumbers'(Cindex10, [<<169>>])
       end,

%%-------------------------------------------------
%% attribute forwardCallIndicators(11) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes11,EncLen11} =  case Cindex11 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex11, [<<138>>])
       end,

%%-------------------------------------------------
%% attribute redirectingNumber(12) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes12,EncLen12} =  case Cindex12 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex12, [<<139>>])
       end,

%%-------------------------------------------------
%% attribute redirectingInformation(13) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes13,EncLen13} =  case Cindex13 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex13, [<<140>>])
       end,

%%-------------------------------------------------
%% attribute uSIServiceIndicator(14)   External INCS3datatypes:USIServiceIndicator OPTIONAL
%%-------------------------------------------------
   {EncBytes14,EncLen14} =  case Cindex14 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_USIServiceIndicator'(Cindex14, [<<173>>])
       end,

%%-------------------------------------------------
%% attribute uSIInformation(15) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes15,EncLen15} =  case Cindex15 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex15, [<<142>>])
       end,

%%-------------------------------------------------
%% attribute setupTime(16)   External INCS3Internals:EventTime OPTIONAL
%%-------------------------------------------------
   {EncBytes16,EncLen16} =  case Cindex16 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_EventTime'(Cindex16, [<<175>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10, EncBytes11, EncBytes12, EncBytes13, EncBytes14, EncBytes15, EncBytes16],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10 + EncLen11 + EncLen12 + EncLen13 + EncLen14 + EncLen15 + EncLen16,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  OBCSMPars_routingInfo
%%================================
'enc_OBCSMPars_routingInfo'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      cdPN ->
         'ACPdatatypes':'enc_CalledPartyNumber'(element(2,Val), [<<160>>]);
      routingAddress ->
         'ACPdatatypes':'enc_ACPDestinationRoutingAddress'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_OBCSMPars'(Tlv) ->
   'dec_OBCSMPars'(Tlv, [16]).

'dec_OBCSMPars'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute startState(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> nullState;
1 -> waitOrigAttemptAuthorized;
2 -> analyseInformation;
3 -> waitMidCall;
4 -> selectRoute;
5 -> origAttempt;
6 -> collectInfo;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute legID(2) with type OCTET STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val1 = decode_octet_string(V2, [131073]),
C1 = byte_size(Val1),
if C1 =:= 1 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute cgPN(3)   External ACPdatatypes:CallingPartyNumber OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'ACPdatatypes':'dec_CallingPartyNumber'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute routingInfo(4) with type CHOICE
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = 'dec_OBCSMPars_routingInfo'(V4, [131075]),

%%-------------------------------------------------
%% attribute routeList(5)   External INCS3datatypes:RouteList OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {'INCS3datatypes':'dec_RouteList'(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute callingPartysCategory(6) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {case decode_integer(V6, []) of
0 -> unknownAtThisTime;
1 -> operatorFrench;
2 -> operatorEngish;
3 -> operatorGerman;
4 -> operatorRussian;
5 -> operatorSpanish;
9 -> reserved;
10 -> ordinarySubscriber;
11 -> subscriberWithPriority;
12 -> dataCall;
13 -> testCall;
14 -> spare;
15 -> payphone;
224 -> category0;
225 -> hotelsSubscriber;
226 -> freeSubscriber;
227 -> paidSubscriber;
228 -> localSubscriber;
229 -> localTaksofon;
240 -> autoCallI;
241 -> semiautoCallI;
242 -> autoCallII;
243 -> semiautoCallII;
244 -> autoCallIII;
245 -> semiautoCallIII;
246 -> autoCallIV;
247 -> semiautoCallIV;
Default2 -> exit({error,{asn1,{illegal_enumerated,Default2}}})
end, TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute locationNumber(7) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {decode_octet_string(V7, []), TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

%%-------------------------------------------------
%% attribute originalCalledNumber(8)   External ACPdatatypes:OriginalCalledNumber OPTIONAL
%%-------------------------------------------------
{Term8,Tlv9} = case Tlv8 of
[{131079,V8}|TempTlv9] ->
    {'ACPdatatypes':'dec_OriginalCalledNumber'(V8, []), TempTlv9};
    _ ->
        { asn1_NOVALUE, Tlv8}
end,

%%-------------------------------------------------
%% attribute userTeleserviceInformation(9) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term9,Tlv10} = case Tlv9 of
[{131080,V9}|TempTlv10] ->
    {decode_octet_string(V9, []), TempTlv10};
    _ ->
        { asn1_NOVALUE, Tlv9}
end,

%%-------------------------------------------------
%% attribute genericNumber(10)   External INCS3datatypes:GenericNumbers OPTIONAL
%%-------------------------------------------------
{Term10,Tlv11} = case Tlv10 of
[{131081,V10}|TempTlv11] ->
    {'INCS3datatypes':'dec_GenericNumbers'(V10, []), TempTlv11};
    _ ->
        { asn1_NOVALUE, Tlv10}
end,

%%-------------------------------------------------
%% attribute forwardCallIndicators(11) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term11,Tlv12} = case Tlv11 of
[{131082,V11}|TempTlv12] ->
    {begin
Val2 = decode_octet_string(V11, []),
C2 = byte_size(Val2),
if C2 =:= 2 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv12};
    _ ->
        { asn1_NOVALUE, Tlv11}
end,

%%-------------------------------------------------
%% attribute redirectingNumber(12) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term12,Tlv13} = case Tlv12 of
[{131083,V12}|TempTlv13] ->
    {begin
Val3 = decode_octet_string(V12, []),
C3 = byte_size(Val3),
if 1 =< C3, C3 =< 27 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv13};
    _ ->
        { asn1_NOVALUE, Tlv12}
end,

%%-------------------------------------------------
%% attribute redirectingInformation(13) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term13,Tlv14} = case Tlv13 of
[{131084,V13}|TempTlv14] ->
    {begin
Val4 = decode_octet_string(V13, []),
C4 = byte_size(Val4),
if C4 =:= 2 ->
Val4;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv14};
    _ ->
        { asn1_NOVALUE, Tlv13}
end,

%%-------------------------------------------------
%% attribute uSIServiceIndicator(14)   External INCS3datatypes:USIServiceIndicator OPTIONAL
%%-------------------------------------------------
{Term14,Tlv15} = case Tlv14 of
[{131085,V14}|TempTlv15] ->
    {'INCS3datatypes':'dec_USIServiceIndicator'(V14, []), TempTlv15};
    _ ->
        { asn1_NOVALUE, Tlv14}
end,

%%-------------------------------------------------
%% attribute uSIInformation(15) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term15,Tlv16} = case Tlv15 of
[{131086,V15}|TempTlv16] ->
    {begin
Val5 = decode_octet_string(V15, []),
C5 = byte_size(Val5),
if 1 =< C5, C5 =< 5 ->
Val5;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv16};
    _ ->
        { asn1_NOVALUE, Tlv15}
end,

%%-------------------------------------------------
%% attribute setupTime(16)   External INCS3Internals:EventTime OPTIONAL
%%-------------------------------------------------
{Term16,Tlv17} = case Tlv16 of
[{131087,V16}|TempTlv17] ->
    {'dec_EventTime'(V16, []), TempTlv17};
    _ ->
        { asn1_NOVALUE, Tlv16}
end,

case Tlv17 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv17}}}) % extra fields not allowed
end,
   {'OBCSMPars', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9, Term10, Term11, Term12, Term13, Term14, Term15, Term16}.

'dec_OBCSMPars_routingInfo'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'cdPN'
    {131072, V1} -> 
        {cdPN, 'ACPdatatypes':'dec_CalledPartyNumber'(V1, [])};


%% 'routingAddress'
    {131073, V1} -> 
        {routingAddress, 'ACPdatatypes':'dec_ACPDestinationRoutingAddress'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  PointInCall
%%================================
'enc_PointInCall'(Val) ->
    'enc_PointInCall'(Val, [<<10>>]).

'enc_PointInCall'(Val, TagIn) ->
case Val of
analyseInformation -> encode_tags(TagIn, [0], 1);
authoriseOriginationAttempt -> encode_tags(TagIn, [1], 1);
collectInformation -> encode_tags(TagIn, [2], 1);
collectNDigits -> encode_tags(TagIn, [3], 1);
oActive -> encode_tags(TagIn, [4], 1);
oAlerting -> encode_tags(TagIn, [5], 1);
oException -> encode_tags(TagIn, [6], 1);
oNull -> encode_tags(TagIn, [7], 1);
selectRoute -> encode_tags(TagIn, [8], 1);
sendCall -> encode_tags(TagIn, [9], 1);
authoriseTerminationAttempt -> encode_tags(TagIn, [10], 1);
presentCall -> encode_tags(TagIn, [11], 1);
selectFacility -> encode_tags(TagIn, [12], 1);
tActive -> encode_tags(TagIn, [13], 1);
tAlerting -> encode_tags(TagIn, [14], 1);
tNull -> encode_tags(TagIn, [15], 1);
releaseCall -> encode_tags(TagIn, [16], 1);
disconnectLeg -> encode_tags(TagIn, [17], 1);
sendSTUI -> encode_tags(TagIn, [18], 1);
sendUTSI -> encode_tags(TagIn, [19], 1);
authorizeTermination -> encode_tags(TagIn, [20], 1);
reconnect -> encode_tags(TagIn, [21], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_PointInCall'(Tlv) ->
   'dec_PointInCall'(Tlv, [10]).

'dec_PointInCall'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> analyseInformation;
1 -> authoriseOriginationAttempt;
2 -> collectInformation;
3 -> collectNDigits;
4 -> oActive;
5 -> oAlerting;
6 -> oException;
7 -> oNull;
8 -> selectRoute;
9 -> sendCall;
10 -> authoriseTerminationAttempt;
11 -> presentCall;
12 -> selectFacility;
13 -> tActive;
14 -> tAlerting;
15 -> tNull;
16 -> releaseCall;
17 -> disconnectLeg;
18 -> sendSTUI;
19 -> sendUTSI;
20 -> authorizeTermination;
21 -> reconnect;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  ChargingEventIndArg
%%================================
'enc_ChargingEventIndArg'(Val) ->
    'enc_ChargingEventIndArg'(Val, [<<48>>]).

'enc_ChargingEventIndArg'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute callRef(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute eventTypeCharging(2) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_restricted_string(Cindex2, [<<129>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_ChargingEventIndArg'(Tlv) ->
   'dec_ChargingEventIndArg'(Tlv, [16]).

'dec_ChargingEventIndArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute callRef(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1, [131072]),

%%-------------------------------------------------
%% attribute eventTypeCharging(2) with type OCTET STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val1 = decode_octet_string(V2, [131073]),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 27 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'ChargingEventIndArg', Term1, Term2}.



%%================================
%%  PICArg
%%================================
'enc_PICArg'(Val) ->
    'enc_PICArg'(Val, [<<48>>]).

'enc_PICArg'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8, Cindex9, Cindex10, Cindex11, Cindex12, Cindex13, Cindex14, Cindex15, Cindex16, Cindex17, Cindex18, Cindex19} = Val,

%%-------------------------------------------------
%% attribute legID(1) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute pic(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
analyseInformation -> encode_tags([<<129>>], [0], 1);
authoriseOriginationAttempt -> encode_tags([<<129>>], [1], 1);
collectInformation -> encode_tags([<<129>>], [2], 1);
collectNDigits -> encode_tags([<<129>>], [3], 1);
oActive -> encode_tags([<<129>>], [4], 1);
oAlerting -> encode_tags([<<129>>], [5], 1);
oException -> encode_tags([<<129>>], [6], 1);
oNull -> encode_tags([<<129>>], [7], 1);
selectRoute -> encode_tags([<<129>>], [8], 1);
sendCall -> encode_tags([<<129>>], [9], 1);
authoriseTerminationAttempt -> encode_tags([<<129>>], [10], 1);
presentCall -> encode_tags([<<129>>], [11], 1);
selectFacility -> encode_tags([<<129>>], [12], 1);
tActive -> encode_tags([<<129>>], [13], 1);
tAlerting -> encode_tags([<<129>>], [14], 1);
tNull -> encode_tags([<<129>>], [15], 1);
releaseCall -> encode_tags([<<129>>], [16], 1);
disconnectLeg -> encode_tags([<<129>>], [17], 1);
sendSTUI -> encode_tags([<<129>>], [18], 1);
sendUTSI -> encode_tags([<<129>>], [19], 1);
authorizeTermination -> encode_tags([<<129>>], [20], 1);
reconnect -> encode_tags([<<129>>], [21], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute routingInfo(3) with type CHOICE
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'enc_PICArg_routingInfo'(Cindex3, [<<162>>]),

%%-------------------------------------------------
%% attribute routeList(4)   External INCS3datatypes:RouteList OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_RouteList'(Cindex4, [<<163>>])
       end,

%%-------------------------------------------------
%% attribute callingPartyNumber(5)   External ACPdatatypes:CallingPartyNumber OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'ACPdatatypes':'enc_CallingPartyNumber'(Cindex5, [<<164>>])
       end,

%%-------------------------------------------------
%% attribute callingPartysCategory(6) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex6 of
unknownAtThisTime -> encode_tags([<<133>>], [0], 1);
operatorFrench -> encode_tags([<<133>>], [1], 1);
operatorEngish -> encode_tags([<<133>>], [2], 1);
operatorGerman -> encode_tags([<<133>>], [3], 1);
operatorRussian -> encode_tags([<<133>>], [4], 1);
operatorSpanish -> encode_tags([<<133>>], [5], 1);
reserved -> encode_tags([<<133>>], [9], 1);
ordinarySubscriber -> encode_tags([<<133>>], [10], 1);
subscriberWithPriority -> encode_tags([<<133>>], [11], 1);
dataCall -> encode_tags([<<133>>], [12], 1);
testCall -> encode_tags([<<133>>], [13], 1);
spare -> encode_tags([<<133>>], [14], 1);
payphone -> encode_tags([<<133>>], [15], 1);
category0 -> encode_tags([<<133>>], [0,224], 2);
hotelsSubscriber -> encode_tags([<<133>>], [0,225], 2);
freeSubscriber -> encode_tags([<<133>>], [0,226], 2);
paidSubscriber -> encode_tags([<<133>>], [0,227], 2);
localSubscriber -> encode_tags([<<133>>], [0,228], 2);
localTaksofon -> encode_tags([<<133>>], [0,229], 2);
autoCallI -> encode_tags([<<133>>], [0,240], 2);
semiautoCallI -> encode_tags([<<133>>], [0,241], 2);
autoCallII -> encode_tags([<<133>>], [0,242], 2);
semiautoCallII -> encode_tags([<<133>>], [0,243], 2);
autoCallIII -> encode_tags([<<133>>], [0,244], 2);
semiautoCallIII -> encode_tags([<<133>>], [0,245], 2);
autoCallIV -> encode_tags([<<133>>], [0,246], 2);
semiautoCallIV -> encode_tags([<<133>>], [0,247], 2);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end
       end,

%%-------------------------------------------------
%% attribute locationNumber(7) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex7, [<<134>>])
       end,

%%-------------------------------------------------
%% attribute originalCalledNumber(8) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case Cindex8 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex8, [<<135>>])
       end,

%%-------------------------------------------------
%% attribute userTeleserviceInformation(9) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes9,EncLen9} =  case Cindex9 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex9, [<<136>>])
       end,

%%-------------------------------------------------
%% attribute genericNumber(10)   External INCS3datatypes:GenericNumbers OPTIONAL
%%-------------------------------------------------
   {EncBytes10,EncLen10} =  case Cindex10 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_GenericNumbers'(Cindex10, [<<169>>])
       end,

%%-------------------------------------------------
%% attribute forwardCallIndicators(11) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes11,EncLen11} =  case Cindex11 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex11, [<<138>>])
       end,

%%-------------------------------------------------
%% attribute redirectingNumber(12) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes12,EncLen12} =  case Cindex12 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex12, [<<139>>])
       end,

%%-------------------------------------------------
%% attribute redirectingInformation(13) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes13,EncLen13} =  case Cindex13 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex13, [<<140>>])
       end,

%%-------------------------------------------------
%% attribute uSIServiceIndicator(14)   External INCS3datatypes:USIServiceIndicator OPTIONAL
%%-------------------------------------------------
   {EncBytes14,EncLen14} =  case Cindex14 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_USIServiceIndicator'(Cindex14, [<<173>>])
       end,

%%-------------------------------------------------
%% attribute uSIInformation(15) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes15,EncLen15} =  case Cindex15 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex15, [<<142>>])
       end,

%%-------------------------------------------------
%% attribute infoDirection(16) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes16,EncLen16} =  case Cindex16 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex16 of
utsi -> encode_tags([<<143>>], [0], 1);
stui -> encode_tags([<<143>>], [1], 1);
Enumval11 -> exit({error,{asn1, {enumerated_not_in_range,Enumval11}}})
end
       end,

%%-------------------------------------------------
%% attribute party(17) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes17,EncLen17} =  case Cindex17 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex17 of
localParty -> encode_tags([<<144>>], [0], 1);
remoteParty -> encode_tags([<<144>>], [1], 1);
surrogateParty -> encode_tags([<<144>>], [2], 1);
Enumval12 -> exit({error,{asn1, {enumerated_not_in_range,Enumval12}}})
end
       end,

%%-------------------------------------------------
%% attribute facilityGroup(18)   External INCS3datatypes:FacilityGroup OPTIONAL
%%-------------------------------------------------
   {EncBytes18,EncLen18} =  case Cindex18 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_FacilityGroup'(Cindex18, [<<177>>])
       end,

%%-------------------------------------------------
%% attribute cause(19) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes19,EncLen19} =  case Cindex19 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex19 of
normal -> encode_tags([<<146>>], [0], 1);
originationDenied -> encode_tags([<<146>>], [1], 1);
collectDigits -> encode_tags([<<146>>], [2], 1);
authorisationFailure -> encode_tags([<<146>>], [3], 1);
bPtyAlerted -> encode_tags([<<146>>], [4], 1);
noIndication -> encode_tags([<<146>>], [5], 1);
aPtyAbandon -> encode_tags([<<146>>], [6], 1);
invalidCollectedInformation -> encode_tags([<<146>>], [7], 1);
collectInformationFailure -> encode_tags([<<146>>], [8], 1);
aPtyDisc -> encode_tags([<<146>>], [9], 1);
bPtyDisc -> encode_tags([<<146>>], [10], 1);
routeSelectFailure -> encode_tags([<<146>>], [11], 1);
oNoAnswer -> encode_tags([<<146>>], [12], 1);
terminationDenied -> encode_tags([<<146>>], [13], 1);
notReachable -> encode_tags([<<146>>], [14], 1);
bPtyNoAnswer -> encode_tags([<<146>>], [15], 1);
bPtyBusyUDUB -> encode_tags([<<146>>], [16], 1);
bPtyBusyNDUB -> encode_tags([<<146>>], [17], 1);
ss7Failure -> encode_tags([<<146>>], [18], 1);
calledPartyRejected -> encode_tags([<<146>>], [19], 1);
tException -> encode_tags([<<146>>], [20], 1);
routeFailure1 -> encode_tags([<<146>>], [21], 1);
routeFailure2 -> encode_tags([<<146>>], [22], 1);
ssActivating -> encode_tags([<<146>>], [23], 1);
conversationTimeout -> encode_tags([<<146>>], [24], 1);
noCircuitAvailable -> encode_tags([<<146>>], [25], 1);
coreNotification -> encode_tags([<<146>>], [26], 1);
unsupportedMedia -> encode_tags([<<146>>], [27], 1);
numberIncomplete -> encode_tags([<<146>>], [28], 1);
invalidNumber -> encode_tags([<<146>>], [29], 1);
unassignedNumber -> encode_tags([<<146>>], [30], 1);
doNotDisturb -> encode_tags([<<146>>], [31], 1);
externalControlled -> encode_tags([<<146>>], [32], 1);
systemFailure -> encode_tags([<<146>>], [33], 1);
applicationNotification -> encode_tags([<<146>>], [34], 1);
referOk -> encode_tags([<<146>>], [35], 1);
referFailure -> encode_tags([<<146>>], [36], 1);
hole -> encode_tags([<<146>>], [37], 1);
hold -> encode_tags([<<146>>], [38], 1);
Enumval13 -> exit({error,{asn1, {enumerated_not_in_range,Enumval13}}})
end
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10, EncBytes11, EncBytes12, EncBytes13, EncBytes14, EncBytes15, EncBytes16, EncBytes17, EncBytes18, EncBytes19],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10 + EncLen11 + EncLen12 + EncLen13 + EncLen14 + EncLen15 + EncLen16 + EncLen17 + EncLen18 + EncLen19,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  PICArg_routingInfo
%%================================
'enc_PICArg_routingInfo'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      cdPN ->
         'ACPdatatypes':'enc_CalledPartyNumber'(element(2,Val), [<<160>>]);
      routingAddress ->
         'ACPdatatypes':'enc_ACPDestinationRoutingAddress'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_PICArg'(Tlv) ->
   'dec_PICArg'(Tlv, [16]).

'dec_PICArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute legID(1) with type OCTET STRING
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_octet_string(V1, [131072]),
C1 = byte_size(Val1),
if C1 =:= 1 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute pic(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> analyseInformation;
1 -> authoriseOriginationAttempt;
2 -> collectInformation;
3 -> collectNDigits;
4 -> oActive;
5 -> oAlerting;
6 -> oException;
7 -> oNull;
8 -> selectRoute;
9 -> sendCall;
10 -> authoriseTerminationAttempt;
11 -> presentCall;
12 -> selectFacility;
13 -> tActive;
14 -> tAlerting;
15 -> tNull;
16 -> releaseCall;
17 -> disconnectLeg;
18 -> sendSTUI;
19 -> sendUTSI;
20 -> authorizeTermination;
21 -> reconnect;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute routingInfo(3) with type CHOICE
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = 'dec_PICArg_routingInfo'(V3, [131074]),

%%-------------------------------------------------
%% attribute routeList(4)   External INCS3datatypes:RouteList OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'INCS3datatypes':'dec_RouteList'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute callingPartyNumber(5)   External ACPdatatypes:CallingPartyNumber OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {'ACPdatatypes':'dec_CallingPartyNumber'(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute callingPartysCategory(6) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {case decode_integer(V6, []) of
0 -> unknownAtThisTime;
1 -> operatorFrench;
2 -> operatorEngish;
3 -> operatorGerman;
4 -> operatorRussian;
5 -> operatorSpanish;
9 -> reserved;
10 -> ordinarySubscriber;
11 -> subscriberWithPriority;
12 -> dataCall;
13 -> testCall;
14 -> spare;
15 -> payphone;
224 -> category0;
225 -> hotelsSubscriber;
226 -> freeSubscriber;
227 -> paidSubscriber;
228 -> localSubscriber;
229 -> localTaksofon;
240 -> autoCallI;
241 -> semiautoCallI;
242 -> autoCallII;
243 -> semiautoCallII;
244 -> autoCallIII;
245 -> semiautoCallIII;
246 -> autoCallIV;
247 -> semiautoCallIV;
Default2 -> exit({error,{asn1,{illegal_enumerated,Default2}}})
end, TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute locationNumber(7) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {decode_octet_string(V7, []), TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

%%-------------------------------------------------
%% attribute originalCalledNumber(8) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term8,Tlv9} = case Tlv8 of
[{131079,V8}|TempTlv9] ->
    {begin
Val2 = decode_octet_string(V8, []),
C2 = byte_size(Val2),
if 1 =< C2, C2 =< 15 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv9};
    _ ->
        { asn1_NOVALUE, Tlv8}
end,

%%-------------------------------------------------
%% attribute userTeleserviceInformation(9) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term9,Tlv10} = case Tlv9 of
[{131080,V9}|TempTlv10] ->
    {decode_octet_string(V9, []), TempTlv10};
    _ ->
        { asn1_NOVALUE, Tlv9}
end,

%%-------------------------------------------------
%% attribute genericNumber(10)   External INCS3datatypes:GenericNumbers OPTIONAL
%%-------------------------------------------------
{Term10,Tlv11} = case Tlv10 of
[{131081,V10}|TempTlv11] ->
    {'INCS3datatypes':'dec_GenericNumbers'(V10, []), TempTlv11};
    _ ->
        { asn1_NOVALUE, Tlv10}
end,

%%-------------------------------------------------
%% attribute forwardCallIndicators(11) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term11,Tlv12} = case Tlv11 of
[{131082,V11}|TempTlv12] ->
    {begin
Val3 = decode_octet_string(V11, []),
C3 = byte_size(Val3),
if C3 =:= 2 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv12};
    _ ->
        { asn1_NOVALUE, Tlv11}
end,

%%-------------------------------------------------
%% attribute redirectingNumber(12) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term12,Tlv13} = case Tlv12 of
[{131083,V12}|TempTlv13] ->
    {begin
Val4 = decode_octet_string(V12, []),
C4 = byte_size(Val4),
if 1 =< C4, C4 =< 27 ->
Val4;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv13};
    _ ->
        { asn1_NOVALUE, Tlv12}
end,

%%-------------------------------------------------
%% attribute redirectingInformation(13) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term13,Tlv14} = case Tlv13 of
[{131084,V13}|TempTlv14] ->
    {begin
Val5 = decode_octet_string(V13, []),
C5 = byte_size(Val5),
if C5 =:= 2 ->
Val5;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv14};
    _ ->
        { asn1_NOVALUE, Tlv13}
end,

%%-------------------------------------------------
%% attribute uSIServiceIndicator(14)   External INCS3datatypes:USIServiceIndicator OPTIONAL
%%-------------------------------------------------
{Term14,Tlv15} = case Tlv14 of
[{131085,V14}|TempTlv15] ->
    {'INCS3datatypes':'dec_USIServiceIndicator'(V14, []), TempTlv15};
    _ ->
        { asn1_NOVALUE, Tlv14}
end,

%%-------------------------------------------------
%% attribute uSIInformation(15) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term15,Tlv16} = case Tlv15 of
[{131086,V15}|TempTlv16] ->
    {begin
Val6 = decode_octet_string(V15, []),
C6 = byte_size(Val6),
if 1 =< C6, C6 =< 5 ->
Val6;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv16};
    _ ->
        { asn1_NOVALUE, Tlv15}
end,

%%-------------------------------------------------
%% attribute infoDirection(16) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term16,Tlv17} = case Tlv16 of
[{131087,V16}|TempTlv17] ->
    {case decode_integer(V16, []) of
0 -> utsi;
1 -> stui;
Default3 -> exit({error,{asn1,{illegal_enumerated,Default3}}})
end, TempTlv17};
    _ ->
        { asn1_NOVALUE, Tlv16}
end,

%%-------------------------------------------------
%% attribute party(17) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term17,Tlv18} = case Tlv17 of
[{131088,V17}|TempTlv18] ->
    {case decode_integer(V17, []) of
0 -> localParty;
1 -> remoteParty;
2 -> surrogateParty;
Default4 -> exit({error,{asn1,{illegal_enumerated,Default4}}})
end, TempTlv18};
    _ ->
        { asn1_NOVALUE, Tlv17}
end,

%%-------------------------------------------------
%% attribute facilityGroup(18)   External INCS3datatypes:FacilityGroup OPTIONAL
%%-------------------------------------------------
{Term18,Tlv19} = case Tlv18 of
[{131089,V18}|TempTlv19] ->
    {'INCS3datatypes':'dec_FacilityGroup'(V18, []), TempTlv19};
    _ ->
        { asn1_NOVALUE, Tlv18}
end,

%%-------------------------------------------------
%% attribute cause(19) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term19,Tlv20} = case Tlv19 of
[{131090,V19}|TempTlv20] ->
    {case decode_integer(V19, []) of
0 -> normal;
1 -> originationDenied;
2 -> collectDigits;
3 -> authorisationFailure;
4 -> bPtyAlerted;
5 -> noIndication;
6 -> aPtyAbandon;
7 -> invalidCollectedInformation;
8 -> collectInformationFailure;
9 -> aPtyDisc;
10 -> bPtyDisc;
11 -> routeSelectFailure;
12 -> oNoAnswer;
13 -> terminationDenied;
14 -> notReachable;
15 -> bPtyNoAnswer;
16 -> bPtyBusyUDUB;
17 -> bPtyBusyNDUB;
18 -> ss7Failure;
19 -> calledPartyRejected;
20 -> tException;
21 -> routeFailure1;
22 -> routeFailure2;
23 -> ssActivating;
24 -> conversationTimeout;
25 -> noCircuitAvailable;
26 -> coreNotification;
27 -> unsupportedMedia;
28 -> numberIncomplete;
29 -> invalidNumber;
30 -> unassignedNumber;
31 -> doNotDisturb;
32 -> externalControlled;
33 -> systemFailure;
34 -> applicationNotification;
35 -> referOk;
36 -> referFailure;
37 -> hole;
38 -> hold;
Default5 -> exit({error,{asn1,{illegal_enumerated,Default5}}})
end, TempTlv20};
    _ ->
        { asn1_NOVALUE, Tlv19}
end,

case Tlv20 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv20}}}) % extra fields not allowed
end,
   {'PICArg', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9, Term10, Term11, Term12, Term13, Term14, Term15, Term16, Term17, Term18, Term19}.

'dec_PICArg_routingInfo'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'cdPN'
    {131072, V1} -> 
        {cdPN, 'ACPdatatypes':'dec_CalledPartyNumber'(V1, [])};


%% 'routingAddress'
    {131073, V1} -> 
        {routingAddress, 'ACPdatatypes':'dec_ACPDestinationRoutingAddress'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  EventTime
%%================================
'enc_EventTime'(Val) ->
    'enc_EventTime'(Val, [<<48>>]).

'enc_EventTime'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute megaSec(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute sec(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute micSec(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_integer(Cindex3, [<<130>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_EventTime'(Tlv) ->
   'dec_EventTime'(Tlv, [16]).

'dec_EventTime'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute megaSec(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1, [131072]),

%%-------------------------------------------------
%% attribute sec(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_integer(V2, [131073]),

%%-------------------------------------------------
%% attribute micSec(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = decode_integer(V3, [131074]),

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'EventTime', Term1, Term2, Term3}.

'emptyString'() ->
<<>>.

'oct0'() ->
<<0>>.

'oct1'() ->
<<1>>.

'oct2'() ->
<<2>>.

'oct3'() ->
<<3>>.

'oct4'() ->
<<4>>.

'oct5'() ->
<<5>>.

'oct6'() ->
<<6>>.

'oct7'() ->
<<7>>.

'oct8'() ->
<<8>>.

'oct9'() ->
<<9>>.

'octa'() ->
<<10>>.

'octb'() ->
<<11>>.


%%%
%%% Run-time functions.
%%%

'dialyzer-suppressions'(Arg) ->
    ok.

ber_decode_nif(B) ->
    asn1rt_nif:decode_ber_tlv(B).

collect_parts(TlvList) ->
    collect_parts(TlvList, []).

collect_parts([{_,L}|Rest], Acc) when is_list(L) ->
    collect_parts(Rest, [collect_parts(L)|Acc]);
collect_parts([{3,<<Unused,Bits/binary>>}|Rest], _Acc) ->
    collect_parts_bit(Rest, [Bits], Unused);
collect_parts([{_T,V}|Rest], Acc) ->
    collect_parts(Rest, [V|Acc]);
collect_parts([], Acc) ->
    list_to_binary(lists:reverse(Acc)).

collect_parts_bit([{3,<<Unused,Bits/binary>>}|Rest], Acc, Uacc) ->
    collect_parts_bit(Rest, [Bits|Acc], Unused + Uacc);
collect_parts_bit([], Acc, Uacc) ->
    list_to_binary([Uacc|lists:reverse(Acc)]).

decode_boolean(Tlv, TagIn) ->
    Val = match_tags(Tlv, TagIn),
    case Val of
        <<0:8>> ->
            false;
        <<_:8>> ->
            true;
        _ ->
            exit({error,{asn1,{decode_boolean,Val}}})
    end.

decode_integer(Tlv, TagIn) ->
    Bin = match_tags(Tlv, TagIn),
    Len = byte_size(Bin),
    <<Int:Len/signed-unit:8>> = Bin,
    Int.

decode_native_bit_string(Buffer, Tags) ->
    case match_and_collect(Buffer, Tags) of
        <<0>> ->
            <<>>;
        <<Unused,Bits/binary>> ->
            Size = bit_size(Bits) - Unused,
            <<Val:Size/bitstring,_:Unused/bitstring>> = Bits,
            Val
    end.

decode_octet_string(Tlv, TagsIn) ->
    Bin = match_and_collect(Tlv, TagsIn),
    binary:copy(Bin).

decode_restricted_string(Tlv, TagsIn) ->
    match_and_collect(Tlv, TagsIn).

encode_boolean(true, TagIn) ->
    encode_tags(TagIn, [255], 1);
encode_boolean(false, TagIn) ->
    encode_tags(TagIn, [0], 1);
encode_boolean(X, _) ->
    exit({error,{asn1,{encode_boolean,X}}}).

encode_integer(Val) ->
    Bytes =
        if
            Val >= 0 ->
                encode_integer_pos(Val, []);
            true ->
                encode_integer_neg(Val, [])
        end,
    {Bytes,length(Bytes)}.

encode_integer(Val, Tag) when is_integer(Val) ->
    encode_tags(Tag, encode_integer(Val));
encode_integer(Val, _Tag) ->
    exit({error,{asn1,{encode_integer,Val}}}).

encode_integer_neg(- 1, [B1|_T] = L) when B1 > 127 ->
    L;
encode_integer_neg(N, Acc) ->
    encode_integer_neg(N bsr 8, [N band 255|Acc]).

encode_integer_pos(0, [B|_Acc] = L) when B < 128 ->
    L;
encode_integer_pos(N, Acc) ->
    encode_integer_pos(N bsr 8, [N band 255|Acc]).

encode_length(L) when L =< 127 ->
    {[L],1};
encode_length(L) ->
    Oct = minimum_octets(L),
    Len = length(Oct),
    if
        Len =< 126 ->
            {[128 bor Len|Oct],Len + 1};
        true ->
            exit({error,{asn1,too_long_length_oct,Len}})
    end.

encode_restricted_string(OctetList, TagIn) when is_binary(OctetList) ->
    encode_tags(TagIn, OctetList, byte_size(OctetList));
encode_restricted_string(OctetList, TagIn) when is_list(OctetList) ->
    encode_tags(TagIn, OctetList, length(OctetList)).

encode_tags(TagIn, {BytesSoFar,LenSoFar}) ->
    encode_tags(TagIn, BytesSoFar, LenSoFar).

encode_tags([Tag|Trest], BytesSoFar, LenSoFar) ->
    {Bytes2,L2} = encode_length(LenSoFar),
    encode_tags(Trest,
                [Tag,Bytes2|BytesSoFar],
                LenSoFar + byte_size(Tag) + L2);
encode_tags([], BytesSoFar, LenSoFar) ->
    {BytesSoFar,LenSoFar}.

encode_unnamed_bit_string(Bits, TagIn) ->
    Unused = (8 - bit_size(Bits) band 7) band 7,
    Bin = <<Unused,Bits/bitstring,0:Unused>>,
    encode_tags(TagIn, Bin, byte_size(Bin)).

match_and_collect(Tlv, TagsIn) ->
    Val = match_tags(Tlv, TagsIn),
    case Val of
        [_|_] = PartList ->
            collect_parts(PartList);
        Bin when is_binary(Bin) ->
            Bin
    end.

match_tags({T,V}, [T]) ->
    V;
match_tags({T,V}, [T|Tt]) ->
    match_tags(V, Tt);
match_tags([{T,V}], [T|Tt]) ->
    match_tags(V, Tt);
match_tags([{T,_V}|_] = Vlist, [T]) ->
    Vlist;
match_tags(Tlv, []) ->
    Tlv;
match_tags({Tag,_V} = Tlv, [T|_Tt]) ->
    exit({error,{asn1,{wrong_tag,{{expected,T},{got,Tag,Tlv}}}}}).

minimum_octets(0, Acc) ->
    Acc;
minimum_octets(Val, Acc) ->
    minimum_octets(Val bsr 8, [Val band 255|Acc]).

minimum_octets(Val) ->
    minimum_octets(Val, []).
