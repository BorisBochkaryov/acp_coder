%% Generated by the Erlang ASN.1 BER_V2-compiler version, utilizing bit-syntax:4.0.3
%% Purpose: encoder and decoder to the types in mod INCS3datatypes

-module('INCS3datatypes').
-compile(nowarn_unused_vars).
-dialyzer(no_improper_lists).
-include("INCS3datatypes.hrl").
-asn1_info([{vsn,'4.0.3'},
            {module,'INCS3datatypes'},
            {options,[{i,"src"},{outdir,"src"},noobj,{i,"."},{i,"asn1"}]}]).

-export([encoding_rule/0,bit_string_format/0,
         legacy_erlang_types/0]).
-export(['dialyzer-suppressions'/1]).
-export([
'enc_TriggerID'/2,
'enc_TriggerData'/2,
'enc_Extensions'/2,
'enc_ExtensionField'/2,
'enc_ExportLegsType'/2,
'enc_Integer4'/2,
'enc_InvokeId'/2,
'enc_Code'/2,
'enc_CollectedDigits'/2,
'enc_CollectedInfo'/2,
'enc_ElementaryMessageID'/2,
'enc_ErrorTreatment'/2,
'enc_GapOnResource'/2,
'enc_InbandInfo'/2,
'enc_InformationToRecord'/2,
'enc_InformationToSend'/2,
'enc_Language'/2,
'enc_MailBoxID'/2,
'enc_Media'/2,
'enc_MessageID'/2,
'enc_ReceivedStatus'/2,
'enc_RecordedMessageID'/2,
'enc_SRFGapCriteria'/2,
'enc_Tone'/2,
'enc_VariablePart'/2,
'enc_AccessCode'/2,
'enc_AChBillingChargingCharacteristics'/2,
'enc_ActionIndicator'/2,
'enc_ActionOnProfile'/2,
'enc_ActionPerformed'/2,
'enc_ActivableServices'/2,
'enc_AdditionalCallingPartyNumber'/2,
'enc_AdditionalCauseDescription'/2,
'enc_SSFamily'/2,
'enc_SORM'/2,
'enc_SSNotification'/2,
'enc_MediaId'/2,
'enc_AdditionalInformation'/2,
'enc_AdditionalISUP'/2,
'enc_AdditionalISUPParam'/2,
'enc_AdditionalMegaco'/2,
'enc_AdditionalMegacoTransfer'/2,
'enc_AdditionalMegacoConference'/2,
'enc_AlertingPattern'/2,
'enc_ApplicationTimer'/2,
'enc_AssistingSSPIPRoutingAddress'/2,
'enc_ATMTrafficDescriptor'/2,
'enc_BackwardGVNS'/2,
'enc_BackwardServiceInteractionInd'/2,
'enc_BCSMEvent'/2,
'enc_BearerCapability'/2,
'enc_BothwayThroughConnectionInd'/2,
'enc_CalledDirectoryNumber'/2,
'enc_CalledPartyBusinessGroupID'/2,
'enc_CalledPartySubaddress'/2,
'enc_CallingGeodeticLocation'/2,
'enc_CallingPartyBusinessGroupID'/2,
'enc_CallingPartySubaddress'/2,
'enc_CallingPartysCategory'/2,
'enc_CallProcessingOperationCorrelationID'/2,
'enc_CallReference'/2,
'enc_CallResult'/2,
'enc_DTCallSegmentID'/2,
'enc_Carrier'/2,
'enc_Cause'/2,
'enc_CCSS'/2,
'enc_CGEncountered'/2,
'enc_ChargeNumber'/2,
'enc_ChargingEvent'/2,
'enc_CollectInformation'/2,
'enc_CollectNumberingPlan'/2,
'enc_Component'/2,
'enc_ComponentCorrelationID'/2,
'enc_ComponentType'/2,
'enc_ConnectedNumberTreatmentInd'/2,
'enc_ControlType'/2,
'enc_CorrelationID'/2,
'enc_CounterAndValue'/2,
'enc_CounterID'/2,
'enc_CountersValue'/2,
'enc_CreateOrRemoveIndicator'/2,
'enc_CSAID'/2,
'enc_CutAndPaste'/2,
'enc_DateAndTime'/2,
'enc_DefaultFaultHandling'/2,
'enc_DestinationRoutingAddress'/2,
'enc_Digits'/2,
'enc_DisplayInformation'/2,
'enc_DpSpecificCommonParameters'/2,
'enc_DpSpecificCriteria'/2,
'enc_XDuration'/2,
'enc_Entry'/2,
'enc_EventSpecificInformationBCSM'/2,
'enc_EventSpecificInformationCharging'/2,
'enc_EventTypeBCSM'/2,
'enc_EventTypeCharging'/2,
'enc_FacilityGroup'/2,
'enc_FacilityGroupMember'/2,
'enc_FCIBillingChargingCharacteristics'/2,
'enc_FeatureCode'/2,
'enc_FeatureRequestIndicator'/2,
'enc_FilteredCallTreatment'/2,
'enc_FilteringCharacteristics'/2,
'enc_FilteringCriteria'/2,
'enc_FilteringTimeOut'/2,
'enc_ForwardCallIndicators'/2,
'enc_ForwardGVNS'/2,
'enc_ForwardingCondition'/2,
'enc_ForwardServiceInteractionInd'/2,
'enc_GapCriteria'/2,
'enc_GapOnService'/2,
'enc_GapIndicators'/2,
'enc_GapTreatment'/2,
'enc_GenericName'/2,
'enc_GenericNumber'/2,
'enc_GenericNumbers'/2,
'enc_HighLayerCompatibility'/2,
'enc_HoldCause'/2,
'enc_INprofile'/2,
'enc_INServiceCompatibilityIndication'/2,
'enc_INServiceCompatibilityResponse'/2,
'enc_Interval'/2,
'enc_IPAvailable'/2,
'enc_IPRoutingAddress'/2,
'enc_IPSSPCapabilities'/2,
'enc_ISDNAccessRelatedInformation'/2,
'enc_DTLegID'/2,
'enc_DTLegType'/2,
'enc_LocationNumber'/2,
'enc_MaximumNumberOfCounters'/2,
'enc_MidCallControlInfo'/2,
'enc_MidCallInfo'/2,
'enc_MidCallInfoType'/2,
'enc_DTMiscCallInfo'/2,
'enc_MonitorMode'/2,
'enc_NumberingPlan'/2,
'enc_NumberOfDigits'/2,
'enc_OriginalCalledPartyID'/2,
'enc_ProfileIdentifier'/2,
'enc_QoSParameter'/2,
'enc_Reason'/2,
'enc_RedirectingPartyID'/2,
'enc_RedirectionInformation'/2,
'enc_RedirectReason'/2,
'enc_RegistratorIdentifier'/2,
'enc_ReportCondition'/2,
'enc_RequestedInformationList'/2,
'enc_RequestedInformationTypeList'/2,
'enc_RequestedInformation'/2,
'enc_RequestedInformationType'/2,
'enc_RequestedInformationValue'/2,
'enc_RequestedUTSI'/2,
'enc_RequestedUTSIList'/2,
'enc_ResourceID'/2,
'enc_ResourceStatus'/2,
'enc_ResponseCondition'/2,
'enc_RouteList'/2,
'enc_RoutingNumber'/2,
'enc_ScfID'/2,
'enc_SCIBillingChargingCharacteristics'/2,
'enc_SDSSinformation'/2,
'enc_ServiceAddressInformation'/2,
'enc_ServiceInteractionIndicators'/2,
'enc_ServiceInteractionIndicatorsTwo'/2,
'enc_ServiceKey'/2,
'enc_ServiceProfileIdentifier'/2,
'enc_ServingAreaID'/2,
'enc_SFBillingChargingCharacteristics'/2,
'enc_SuspendTimer'/2,
'enc_TDPIdentifier'/2,
'enc_TerminalType'/2,
'enc_XTimerID'/2,
'enc_TimerValue'/2,
'enc_TraceInformation'/2,
'enc_TraceItem'/2,
'enc_TravellingClassMark'/2,
'enc_TriggerDataIdentifier'/2,
'enc_TriggerDPType'/2,
'enc_TriggerResults'/2,
'enc_TriggerResult'/2,
'enc_Triggers'/2,
'enc_Trigger'/2,
'enc_TriggerStatus'/2,
'enc_TriggerType'/2,
'enc_USIInformation'/2,
'enc_USIMonitorMode'/2,
'enc_USIServiceIndicator'/2,
'enc_VPNIndicator'/2
]).

-export([
'dec_TriggerID'/2,
'dec_TriggerData'/2,
'dec_Extensions'/2,
'dec_ExtensionField'/2,
'dec_ExportLegsType'/2,
'dec_Integer4'/2,
'dec_InvokeId'/2,
'dec_Code'/2,
'dec_CollectedDigits'/2,
'dec_CollectedInfo'/2,
'dec_ElementaryMessageID'/2,
'dec_ErrorTreatment'/2,
'dec_GapOnResource'/2,
'dec_InbandInfo'/2,
'dec_InformationToRecord'/2,
'dec_InformationToSend'/2,
'dec_Language'/2,
'dec_MailBoxID'/2,
'dec_Media'/2,
'dec_MessageID'/2,
'dec_ReceivedStatus'/2,
'dec_RecordedMessageID'/2,
'dec_SRFGapCriteria'/2,
'dec_Tone'/2,
'dec_VariablePart'/2,
'dec_AccessCode'/2,
'dec_AChBillingChargingCharacteristics'/2,
'dec_ActionIndicator'/2,
'dec_ActionOnProfile'/2,
'dec_ActionPerformed'/2,
'dec_ActivableServices'/2,
'dec_AdditionalCallingPartyNumber'/2,
'dec_AdditionalCauseDescription'/2,
'dec_SSFamily'/2,
'dec_SORM'/2,
'dec_SSNotification'/2,
'dec_MediaId'/2,
'dec_AdditionalInformation'/2,
'dec_AdditionalISUP'/2,
'dec_AdditionalISUPParam'/2,
'dec_AdditionalMegaco'/2,
'dec_AdditionalMegacoTransfer'/2,
'dec_AdditionalMegacoConference'/2,
'dec_AlertingPattern'/2,
'dec_ApplicationTimer'/2,
'dec_AssistingSSPIPRoutingAddress'/2,
'dec_ATMTrafficDescriptor'/2,
'dec_BackwardGVNS'/2,
'dec_BackwardServiceInteractionInd'/2,
'dec_BCSMEvent'/2,
'dec_BearerCapability'/2,
'dec_BothwayThroughConnectionInd'/2,
'dec_CalledDirectoryNumber'/2,
'dec_CalledPartyBusinessGroupID'/2,
'dec_CalledPartySubaddress'/2,
'dec_CallingGeodeticLocation'/2,
'dec_CallingPartyBusinessGroupID'/2,
'dec_CallingPartySubaddress'/2,
'dec_CallingPartysCategory'/2,
'dec_CallProcessingOperationCorrelationID'/2,
'dec_CallReference'/2,
'dec_CallResult'/2,
'dec_DTCallSegmentID'/2,
'dec_Carrier'/2,
'dec_Cause'/2,
'dec_CCSS'/2,
'dec_CGEncountered'/2,
'dec_ChargeNumber'/2,
'dec_ChargingEvent'/2,
'dec_CollectInformation'/2,
'dec_CollectNumberingPlan'/2,
'dec_Component'/2,
'dec_ComponentCorrelationID'/2,
'dec_ComponentType'/2,
'dec_ConnectedNumberTreatmentInd'/2,
'dec_ControlType'/2,
'dec_CorrelationID'/2,
'dec_CounterAndValue'/2,
'dec_CounterID'/2,
'dec_CountersValue'/2,
'dec_CreateOrRemoveIndicator'/2,
'dec_CSAID'/2,
'dec_CutAndPaste'/2,
'dec_DateAndTime'/2,
'dec_DefaultFaultHandling'/2,
'dec_DestinationRoutingAddress'/2,
'dec_Digits'/2,
'dec_DisplayInformation'/2,
'dec_DpSpecificCommonParameters'/2,
'dec_DpSpecificCriteria'/2,
'dec_XDuration'/2,
'dec_Entry'/2,
'dec_EventSpecificInformationBCSM'/2,
'dec_EventSpecificInformationCharging'/2,
'dec_EventTypeBCSM'/2,
'dec_EventTypeCharging'/2,
'dec_FacilityGroup'/2,
'dec_FacilityGroupMember'/2,
'dec_FCIBillingChargingCharacteristics'/2,
'dec_FeatureCode'/2,
'dec_FeatureRequestIndicator'/2,
'dec_FilteredCallTreatment'/2,
'dec_FilteringCharacteristics'/2,
'dec_FilteringCriteria'/2,
'dec_FilteringTimeOut'/2,
'dec_ForwardCallIndicators'/2,
'dec_ForwardGVNS'/2,
'dec_ForwardingCondition'/2,
'dec_ForwardServiceInteractionInd'/2,
'dec_GapCriteria'/2,
'dec_GapOnService'/2,
'dec_GapIndicators'/2,
'dec_GapTreatment'/2,
'dec_GenericName'/2,
'dec_GenericNumber'/2,
'dec_GenericNumbers'/2,
'dec_HighLayerCompatibility'/2,
'dec_HoldCause'/2,
'dec_INprofile'/2,
'dec_INServiceCompatibilityIndication'/2,
'dec_INServiceCompatibilityResponse'/2,
'dec_Interval'/2,
'dec_IPAvailable'/2,
'dec_IPRoutingAddress'/2,
'dec_IPSSPCapabilities'/2,
'dec_ISDNAccessRelatedInformation'/2,
'dec_DTLegID'/2,
'dec_DTLegType'/2,
'dec_LocationNumber'/2,
'dec_MaximumNumberOfCounters'/2,
'dec_MidCallControlInfo'/2,
'dec_MidCallInfo'/2,
'dec_MidCallInfoType'/2,
'dec_DTMiscCallInfo'/2,
'dec_MonitorMode'/2,
'dec_NumberingPlan'/2,
'dec_NumberOfDigits'/2,
'dec_OriginalCalledPartyID'/2,
'dec_ProfileIdentifier'/2,
'dec_QoSParameter'/2,
'dec_Reason'/2,
'dec_RedirectingPartyID'/2,
'dec_RedirectionInformation'/2,
'dec_RedirectReason'/2,
'dec_RegistratorIdentifier'/2,
'dec_ReportCondition'/2,
'dec_RequestedInformationList'/2,
'dec_RequestedInformationTypeList'/2,
'dec_RequestedInformation'/2,
'dec_RequestedInformationType'/2,
'dec_RequestedInformationValue'/2,
'dec_RequestedUTSI'/2,
'dec_RequestedUTSIList'/2,
'dec_ResourceID'/2,
'dec_ResourceStatus'/2,
'dec_ResponseCondition'/2,
'dec_RouteList'/2,
'dec_RoutingNumber'/2,
'dec_ScfID'/2,
'dec_SCIBillingChargingCharacteristics'/2,
'dec_SDSSinformation'/2,
'dec_ServiceAddressInformation'/2,
'dec_ServiceInteractionIndicators'/2,
'dec_ServiceInteractionIndicatorsTwo'/2,
'dec_ServiceKey'/2,
'dec_ServiceProfileIdentifier'/2,
'dec_ServingAreaID'/2,
'dec_SFBillingChargingCharacteristics'/2,
'dec_SuspendTimer'/2,
'dec_TDPIdentifier'/2,
'dec_TerminalType'/2,
'dec_XTimerID'/2,
'dec_TimerValue'/2,
'dec_TraceInformation'/2,
'dec_TraceItem'/2,
'dec_TravellingClassMark'/2,
'dec_TriggerDataIdentifier'/2,
'dec_TriggerDPType'/2,
'dec_TriggerResults'/2,
'dec_TriggerResult'/2,
'dec_Triggers'/2,
'dec_Trigger'/2,
'dec_TriggerStatus'/2,
'dec_TriggerType'/2,
'dec_USIInformation'/2,
'dec_USIMonitorMode'/2,
'dec_USIServiceIndicator'/2,
'dec_VPNIndicator'/2
]).

-export([
'initialCallSegment'/0,
'dtleg1'/0,
'dtleg2'/0,
'highLayerCompatibilityLength'/0,
'minCauseLength'/0,
'numOfCounters'/0,
'numOfInfoItems'/0,
'minAChBillingChargingLength'/0,
'maxAChBillingChargingLength'/0,
'minATMTrafficDescriptorLength'/0,
'maxATMTrafficDescriptorLength'/0,
'minBackwardGVNSLength'/0,
'maxBackwardGVNSLength'/0,
'maxBearerCapabilityLength'/0,
'minBroadbandBearerCapabilityLength'/0,
'maxBroadbandBearerCapabilityLength'/0,
'minCalledDirectoryNumberLength'/0,
'maxCalledDirectoryNumberLength'/0,
'minCalledPartyNumberLength'/0,
'maxCalledPartyNumberLength'/0,
'minCalledPartySubaddressLength'/0,
'maxCalledPartySubaddressLength'/0,
'minCallingGeodeticLocationLength'/0,
'maxCallingGeodeticLocationLength'/0,
'minCallingPartyNumberLength'/0,
'maxCallingPartyNumberLength'/0,
'minCallingPartySubaddressLength'/0,
'maxCallingPartySubaddressLength'/0,
'minCallResultLength'/0,
'maxCallResultLength'/0,
'minCarrierLength'/0,
'maxCarrierLength'/0,
'maxCauseLength'/0,
'minDigitsLength'/0,
'maxDigitsLength'/0,
'minDisplayInformationLength'/0,
'maxDisplayInformationLength'/0,
'minEventSpecificInformationChargingLength'/0,
'maxEventSpecificInformationChargingLength'/0,
'minEventTypeChargingLength'/0,
'maxEventTypeChargingLength'/0,
'minFCIBillingChargingLength'/0,
'maxFCIBillingChargingLength'/0,
'minForwardGVNSLength'/0,
'maxForwardGVNSLength'/0,
'minGenericNameLength'/0,
'maxGenericNameLength'/0,
'minGenericNumberLength'/0,
'maxGenericNumberLength'/0,
'maxInitialTimeInterval'/0,
'maxINServiceCompatibilityIndLength'/0,
'minIPAvailableLength'/0,
'maxIPAvailableLength'/0,
'minIPSSPCapabilitiesLength'/0,
'maxIPSSPCapabilitiesLength'/0,
'minISDNAccessRelatedInfoLength'/0,
'maxISDNAccessRelatedInfoLength'/0,
'minISUPParameterLength'/0,
'maxISUPParameterLength'/0,
'maxISUPParameterType'/0,
'minLocationNumberLength'/0,
'maxLocationNumberLength'/0,
'minMidCallControlInfoNum'/0,
'maxMidCallControlInfoNum'/0,
'minOriginalCalledPartyIDLength'/0,
'maxOriginalCalledPartyIDLength'/0,
'minQoSParameterLength'/0,
'maxQoSParameterLength'/0,
'minReasonLength'/0,
'maxReasonLength'/0,
'minRedirectingPartyIDLength'/0,
'maxRedirectingPartyIDLength'/0,
'minRequestedUTSINum'/0,
'maxRequestedUTSINum'/0,
'minRouteListLength'/0,
'maxRouteListLength'/0,
'minRoutingNumberLength'/0,
'maxRoutingNumberLength'/0,
'minScfIDLength'/0,
'maxScfIDLength'/0,
'minSCIBillingChargingLength'/0,
'maxSCIBillingChargingLength'/0,
'minSDSSinformationLength'/0,
'maxSDSSinformationLength'/0,
'minServiceInteractionIndicatorsLength'/0,
'maxServiceInteractionIndicatorsLength'/0,
'minSFBillingChargingLength'/0,
'maxSFBillingChargingLength'/0,
'minUSIInformationLength'/0,
'maxUSIInformationLength'/0,
'minUSIServiceIndicatorLength'/0,
'maxUSIServiceIndicatorLength'/0,
'numOfBCSMEvents'/0,
'numOfBCUSMEvents'/0,
'numOfChargingEvents'/0,
'numOfCSAs'/0,
'numOfCSs'/0,
'numOfGenericNumbers'/0,
'numOfINProfile'/0,
'numOfTriggers'/0,
'numOfInServiceCompatibilityIndLength'/0,
'numOfLegs'/0,
'maxAmount'/0,
'maxCallReferenceLength'/0,
'maxInitialUnitIncrement'/0,
'maxScalingFactor'/0,
'maxSegmentsPerDataInterval'/0,
'ub-nbCall'/0,
'numOfAddresses'/0,
'numOfServiceKeys'/0,
'minAttributesLength'/0,
'maxAttributesLength'/0,
'minMailBoxIDLength'/0,
'maxMailBoxIDLength'/0,
'minMessageContentLength'/0,
'maxMessageContentLength'/0,
'minReceivedInformationLength'/0,
'maxReceivedInformationLength'/0,
'maxRecordingTime'/0,
'numOfMessageIDs'/0,
'numOfExtensions'/0,
'maxRecordedMessageUnits'/0
]).

-export([info/0]).


-export([encode/2,decode/2]).

encoding_rule() -> ber.

bit_string_format() -> bitstring.

legacy_erlang_types() -> false.

encode(Type, Data) ->
try iolist_to_binary(element(1, encode_disp(Type, Data))) of
  Bytes ->
    {ok,Bytes}
  catch
    Class:Exception when Class =:= error; Class =:= exit ->
      case Exception of
        {error,Reason}=Error ->
          Error;
        Reason ->
         {error,{asn1,Reason}}
      end
end.

decode(Type,Data) ->
try decode_disp(Type, element(1, ber_decode_nif(Data))) of
  Result ->
    {ok,Result}
  catch
    Class:Exception when Class =:= error; Class =:= exit ->
      case Exception of
        {error,Reason}=Error ->
          Error;
        Reason ->
         {error,{asn1,Reason}}
      end
end.

encode_disp('TriggerID',Data) -> 'enc_TriggerID'(Data);
encode_disp('TriggerData',Data) -> 'enc_TriggerData'(Data);
encode_disp('Extensions',Data) -> 'enc_Extensions'(Data);
encode_disp('ExtensionField',Data) -> 'enc_ExtensionField'(Data);
encode_disp('ExportLegsType',Data) -> 'enc_ExportLegsType'(Data);
encode_disp('Integer4',Data) -> 'enc_Integer4'(Data);
encode_disp('InvokeId',Data) -> 'enc_InvokeId'(Data);
encode_disp('Code',Data) -> 'enc_Code'(Data);
encode_disp('CollectedDigits',Data) -> 'enc_CollectedDigits'(Data);
encode_disp('CollectedInfo',Data) -> 'enc_CollectedInfo'(Data);
encode_disp('ElementaryMessageID',Data) -> 'enc_ElementaryMessageID'(Data);
encode_disp('ErrorTreatment',Data) -> 'enc_ErrorTreatment'(Data);
encode_disp('GapOnResource',Data) -> 'enc_GapOnResource'(Data);
encode_disp('InbandInfo',Data) -> 'enc_InbandInfo'(Data);
encode_disp('InformationToRecord',Data) -> 'enc_InformationToRecord'(Data);
encode_disp('InformationToSend',Data) -> 'enc_InformationToSend'(Data);
encode_disp('Language',Data) -> 'enc_Language'(Data);
encode_disp('MailBoxID',Data) -> 'enc_MailBoxID'(Data);
encode_disp('Media',Data) -> 'enc_Media'(Data);
encode_disp('MessageID',Data) -> 'enc_MessageID'(Data);
encode_disp('ReceivedStatus',Data) -> 'enc_ReceivedStatus'(Data);
encode_disp('RecordedMessageID',Data) -> 'enc_RecordedMessageID'(Data);
encode_disp('SRFGapCriteria',Data) -> 'enc_SRFGapCriteria'(Data);
encode_disp('Tone',Data) -> 'enc_Tone'(Data);
encode_disp('VariablePart',Data) -> 'enc_VariablePart'(Data);
encode_disp('AccessCode',Data) -> 'enc_AccessCode'(Data);
encode_disp('AChBillingChargingCharacteristics',Data) -> 'enc_AChBillingChargingCharacteristics'(Data);
encode_disp('ActionIndicator',Data) -> 'enc_ActionIndicator'(Data);
encode_disp('ActionOnProfile',Data) -> 'enc_ActionOnProfile'(Data);
encode_disp('ActionPerformed',Data) -> 'enc_ActionPerformed'(Data);
encode_disp('ActivableServices',Data) -> 'enc_ActivableServices'(Data);
encode_disp('AdditionalCallingPartyNumber',Data) -> 'enc_AdditionalCallingPartyNumber'(Data);
encode_disp('AdditionalCauseDescription',Data) -> 'enc_AdditionalCauseDescription'(Data);
encode_disp('SSFamily',Data) -> 'enc_SSFamily'(Data);
encode_disp('SORM',Data) -> 'enc_SORM'(Data);
encode_disp('SSNotification',Data) -> 'enc_SSNotification'(Data);
encode_disp('MediaId',Data) -> 'enc_MediaId'(Data);
encode_disp('AdditionalInformation',Data) -> 'enc_AdditionalInformation'(Data);
encode_disp('AdditionalISUP',Data) -> 'enc_AdditionalISUP'(Data);
encode_disp('AdditionalISUPParam',Data) -> 'enc_AdditionalISUPParam'(Data);
encode_disp('AdditionalMegaco',Data) -> 'enc_AdditionalMegaco'(Data);
encode_disp('AdditionalMegacoTransfer',Data) -> 'enc_AdditionalMegacoTransfer'(Data);
encode_disp('AdditionalMegacoConference',Data) -> 'enc_AdditionalMegacoConference'(Data);
encode_disp('AlertingPattern',Data) -> 'enc_AlertingPattern'(Data);
encode_disp('ApplicationTimer',Data) -> 'enc_ApplicationTimer'(Data);
encode_disp('AssistingSSPIPRoutingAddress',Data) -> 'enc_AssistingSSPIPRoutingAddress'(Data);
encode_disp('ATMTrafficDescriptor',Data) -> 'enc_ATMTrafficDescriptor'(Data);
encode_disp('BackwardGVNS',Data) -> 'enc_BackwardGVNS'(Data);
encode_disp('BackwardServiceInteractionInd',Data) -> 'enc_BackwardServiceInteractionInd'(Data);
encode_disp('BCSMEvent',Data) -> 'enc_BCSMEvent'(Data);
encode_disp('BearerCapability',Data) -> 'enc_BearerCapability'(Data);
encode_disp('BothwayThroughConnectionInd',Data) -> 'enc_BothwayThroughConnectionInd'(Data);
encode_disp('CalledDirectoryNumber',Data) -> 'enc_CalledDirectoryNumber'(Data);
encode_disp('CalledPartyBusinessGroupID',Data) -> 'enc_CalledPartyBusinessGroupID'(Data);
encode_disp('CalledPartySubaddress',Data) -> 'enc_CalledPartySubaddress'(Data);
encode_disp('CallingGeodeticLocation',Data) -> 'enc_CallingGeodeticLocation'(Data);
encode_disp('CallingPartyBusinessGroupID',Data) -> 'enc_CallingPartyBusinessGroupID'(Data);
encode_disp('CallingPartySubaddress',Data) -> 'enc_CallingPartySubaddress'(Data);
encode_disp('CallingPartysCategory',Data) -> 'enc_CallingPartysCategory'(Data);
encode_disp('CallProcessingOperationCorrelationID',Data) -> 'enc_CallProcessingOperationCorrelationID'(Data);
encode_disp('CallReference',Data) -> 'enc_CallReference'(Data);
encode_disp('CallResult',Data) -> 'enc_CallResult'(Data);
encode_disp('DTCallSegmentID',Data) -> 'enc_DTCallSegmentID'(Data);
encode_disp('Carrier',Data) -> 'enc_Carrier'(Data);
encode_disp('Cause',Data) -> 'enc_Cause'(Data);
encode_disp('CCSS',Data) -> 'enc_CCSS'(Data);
encode_disp('CGEncountered',Data) -> 'enc_CGEncountered'(Data);
encode_disp('ChargeNumber',Data) -> 'enc_ChargeNumber'(Data);
encode_disp('ChargingEvent',Data) -> 'enc_ChargingEvent'(Data);
encode_disp('CollectInformation',Data) -> 'enc_CollectInformation'(Data);
encode_disp('CollectNumberingPlan',Data) -> 'enc_CollectNumberingPlan'(Data);
encode_disp('Component',Data) -> 'enc_Component'(Data);
encode_disp('ComponentCorrelationID',Data) -> 'enc_ComponentCorrelationID'(Data);
encode_disp('ComponentType',Data) -> 'enc_ComponentType'(Data);
encode_disp('ConnectedNumberTreatmentInd',Data) -> 'enc_ConnectedNumberTreatmentInd'(Data);
encode_disp('ControlType',Data) -> 'enc_ControlType'(Data);
encode_disp('CorrelationID',Data) -> 'enc_CorrelationID'(Data);
encode_disp('CounterAndValue',Data) -> 'enc_CounterAndValue'(Data);
encode_disp('CounterID',Data) -> 'enc_CounterID'(Data);
encode_disp('CountersValue',Data) -> 'enc_CountersValue'(Data);
encode_disp('CreateOrRemoveIndicator',Data) -> 'enc_CreateOrRemoveIndicator'(Data);
encode_disp('CSAID',Data) -> 'enc_CSAID'(Data);
encode_disp('CutAndPaste',Data) -> 'enc_CutAndPaste'(Data);
encode_disp('DateAndTime',Data) -> 'enc_DateAndTime'(Data);
encode_disp('DefaultFaultHandling',Data) -> 'enc_DefaultFaultHandling'(Data);
encode_disp('DestinationRoutingAddress',Data) -> 'enc_DestinationRoutingAddress'(Data);
encode_disp('Digits',Data) -> 'enc_Digits'(Data);
encode_disp('DisplayInformation',Data) -> 'enc_DisplayInformation'(Data);
encode_disp('DpSpecificCommonParameters',Data) -> 'enc_DpSpecificCommonParameters'(Data);
encode_disp('DpSpecificCriteria',Data) -> 'enc_DpSpecificCriteria'(Data);
encode_disp('XDuration',Data) -> 'enc_XDuration'(Data);
encode_disp('Entry',Data) -> 'enc_Entry'(Data);
encode_disp('EventSpecificInformationBCSM',Data) -> 'enc_EventSpecificInformationBCSM'(Data);
encode_disp('EventSpecificInformationCharging',Data) -> 'enc_EventSpecificInformationCharging'(Data);
encode_disp('EventTypeBCSM',Data) -> 'enc_EventTypeBCSM'(Data);
encode_disp('EventTypeCharging',Data) -> 'enc_EventTypeCharging'(Data);
encode_disp('FacilityGroup',Data) -> 'enc_FacilityGroup'(Data);
encode_disp('FacilityGroupMember',Data) -> 'enc_FacilityGroupMember'(Data);
encode_disp('FCIBillingChargingCharacteristics',Data) -> 'enc_FCIBillingChargingCharacteristics'(Data);
encode_disp('FeatureCode',Data) -> 'enc_FeatureCode'(Data);
encode_disp('FeatureRequestIndicator',Data) -> 'enc_FeatureRequestIndicator'(Data);
encode_disp('FilteredCallTreatment',Data) -> 'enc_FilteredCallTreatment'(Data);
encode_disp('FilteringCharacteristics',Data) -> 'enc_FilteringCharacteristics'(Data);
encode_disp('FilteringCriteria',Data) -> 'enc_FilteringCriteria'(Data);
encode_disp('FilteringTimeOut',Data) -> 'enc_FilteringTimeOut'(Data);
encode_disp('ForwardCallIndicators',Data) -> 'enc_ForwardCallIndicators'(Data);
encode_disp('ForwardGVNS',Data) -> 'enc_ForwardGVNS'(Data);
encode_disp('ForwardingCondition',Data) -> 'enc_ForwardingCondition'(Data);
encode_disp('ForwardServiceInteractionInd',Data) -> 'enc_ForwardServiceInteractionInd'(Data);
encode_disp('GapCriteria',Data) -> 'enc_GapCriteria'(Data);
encode_disp('GapOnService',Data) -> 'enc_GapOnService'(Data);
encode_disp('GapIndicators',Data) -> 'enc_GapIndicators'(Data);
encode_disp('GapTreatment',Data) -> 'enc_GapTreatment'(Data);
encode_disp('GenericName',Data) -> 'enc_GenericName'(Data);
encode_disp('GenericNumber',Data) -> 'enc_GenericNumber'(Data);
encode_disp('GenericNumbers',Data) -> 'enc_GenericNumbers'(Data);
encode_disp('HighLayerCompatibility',Data) -> 'enc_HighLayerCompatibility'(Data);
encode_disp('HoldCause',Data) -> 'enc_HoldCause'(Data);
encode_disp('INprofile',Data) -> 'enc_INprofile'(Data);
encode_disp('INServiceCompatibilityIndication',Data) -> 'enc_INServiceCompatibilityIndication'(Data);
encode_disp('INServiceCompatibilityResponse',Data) -> 'enc_INServiceCompatibilityResponse'(Data);
encode_disp('Interval',Data) -> 'enc_Interval'(Data);
encode_disp('IPAvailable',Data) -> 'enc_IPAvailable'(Data);
encode_disp('IPRoutingAddress',Data) -> 'enc_IPRoutingAddress'(Data);
encode_disp('IPSSPCapabilities',Data) -> 'enc_IPSSPCapabilities'(Data);
encode_disp('ISDNAccessRelatedInformation',Data) -> 'enc_ISDNAccessRelatedInformation'(Data);
encode_disp('DTLegID',Data) -> 'enc_DTLegID'(Data);
encode_disp('DTLegType',Data) -> 'enc_DTLegType'(Data);
encode_disp('LocationNumber',Data) -> 'enc_LocationNumber'(Data);
encode_disp('MaximumNumberOfCounters',Data) -> 'enc_MaximumNumberOfCounters'(Data);
encode_disp('MidCallControlInfo',Data) -> 'enc_MidCallControlInfo'(Data);
encode_disp('MidCallInfo',Data) -> 'enc_MidCallInfo'(Data);
encode_disp('MidCallInfoType',Data) -> 'enc_MidCallInfoType'(Data);
encode_disp('DTMiscCallInfo',Data) -> 'enc_DTMiscCallInfo'(Data);
encode_disp('MonitorMode',Data) -> 'enc_MonitorMode'(Data);
encode_disp('NumberingPlan',Data) -> 'enc_NumberingPlan'(Data);
encode_disp('NumberOfDigits',Data) -> 'enc_NumberOfDigits'(Data);
encode_disp('OriginalCalledPartyID',Data) -> 'enc_OriginalCalledPartyID'(Data);
encode_disp('ProfileIdentifier',Data) -> 'enc_ProfileIdentifier'(Data);
encode_disp('QoSParameter',Data) -> 'enc_QoSParameter'(Data);
encode_disp('Reason',Data) -> 'enc_Reason'(Data);
encode_disp('RedirectingPartyID',Data) -> 'enc_RedirectingPartyID'(Data);
encode_disp('RedirectionInformation',Data) -> 'enc_RedirectionInformation'(Data);
encode_disp('RedirectReason',Data) -> 'enc_RedirectReason'(Data);
encode_disp('RegistratorIdentifier',Data) -> 'enc_RegistratorIdentifier'(Data);
encode_disp('ReportCondition',Data) -> 'enc_ReportCondition'(Data);
encode_disp('RequestedInformationList',Data) -> 'enc_RequestedInformationList'(Data);
encode_disp('RequestedInformationTypeList',Data) -> 'enc_RequestedInformationTypeList'(Data);
encode_disp('RequestedInformation',Data) -> 'enc_RequestedInformation'(Data);
encode_disp('RequestedInformationType',Data) -> 'enc_RequestedInformationType'(Data);
encode_disp('RequestedInformationValue',Data) -> 'enc_RequestedInformationValue'(Data);
encode_disp('RequestedUTSI',Data) -> 'enc_RequestedUTSI'(Data);
encode_disp('RequestedUTSIList',Data) -> 'enc_RequestedUTSIList'(Data);
encode_disp('ResourceID',Data) -> 'enc_ResourceID'(Data);
encode_disp('ResourceStatus',Data) -> 'enc_ResourceStatus'(Data);
encode_disp('ResponseCondition',Data) -> 'enc_ResponseCondition'(Data);
encode_disp('RouteList',Data) -> 'enc_RouteList'(Data);
encode_disp('RoutingNumber',Data) -> 'enc_RoutingNumber'(Data);
encode_disp('ScfID',Data) -> 'enc_ScfID'(Data);
encode_disp('SCIBillingChargingCharacteristics',Data) -> 'enc_SCIBillingChargingCharacteristics'(Data);
encode_disp('SDSSinformation',Data) -> 'enc_SDSSinformation'(Data);
encode_disp('ServiceAddressInformation',Data) -> 'enc_ServiceAddressInformation'(Data);
encode_disp('ServiceInteractionIndicators',Data) -> 'enc_ServiceInteractionIndicators'(Data);
encode_disp('ServiceInteractionIndicatorsTwo',Data) -> 'enc_ServiceInteractionIndicatorsTwo'(Data);
encode_disp('ServiceKey',Data) -> 'enc_ServiceKey'(Data);
encode_disp('ServiceProfileIdentifier',Data) -> 'enc_ServiceProfileIdentifier'(Data);
encode_disp('ServingAreaID',Data) -> 'enc_ServingAreaID'(Data);
encode_disp('SFBillingChargingCharacteristics',Data) -> 'enc_SFBillingChargingCharacteristics'(Data);
encode_disp('SuspendTimer',Data) -> 'enc_SuspendTimer'(Data);
encode_disp('TDPIdentifier',Data) -> 'enc_TDPIdentifier'(Data);
encode_disp('TerminalType',Data) -> 'enc_TerminalType'(Data);
encode_disp('XTimerID',Data) -> 'enc_XTimerID'(Data);
encode_disp('TimerValue',Data) -> 'enc_TimerValue'(Data);
encode_disp('TraceInformation',Data) -> 'enc_TraceInformation'(Data);
encode_disp('TraceItem',Data) -> 'enc_TraceItem'(Data);
encode_disp('TravellingClassMark',Data) -> 'enc_TravellingClassMark'(Data);
encode_disp('TriggerDataIdentifier',Data) -> 'enc_TriggerDataIdentifier'(Data);
encode_disp('TriggerDPType',Data) -> 'enc_TriggerDPType'(Data);
encode_disp('TriggerResults',Data) -> 'enc_TriggerResults'(Data);
encode_disp('TriggerResult',Data) -> 'enc_TriggerResult'(Data);
encode_disp('Triggers',Data) -> 'enc_Triggers'(Data);
encode_disp('Trigger',Data) -> 'enc_Trigger'(Data);
encode_disp('TriggerStatus',Data) -> 'enc_TriggerStatus'(Data);
encode_disp('TriggerType',Data) -> 'enc_TriggerType'(Data);
encode_disp('USIInformation',Data) -> 'enc_USIInformation'(Data);
encode_disp('USIMonitorMode',Data) -> 'enc_USIMonitorMode'(Data);
encode_disp('USIServiceIndicator',Data) -> 'enc_USIServiceIndicator'(Data);
encode_disp('VPNIndicator',Data) -> 'enc_VPNIndicator'(Data);
encode_disp(Type,_Data) -> exit({error,{asn1,{undefined_type,Type}}}).


decode_disp('TriggerID',Data) -> 'dec_TriggerID'(Data);
decode_disp('TriggerData',Data) -> 'dec_TriggerData'(Data);
decode_disp('Extensions',Data) -> 'dec_Extensions'(Data);
decode_disp('ExtensionField',Data) -> 'dec_ExtensionField'(Data);
decode_disp('ExportLegsType',Data) -> 'dec_ExportLegsType'(Data);
decode_disp('Integer4',Data) -> 'dec_Integer4'(Data);
decode_disp('InvokeId',Data) -> 'dec_InvokeId'(Data);
decode_disp('Code',Data) -> 'dec_Code'(Data);
decode_disp('CollectedDigits',Data) -> 'dec_CollectedDigits'(Data);
decode_disp('CollectedInfo',Data) -> 'dec_CollectedInfo'(Data);
decode_disp('ElementaryMessageID',Data) -> 'dec_ElementaryMessageID'(Data);
decode_disp('ErrorTreatment',Data) -> 'dec_ErrorTreatment'(Data);
decode_disp('GapOnResource',Data) -> 'dec_GapOnResource'(Data);
decode_disp('InbandInfo',Data) -> 'dec_InbandInfo'(Data);
decode_disp('InformationToRecord',Data) -> 'dec_InformationToRecord'(Data);
decode_disp('InformationToSend',Data) -> 'dec_InformationToSend'(Data);
decode_disp('Language',Data) -> 'dec_Language'(Data);
decode_disp('MailBoxID',Data) -> 'dec_MailBoxID'(Data);
decode_disp('Media',Data) -> 'dec_Media'(Data);
decode_disp('MessageID',Data) -> 'dec_MessageID'(Data);
decode_disp('ReceivedStatus',Data) -> 'dec_ReceivedStatus'(Data);
decode_disp('RecordedMessageID',Data) -> 'dec_RecordedMessageID'(Data);
decode_disp('SRFGapCriteria',Data) -> 'dec_SRFGapCriteria'(Data);
decode_disp('Tone',Data) -> 'dec_Tone'(Data);
decode_disp('VariablePart',Data) -> 'dec_VariablePart'(Data);
decode_disp('AccessCode',Data) -> 'dec_AccessCode'(Data);
decode_disp('AChBillingChargingCharacteristics',Data) -> 'dec_AChBillingChargingCharacteristics'(Data);
decode_disp('ActionIndicator',Data) -> 'dec_ActionIndicator'(Data);
decode_disp('ActionOnProfile',Data) -> 'dec_ActionOnProfile'(Data);
decode_disp('ActionPerformed',Data) -> 'dec_ActionPerformed'(Data);
decode_disp('ActivableServices',Data) -> 'dec_ActivableServices'(Data);
decode_disp('AdditionalCallingPartyNumber',Data) -> 'dec_AdditionalCallingPartyNumber'(Data);
decode_disp('AdditionalCauseDescription',Data) -> 'dec_AdditionalCauseDescription'(Data);
decode_disp('SSFamily',Data) -> 'dec_SSFamily'(Data);
decode_disp('SORM',Data) -> 'dec_SORM'(Data);
decode_disp('SSNotification',Data) -> 'dec_SSNotification'(Data);
decode_disp('MediaId',Data) -> 'dec_MediaId'(Data);
decode_disp('AdditionalInformation',Data) -> 'dec_AdditionalInformation'(Data);
decode_disp('AdditionalISUP',Data) -> 'dec_AdditionalISUP'(Data);
decode_disp('AdditionalISUPParam',Data) -> 'dec_AdditionalISUPParam'(Data);
decode_disp('AdditionalMegaco',Data) -> 'dec_AdditionalMegaco'(Data);
decode_disp('AdditionalMegacoTransfer',Data) -> 'dec_AdditionalMegacoTransfer'(Data);
decode_disp('AdditionalMegacoConference',Data) -> 'dec_AdditionalMegacoConference'(Data);
decode_disp('AlertingPattern',Data) -> 'dec_AlertingPattern'(Data);
decode_disp('ApplicationTimer',Data) -> 'dec_ApplicationTimer'(Data);
decode_disp('AssistingSSPIPRoutingAddress',Data) -> 'dec_AssistingSSPIPRoutingAddress'(Data);
decode_disp('ATMTrafficDescriptor',Data) -> 'dec_ATMTrafficDescriptor'(Data);
decode_disp('BackwardGVNS',Data) -> 'dec_BackwardGVNS'(Data);
decode_disp('BackwardServiceInteractionInd',Data) -> 'dec_BackwardServiceInteractionInd'(Data);
decode_disp('BCSMEvent',Data) -> 'dec_BCSMEvent'(Data);
decode_disp('BearerCapability',Data) -> 'dec_BearerCapability'(Data);
decode_disp('BothwayThroughConnectionInd',Data) -> 'dec_BothwayThroughConnectionInd'(Data);
decode_disp('CalledDirectoryNumber',Data) -> 'dec_CalledDirectoryNumber'(Data);
decode_disp('CalledPartyBusinessGroupID',Data) -> 'dec_CalledPartyBusinessGroupID'(Data);
decode_disp('CalledPartySubaddress',Data) -> 'dec_CalledPartySubaddress'(Data);
decode_disp('CallingGeodeticLocation',Data) -> 'dec_CallingGeodeticLocation'(Data);
decode_disp('CallingPartyBusinessGroupID',Data) -> 'dec_CallingPartyBusinessGroupID'(Data);
decode_disp('CallingPartySubaddress',Data) -> 'dec_CallingPartySubaddress'(Data);
decode_disp('CallingPartysCategory',Data) -> 'dec_CallingPartysCategory'(Data);
decode_disp('CallProcessingOperationCorrelationID',Data) -> 'dec_CallProcessingOperationCorrelationID'(Data);
decode_disp('CallReference',Data) -> 'dec_CallReference'(Data);
decode_disp('CallResult',Data) -> 'dec_CallResult'(Data);
decode_disp('DTCallSegmentID',Data) -> 'dec_DTCallSegmentID'(Data);
decode_disp('Carrier',Data) -> 'dec_Carrier'(Data);
decode_disp('Cause',Data) -> 'dec_Cause'(Data);
decode_disp('CCSS',Data) -> 'dec_CCSS'(Data);
decode_disp('CGEncountered',Data) -> 'dec_CGEncountered'(Data);
decode_disp('ChargeNumber',Data) -> 'dec_ChargeNumber'(Data);
decode_disp('ChargingEvent',Data) -> 'dec_ChargingEvent'(Data);
decode_disp('CollectInformation',Data) -> 'dec_CollectInformation'(Data);
decode_disp('CollectNumberingPlan',Data) -> 'dec_CollectNumberingPlan'(Data);
decode_disp('Component',Data) -> 'dec_Component'(Data);
decode_disp('ComponentCorrelationID',Data) -> 'dec_ComponentCorrelationID'(Data);
decode_disp('ComponentType',Data) -> 'dec_ComponentType'(Data);
decode_disp('ConnectedNumberTreatmentInd',Data) -> 'dec_ConnectedNumberTreatmentInd'(Data);
decode_disp('ControlType',Data) -> 'dec_ControlType'(Data);
decode_disp('CorrelationID',Data) -> 'dec_CorrelationID'(Data);
decode_disp('CounterAndValue',Data) -> 'dec_CounterAndValue'(Data);
decode_disp('CounterID',Data) -> 'dec_CounterID'(Data);
decode_disp('CountersValue',Data) -> 'dec_CountersValue'(Data);
decode_disp('CreateOrRemoveIndicator',Data) -> 'dec_CreateOrRemoveIndicator'(Data);
decode_disp('CSAID',Data) -> 'dec_CSAID'(Data);
decode_disp('CutAndPaste',Data) -> 'dec_CutAndPaste'(Data);
decode_disp('DateAndTime',Data) -> 'dec_DateAndTime'(Data);
decode_disp('DefaultFaultHandling',Data) -> 'dec_DefaultFaultHandling'(Data);
decode_disp('DestinationRoutingAddress',Data) -> 'dec_DestinationRoutingAddress'(Data);
decode_disp('Digits',Data) -> 'dec_Digits'(Data);
decode_disp('DisplayInformation',Data) -> 'dec_DisplayInformation'(Data);
decode_disp('DpSpecificCommonParameters',Data) -> 'dec_DpSpecificCommonParameters'(Data);
decode_disp('DpSpecificCriteria',Data) -> 'dec_DpSpecificCriteria'(Data);
decode_disp('XDuration',Data) -> 'dec_XDuration'(Data);
decode_disp('Entry',Data) -> 'dec_Entry'(Data);
decode_disp('EventSpecificInformationBCSM',Data) -> 'dec_EventSpecificInformationBCSM'(Data);
decode_disp('EventSpecificInformationCharging',Data) -> 'dec_EventSpecificInformationCharging'(Data);
decode_disp('EventTypeBCSM',Data) -> 'dec_EventTypeBCSM'(Data);
decode_disp('EventTypeCharging',Data) -> 'dec_EventTypeCharging'(Data);
decode_disp('FacilityGroup',Data) -> 'dec_FacilityGroup'(Data);
decode_disp('FacilityGroupMember',Data) -> 'dec_FacilityGroupMember'(Data);
decode_disp('FCIBillingChargingCharacteristics',Data) -> 'dec_FCIBillingChargingCharacteristics'(Data);
decode_disp('FeatureCode',Data) -> 'dec_FeatureCode'(Data);
decode_disp('FeatureRequestIndicator',Data) -> 'dec_FeatureRequestIndicator'(Data);
decode_disp('FilteredCallTreatment',Data) -> 'dec_FilteredCallTreatment'(Data);
decode_disp('FilteringCharacteristics',Data) -> 'dec_FilteringCharacteristics'(Data);
decode_disp('FilteringCriteria',Data) -> 'dec_FilteringCriteria'(Data);
decode_disp('FilteringTimeOut',Data) -> 'dec_FilteringTimeOut'(Data);
decode_disp('ForwardCallIndicators',Data) -> 'dec_ForwardCallIndicators'(Data);
decode_disp('ForwardGVNS',Data) -> 'dec_ForwardGVNS'(Data);
decode_disp('ForwardingCondition',Data) -> 'dec_ForwardingCondition'(Data);
decode_disp('ForwardServiceInteractionInd',Data) -> 'dec_ForwardServiceInteractionInd'(Data);
decode_disp('GapCriteria',Data) -> 'dec_GapCriteria'(Data);
decode_disp('GapOnService',Data) -> 'dec_GapOnService'(Data);
decode_disp('GapIndicators',Data) -> 'dec_GapIndicators'(Data);
decode_disp('GapTreatment',Data) -> 'dec_GapTreatment'(Data);
decode_disp('GenericName',Data) -> 'dec_GenericName'(Data);
decode_disp('GenericNumber',Data) -> 'dec_GenericNumber'(Data);
decode_disp('GenericNumbers',Data) -> 'dec_GenericNumbers'(Data);
decode_disp('HighLayerCompatibility',Data) -> 'dec_HighLayerCompatibility'(Data);
decode_disp('HoldCause',Data) -> 'dec_HoldCause'(Data);
decode_disp('INprofile',Data) -> 'dec_INprofile'(Data);
decode_disp('INServiceCompatibilityIndication',Data) -> 'dec_INServiceCompatibilityIndication'(Data);
decode_disp('INServiceCompatibilityResponse',Data) -> 'dec_INServiceCompatibilityResponse'(Data);
decode_disp('Interval',Data) -> 'dec_Interval'(Data);
decode_disp('IPAvailable',Data) -> 'dec_IPAvailable'(Data);
decode_disp('IPRoutingAddress',Data) -> 'dec_IPRoutingAddress'(Data);
decode_disp('IPSSPCapabilities',Data) -> 'dec_IPSSPCapabilities'(Data);
decode_disp('ISDNAccessRelatedInformation',Data) -> 'dec_ISDNAccessRelatedInformation'(Data);
decode_disp('DTLegID',Data) -> 'dec_DTLegID'(Data);
decode_disp('DTLegType',Data) -> 'dec_DTLegType'(Data);
decode_disp('LocationNumber',Data) -> 'dec_LocationNumber'(Data);
decode_disp('MaximumNumberOfCounters',Data) -> 'dec_MaximumNumberOfCounters'(Data);
decode_disp('MidCallControlInfo',Data) -> 'dec_MidCallControlInfo'(Data);
decode_disp('MidCallInfo',Data) -> 'dec_MidCallInfo'(Data);
decode_disp('MidCallInfoType',Data) -> 'dec_MidCallInfoType'(Data);
decode_disp('DTMiscCallInfo',Data) -> 'dec_DTMiscCallInfo'(Data);
decode_disp('MonitorMode',Data) -> 'dec_MonitorMode'(Data);
decode_disp('NumberingPlan',Data) -> 'dec_NumberingPlan'(Data);
decode_disp('NumberOfDigits',Data) -> 'dec_NumberOfDigits'(Data);
decode_disp('OriginalCalledPartyID',Data) -> 'dec_OriginalCalledPartyID'(Data);
decode_disp('ProfileIdentifier',Data) -> 'dec_ProfileIdentifier'(Data);
decode_disp('QoSParameter',Data) -> 'dec_QoSParameter'(Data);
decode_disp('Reason',Data) -> 'dec_Reason'(Data);
decode_disp('RedirectingPartyID',Data) -> 'dec_RedirectingPartyID'(Data);
decode_disp('RedirectionInformation',Data) -> 'dec_RedirectionInformation'(Data);
decode_disp('RedirectReason',Data) -> 'dec_RedirectReason'(Data);
decode_disp('RegistratorIdentifier',Data) -> 'dec_RegistratorIdentifier'(Data);
decode_disp('ReportCondition',Data) -> 'dec_ReportCondition'(Data);
decode_disp('RequestedInformationList',Data) -> 'dec_RequestedInformationList'(Data);
decode_disp('RequestedInformationTypeList',Data) -> 'dec_RequestedInformationTypeList'(Data);
decode_disp('RequestedInformation',Data) -> 'dec_RequestedInformation'(Data);
decode_disp('RequestedInformationType',Data) -> 'dec_RequestedInformationType'(Data);
decode_disp('RequestedInformationValue',Data) -> 'dec_RequestedInformationValue'(Data);
decode_disp('RequestedUTSI',Data) -> 'dec_RequestedUTSI'(Data);
decode_disp('RequestedUTSIList',Data) -> 'dec_RequestedUTSIList'(Data);
decode_disp('ResourceID',Data) -> 'dec_ResourceID'(Data);
decode_disp('ResourceStatus',Data) -> 'dec_ResourceStatus'(Data);
decode_disp('ResponseCondition',Data) -> 'dec_ResponseCondition'(Data);
decode_disp('RouteList',Data) -> 'dec_RouteList'(Data);
decode_disp('RoutingNumber',Data) -> 'dec_RoutingNumber'(Data);
decode_disp('ScfID',Data) -> 'dec_ScfID'(Data);
decode_disp('SCIBillingChargingCharacteristics',Data) -> 'dec_SCIBillingChargingCharacteristics'(Data);
decode_disp('SDSSinformation',Data) -> 'dec_SDSSinformation'(Data);
decode_disp('ServiceAddressInformation',Data) -> 'dec_ServiceAddressInformation'(Data);
decode_disp('ServiceInteractionIndicators',Data) -> 'dec_ServiceInteractionIndicators'(Data);
decode_disp('ServiceInteractionIndicatorsTwo',Data) -> 'dec_ServiceInteractionIndicatorsTwo'(Data);
decode_disp('ServiceKey',Data) -> 'dec_ServiceKey'(Data);
decode_disp('ServiceProfileIdentifier',Data) -> 'dec_ServiceProfileIdentifier'(Data);
decode_disp('ServingAreaID',Data) -> 'dec_ServingAreaID'(Data);
decode_disp('SFBillingChargingCharacteristics',Data) -> 'dec_SFBillingChargingCharacteristics'(Data);
decode_disp('SuspendTimer',Data) -> 'dec_SuspendTimer'(Data);
decode_disp('TDPIdentifier',Data) -> 'dec_TDPIdentifier'(Data);
decode_disp('TerminalType',Data) -> 'dec_TerminalType'(Data);
decode_disp('XTimerID',Data) -> 'dec_XTimerID'(Data);
decode_disp('TimerValue',Data) -> 'dec_TimerValue'(Data);
decode_disp('TraceInformation',Data) -> 'dec_TraceInformation'(Data);
decode_disp('TraceItem',Data) -> 'dec_TraceItem'(Data);
decode_disp('TravellingClassMark',Data) -> 'dec_TravellingClassMark'(Data);
decode_disp('TriggerDataIdentifier',Data) -> 'dec_TriggerDataIdentifier'(Data);
decode_disp('TriggerDPType',Data) -> 'dec_TriggerDPType'(Data);
decode_disp('TriggerResults',Data) -> 'dec_TriggerResults'(Data);
decode_disp('TriggerResult',Data) -> 'dec_TriggerResult'(Data);
decode_disp('Triggers',Data) -> 'dec_Triggers'(Data);
decode_disp('Trigger',Data) -> 'dec_Trigger'(Data);
decode_disp('TriggerStatus',Data) -> 'dec_TriggerStatus'(Data);
decode_disp('TriggerType',Data) -> 'dec_TriggerType'(Data);
decode_disp('USIInformation',Data) -> 'dec_USIInformation'(Data);
decode_disp('USIMonitorMode',Data) -> 'dec_USIMonitorMode'(Data);
decode_disp('USIServiceIndicator',Data) -> 'dec_USIServiceIndicator'(Data);
decode_disp('VPNIndicator',Data) -> 'dec_VPNIndicator'(Data);
decode_disp(Type,_Data) -> exit({error,{asn1,{undefined_type,Type}}}).




info() ->
   case ?MODULE:module_info(attributes) of
     Attributes when is_list(Attributes) ->
       case lists:keyfind(asn1_info, 1, Attributes) of
         {_,Info} when is_list(Info) ->
           Info;
         _ ->
           []
       end;
     _ ->
       []
   end.


%%================================
%%  TriggerID
%%================================
'enc_TriggerID'(Val) ->
    'enc_TriggerID'(Val, [<<2>>]).

'enc_TriggerID'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_TriggerID'(Tlv) ->
   'dec_TriggerID'(Tlv, [2]).

'dec_TriggerID'(Tlv, TagIn) ->
decode_integer(Tlv, TagIn).



%%================================
%%  TriggerData
%%================================
'enc_TriggerData'(Val) ->
    'enc_TriggerData'(Val, [<<48>>]).

'enc_TriggerData'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_TriggerData_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_TriggerData_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_TriggerData_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = encode_integer(H, [<<2>>]),
   'enc_TriggerData_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_TriggerData'(Tlv) ->
   'dec_TriggerData'(Tlv, [16]).

'dec_TriggerData'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[decode_integer(V1, [2]) || V1 <- Tlv1].




%%================================
%%  Extensions
%%================================
'enc_Extensions'(Val) ->
    'enc_Extensions'(Val, [<<48>>]).

'enc_Extensions'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = encode_restricted_string(H, [<<4>>]),
   'enc_Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_Extensions'(Tlv) ->
   'dec_Extensions'(Tlv, [16]).

'dec_Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[decode_octet_string(V1, [4]) || V1 <- Tlv1].




%%================================
%%  ExtensionField
%%================================
'enc_ExtensionField'(Val) ->
    'enc_ExtensionField'(Val, [<<4>>]).

'enc_ExtensionField'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_ExtensionField'(Tlv) ->
   'dec_ExtensionField'(Tlv, [4]).

'dec_ExtensionField'(Tlv, TagIn) ->
decode_octet_string(Tlv, TagIn).



%%================================
%%  ExportLegsType
%%================================
'enc_ExportLegsType'(Val) ->
    'enc_ExportLegsType'(Val, [<<48>>]).

'enc_ExportLegsType'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_ExportLegsType_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ExportLegsType_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ExportLegsType_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_ExportLegsType_SEQOF'(H, [<<48>>]),
   'enc_ExportLegsType_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  ExportLegsType_SEQOF
%%================================
'enc_ExportLegsType_SEQOF'(Val, TagIn) ->
   {_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute sourceLeg(1)   External INCS3datatypes:DTLegID
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_DTLegID'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute newLeg(2)   External INCS3datatypes:DTLegID
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_DTLegID'(Cindex2, [<<161>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_ExportLegsType'(Tlv) ->
   'dec_ExportLegsType'(Tlv, [16]).

'dec_ExportLegsType'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_ExportLegsType_SEQOF'(V1, [16]) || V1 <- Tlv1].


'dec_ExportLegsType_SEQOF'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute sourceLeg(1)   External INCS3datatypes:DTLegID
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_DTLegID'(V1, [131072]),

%%-------------------------------------------------
%% attribute newLeg(2)   External INCS3datatypes:DTLegID
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_DTLegID'(V2, [131073]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'ExportLegsType_SEQOF', Term1, Term2}.



%%================================
%%  Integer4
%%================================
'enc_Integer4'(Val) ->
    'enc_Integer4'(Val, [<<2>>]).

'enc_Integer4'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_Integer4'(Tlv) ->
   'dec_Integer4'(Tlv, [2]).

'dec_Integer4'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 2147483647 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  InvokeId
%%================================
'enc_InvokeId'(Val) ->
    'enc_InvokeId'(Val, [<<2>>]).

'enc_InvokeId'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_InvokeId'(Tlv) ->
   'dec_InvokeId'(Tlv, [2]).

'dec_InvokeId'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if -128 =< Val1, Val1 =< 127 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  Code
%%================================
'enc_Code'(Val) ->
    'enc_Code'(Val, []).

'enc_Code'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      local ->
         encode_integer(element(2,Val), [<<2>>]);
      global ->
         encode_object_identifier(element(2,Val), [<<6>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_Code'(Tlv) ->
   'dec_Code'(Tlv, []).

'dec_Code'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'local'
    {2, V1} -> 
        {local, decode_integer(V1, [])};


%% 'global'
    {6, V1} -> 
        {global, decode_object_identifier(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  CollectedDigits
%%================================
'enc_CollectedDigits'(Val) ->
    'enc_CollectedDigits'(Val, [<<48>>]).

'enc_CollectedDigits'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8, Cindex9, Cindex10, Cindex11, Cindex12} = Val,

%%-------------------------------------------------
%% attribute minimumNbOfDigits(1) with type INTEGER DEFAULT = 1
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_DEFAULT -> {<<>>,0};
         1 -> {<<>>,0};
         _ ->
            encode_integer(Cindex1, [<<128>>])
       end,

%%-------------------------------------------------
%% attribute maximumNbOfDigits(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute endOfReplyDigit(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute cancelDigit(4) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex4, [<<131>>])
       end,

%%-------------------------------------------------
%% attribute startDigit(5) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex5, [<<132>>])
       end,

%%-------------------------------------------------
%% attribute firstDigitTimeOut(6) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex6, [<<133>>])
       end,

%%-------------------------------------------------
%% attribute interDigitTimeOut(7) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex7, [<<134>>])
       end,

%%-------------------------------------------------
%% attribute errorTreatment(8) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes8,EncLen8} = case Cindex8 of
reportErrorToScf -> encode_tags([<<135>>], [0], 1);
help -> encode_tags([<<135>>], [1], 1);
repeatPrompt -> encode_tags([<<135>>], [2], 1);
Enumval8 -> exit({error,{asn1, {enumerated_not_in_range,Enumval8}}})
end,

%%-------------------------------------------------
%% attribute interruptableAnnInd(9) with type BOOLEAN DEFAULT = true
%%-------------------------------------------------
   {EncBytes9,EncLen9} =  case Cindex9 of
         asn1_DEFAULT -> {<<>>,0};
         true -> {<<>>,0};
         _ ->
            encode_boolean(Cindex9, [<<136>>])
       end,

%%-------------------------------------------------
%% attribute voiceInformation(10) with type BOOLEAN DEFAULT = false
%%-------------------------------------------------
   {EncBytes10,EncLen10} =  case Cindex10 of
         asn1_DEFAULT -> {<<>>,0};
         false -> {<<>>,0};
         _ ->
            encode_boolean(Cindex10, [<<137>>])
       end,

%%-------------------------------------------------
%% attribute voiceBack(11) with type BOOLEAN DEFAULT = false
%%-------------------------------------------------
   {EncBytes11,EncLen11} =  case Cindex11 of
         asn1_DEFAULT -> {<<>>,0};
         false -> {<<>>,0};
         _ ->
            encode_boolean(Cindex11, [<<138>>])
       end,

%%-------------------------------------------------
%% attribute detectModem(12) with type BOOLEAN DEFAULT = false
%%-------------------------------------------------
   {EncBytes12,EncLen12} =  case Cindex12 of
         asn1_DEFAULT -> {<<>>,0};
         false -> {<<>>,0};
         _ ->
            encode_boolean(Cindex12, [<<139>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10, EncBytes11, EncBytes12],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10 + EncLen11 + EncLen12,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_CollectedDigits'(Tlv) ->
   'dec_CollectedDigits'(Tlv, [16]).

'dec_CollectedDigits'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute minimumNbOfDigits(1) with type INTEGER DEFAULT = 1
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {begin
Val1 = decode_integer(V1, []),
if 1 =< Val1, Val1 =< 127 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv2};
    _ ->
        {1,Tlv1}
end,

%%-------------------------------------------------
%% attribute maximumNbOfDigits(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [131073]),
if 1 =< Val2, Val2 =< 127 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute endOfReplyDigit(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {begin
Val3 = decode_octet_string(V3, []),
C1 = byte_size(Val3),
if 1 =< C1, C1 =< 2 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute cancelDigit(4) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {begin
Val4 = decode_octet_string(V4, []),
C2 = byte_size(Val4),
if 1 =< C2, C2 =< 2 ->
Val4;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute startDigit(5) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {begin
Val5 = decode_octet_string(V5, []),
C3 = byte_size(Val5),
if 1 =< C3, C3 =< 2 ->
Val5;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute firstDigitTimeOut(6) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {begin
Val6 = decode_integer(V6, []),
if 1 =< Val6, Val6 =< 127 ->
Val6;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute interDigitTimeOut(7) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {begin
Val7 = decode_integer(V7, []),
if 1 =< Val7, Val7 =< 127 ->
Val7;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

%%-------------------------------------------------
%% attribute errorTreatment(8) with type ENUMERATED
%%-------------------------------------------------
[V8|Tlv9] = Tlv8, 
Term8 = case decode_integer(V8, [131079]) of
0 -> reportErrorToScf;
1 -> help;
2 -> repeatPrompt;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute interruptableAnnInd(9) with type BOOLEAN DEFAULT = true
%%-------------------------------------------------
{Term9,Tlv10} = case Tlv9 of
[{131080,V9}|TempTlv10] ->
    {decode_boolean(V9, []), TempTlv10};
    _ ->
        {true,Tlv9}
end,

%%-------------------------------------------------
%% attribute voiceInformation(10) with type BOOLEAN DEFAULT = false
%%-------------------------------------------------
{Term10,Tlv11} = case Tlv10 of
[{131081,V10}|TempTlv11] ->
    {decode_boolean(V10, []), TempTlv11};
    _ ->
        {false,Tlv10}
end,

%%-------------------------------------------------
%% attribute voiceBack(11) with type BOOLEAN DEFAULT = false
%%-------------------------------------------------
{Term11,Tlv12} = case Tlv11 of
[{131082,V11}|TempTlv12] ->
    {decode_boolean(V11, []), TempTlv12};
    _ ->
        {false,Tlv11}
end,

%%-------------------------------------------------
%% attribute detectModem(12) with type BOOLEAN DEFAULT = false
%%-------------------------------------------------
{Term12,Tlv13} = case Tlv12 of
[{131083,V12}|TempTlv13] ->
    {decode_boolean(V12, []), TempTlv13};
    _ ->
        {false,Tlv12}
end,

case Tlv13 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv13}}}) % extra fields not allowed
end,
   {'CollectedDigits', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9, Term10, Term11, Term12}.



%%================================
%%  CollectedInfo
%%================================
'enc_CollectedInfo'(Val) ->
    'enc_CollectedInfo'(Val, []).

'enc_CollectedInfo'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      collectedDigits ->
         'enc_CollectedDigits'(element(2,Val), [<<160>>]);
      iA5Information ->
         encode_boolean(element(2,Val), [<<129>>]);
      detectModem ->
         encode_boolean(element(2,Val), [<<130>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_CollectedInfo'(Tlv) ->
   'dec_CollectedInfo'(Tlv, []).

'dec_CollectedInfo'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'collectedDigits'
    {131072, V1} -> 
        {collectedDigits, 'dec_CollectedDigits'(V1, [])};


%% 'iA5Information'
    {131073, V1} -> 
        {iA5Information, decode_boolean(V1, [])};


%% 'detectModem'
    {131074, V1} -> 
        {detectModem, decode_boolean(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  ElementaryMessageID
%%================================
'enc_ElementaryMessageID'(Val) ->
    'enc_ElementaryMessageID'(Val, [<<2>>]).

'enc_ElementaryMessageID'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_ElementaryMessageID'(Tlv) ->
   'dec_ElementaryMessageID'(Tlv, [2]).

'dec_ElementaryMessageID'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 2147483647 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  ErrorTreatment
%%================================
'enc_ErrorTreatment'(Val) ->
    'enc_ErrorTreatment'(Val, [<<10>>]).

'enc_ErrorTreatment'(Val, TagIn) ->
case Val of
reportErrorToScf -> encode_tags(TagIn, [0], 1);
help -> encode_tags(TagIn, [1], 1);
repeatPrompt -> encode_tags(TagIn, [2], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_ErrorTreatment'(Tlv) ->
   'dec_ErrorTreatment'(Tlv, [10]).

'dec_ErrorTreatment'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> reportErrorToScf;
1 -> help;
2 -> repeatPrompt;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  GapOnResource
%%================================
'enc_GapOnResource'(Val) ->
    'enc_GapOnResource'(Val, []).

'enc_GapOnResource'(Val, TagIn) ->
   'enc_Code'(Val, TagIn).


'dec_GapOnResource'(Tlv) ->
   'dec_GapOnResource'(Tlv, []).

'dec_GapOnResource'(Tlv, TagIn) ->
'dec_Code'(Tlv, TagIn).



%%================================
%%  InbandInfo
%%================================
'enc_InbandInfo'(Val) ->
    'enc_InbandInfo'(Val, [<<48>>]).

'enc_InbandInfo'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5} = Val,

%%-------------------------------------------------
%% attribute messageID(1)   External INCS3datatypes:MessageID
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_MessageID'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute numberOfRepetitions(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute duration(3) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute interval(4) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex4, [<<131>>])
       end,

%%-------------------------------------------------
%% attribute preferredLanguage(5) with type PrintableString OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex5, [<<132>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_InbandInfo'(Tlv) ->
   'dec_InbandInfo'(Tlv, [16]).

'dec_InbandInfo'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute messageID(1)   External INCS3datatypes:MessageID
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_MessageID'(V1, [131072]),

%%-------------------------------------------------
%% attribute numberOfRepetitions(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
Val1 = decode_integer(V2, []),
if 1 =< Val1, Val1 =< 127 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute duration(3) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {begin
Val2 = decode_integer(V3, []),
if 0 =< Val2, Val2 =< 32767 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute interval(4) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {begin
Val3 = decode_integer(V4, []),
if 0 =< Val3, Val3 =< 32767 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute preferredLanguage(5) with type PrintableString OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {begin
Val4 = decode_restricted_string(V5, []),
C1 = byte_size(Val4),
if C1 =:= 3 ->
binary_to_list(Val4);
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

case Tlv6 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv6}}}) % extra fields not allowed
end,
   {'InbandInfo', Term1, Term2, Term3, Term4, Term5}.



%%================================
%%  InformationToRecord
%%================================
'enc_InformationToRecord'(Val) ->
    'enc_InformationToRecord'(Val, [<<48>>]).

'enc_InformationToRecord'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute messageID(1) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex1, [<<128>>])
       end,

%%-------------------------------------------------
%% attribute messageDeletionTimeOut(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute timeToRecord(3) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex3, [<<131>>])
       end,

%%-------------------------------------------------
%% attribute controlDigits(4) with type SEQUENCE
%%-------------------------------------------------
   {EncBytes4,EncLen4} = 'enc_InformationToRecord_controlDigits'(Cindex4, [<<164>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  InformationToRecord_controlDigits
%%================================
'enc_InformationToRecord_controlDigits'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6} = Val,

%%-------------------------------------------------
%% attribute endOfRecordingDigit(1) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex1, [<<128>>])
       end,

%%-------------------------------------------------
%% attribute cancelDigit(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute replayDigit(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute restartRecordingDigit(4) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex4, [<<131>>])
       end,

%%-------------------------------------------------
%% attribute restartAllowed(5) with type BOOLEAN DEFAULT = false
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_DEFAULT -> {<<>>,0};
         false -> {<<>>,0};
         _ ->
            encode_boolean(Cindex5, [<<132>>])
       end,

%%-------------------------------------------------
%% attribute replayAllowed(6) with type BOOLEAN DEFAULT = false
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_DEFAULT -> {<<>>,0};
         false -> {<<>>,0};
         _ ->
            encode_boolean(Cindex6, [<<133>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_InformationToRecord'(Tlv) ->
   'dec_InformationToRecord'(Tlv, [16]).

'dec_InformationToRecord'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute messageID(1) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {begin
Val1 = decode_integer(V1, []),
if 0 =< Val1, Val1 =< 2147483647 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute messageDeletionTimeOut(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
Val2 = decode_integer(V2, []),
if 1 =< Val2, Val2 =< 3600 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute timeToRecord(3) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131075,V3}|TempTlv4] ->
    {begin
Val3 = decode_integer(V3, []),
if 0 =< Val3, Val3 =< 27 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute controlDigits(4) with type SEQUENCE
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = 'dec_InformationToRecord_controlDigits'(V4, [131076]),

case Tlv5 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed
end,
   {'InformationToRecord', Term1, Term2, Term3, Term4}.

'dec_InformationToRecord_controlDigits'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute endOfRecordingDigit(1) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {begin
Val1 = decode_octet_string(V1, []),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 2 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute cancelDigit(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
Val2 = decode_octet_string(V2, []),
C2 = byte_size(Val2),
if 1 =< C2, C2 =< 2 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute replayDigit(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {begin
Val3 = decode_octet_string(V3, []),
C3 = byte_size(Val3),
if 1 =< C3, C3 =< 2 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute restartRecordingDigit(4) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {begin
Val4 = decode_octet_string(V4, []),
C4 = byte_size(Val4),
if 1 =< C4, C4 =< 2 ->
Val4;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute restartAllowed(5) with type BOOLEAN DEFAULT = false
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {decode_boolean(V5, []), TempTlv6};
    _ ->
        {false,Tlv5}
end,

%%-------------------------------------------------
%% attribute replayAllowed(6) with type BOOLEAN DEFAULT = false
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {decode_boolean(V6, []), TempTlv7};
    _ ->
        {false,Tlv6}
end,

case Tlv7 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv7}}}) % extra fields not allowed
end,
   {'InformationToRecord_controlDigits', Term1, Term2, Term3, Term4, Term5, Term6}.



%%================================
%%  InformationToSend
%%================================
'enc_InformationToSend'(Val) ->
    'enc_InformationToSend'(Val, []).

'enc_InformationToSend'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      inbandInfo ->
         'enc_InbandInfo'(element(2,Val), [<<160>>]);
      tone ->
         'enc_Tone'(element(2,Val), [<<161>>]);
      displayInformation ->
         encode_restricted_string(element(2,Val), [<<130>>]);
      sDSSinformation ->
         encode_restricted_string(element(2,Val), [<<131>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_InformationToSend'(Tlv) ->
   'dec_InformationToSend'(Tlv, []).

'dec_InformationToSend'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'inbandInfo'
    {131072, V1} -> 
        {inbandInfo, 'dec_InbandInfo'(V1, [])};


%% 'tone'
    {131073, V1} -> 
        {tone, 'dec_Tone'(V1, [])};


%% 'displayInformation'
    {131074, V1} -> 
        {displayInformation, begin
Val1 = decode_restricted_string(V1, []),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 27 ->
binary_to_list(Val1);
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'sDSSinformation'
    {131075, V1} -> 
        {sDSSinformation, begin
Val2 = decode_octet_string(V1, []),
C2 = byte_size(Val2),
if 1 =< C2, C2 =< 27 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  Language
%%================================
'enc_Language'(Val) ->
    'enc_Language'(Val, [<<19>>]).

'enc_Language'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_Language'(Tlv) ->
   'dec_Language'(Tlv, [19]).

'dec_Language'(Tlv, TagIn) ->
begin
Val1 = decode_restricted_string(Tlv, TagIn),
C1 = byte_size(Val1),
if C1 =:= 3 ->
binary_to_list(Val1);
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  MailBoxID
%%================================
'enc_MailBoxID'(Val) ->
    'enc_MailBoxID'(Val, [<<4>>]).

'enc_MailBoxID'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_MailBoxID'(Tlv) ->
   'dec_MailBoxID'(Tlv, [4]).

'dec_MailBoxID'(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 27 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  Media
%%================================
'enc_Media'(Val) ->
    'enc_Media'(Val, [<<10>>]).

'enc_Media'(Val, TagIn) ->
case Val of
voiceMail -> encode_tags(TagIn, [0], 1);
faxGroup3 -> encode_tags(TagIn, [1], 1);
faxGroup4 -> encode_tags(TagIn, [2], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_Media'(Tlv) ->
   'dec_Media'(Tlv, [10]).

'dec_Media'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> voiceMail;
1 -> faxGroup3;
2 -> faxGroup4;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  MessageID
%%================================
'enc_MessageID'(Val) ->
    'enc_MessageID'(Val, []).

'enc_MessageID'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      elementaryMessageID ->
         encode_integer(element(2,Val), [<<128>>]);
      text ->
         'enc_MessageID_text'(element(2,Val), [<<161>>]);
      elementaryMessageIDs ->
         'enc_MessageID_elementaryMessageIDs'(element(2,Val), [<<189>>]);
      variableMessage ->
         'enc_MessageID_variableMessage'(element(2,Val), [<<190>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  MessageID_text
%%================================
'enc_MessageID_text'(Val, TagIn) ->
   {_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute messageContent(1) with type IA5String
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute attributes(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex2, [<<129>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  MessageID_elementaryMessageIDs
%%================================
'enc_MessageID_elementaryMessageIDs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_MessageID_elementaryMessageIDs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_MessageID_elementaryMessageIDs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_MessageID_elementaryMessageIDs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = encode_integer(H, [<<2>>]),
   'enc_MessageID_elementaryMessageIDs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  MessageID_variableMessage
%%================================
'enc_MessageID_variableMessage'(Val, TagIn) ->
   {_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute elementaryMessageID(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute variableParts(2) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_MessageID_variableMessage_variableParts'(Cindex2, [<<161>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  MessageID_variableMessage_variableParts
%%================================
'enc_MessageID_variableMessage_variableParts'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_MessageID_variableMessage_variableParts_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_MessageID_variableMessage_variableParts_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_MessageID_variableMessage_variableParts_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_VariablePart'(H, []),
   'enc_MessageID_variableMessage_variableParts_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_MessageID'(Tlv) ->
   'dec_MessageID'(Tlv, []).

'dec_MessageID'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'elementaryMessageID'
    {131072, V1} -> 
        {elementaryMessageID, begin
Val1 = decode_integer(V1, []),
if 0 =< Val1, Val1 =< 2147483647 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'text'
    {131073, V1} -> 
        {text, 'dec_MessageID_text'(V1, [])};


%% 'elementaryMessageIDs'
    {131101, V1} -> 
        {elementaryMessageIDs, 'dec_MessageID_elementaryMessageIDs'(V1, [])};


%% 'variableMessage'
    {131102, V1} -> 
        {variableMessage, 'dec_MessageID_variableMessage'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.
'dec_MessageID_text'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute messageContent(1) with type IA5String
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_restricted_string(V1, [131072]),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 27 ->
binary_to_list(Val1);
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute attributes(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
Val2 = decode_octet_string(V2, []),
C2 = byte_size(Val2),
if 1 =< C2, C2 =< 27 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'MessageID_text', Term1, Term2}.

'dec_MessageID_elementaryMessageIDs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[begin
Val1 = decode_integer(V1, [2]),
if 0 =< Val1, Val1 =< 2147483647 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end || V1 <- Tlv1].


'dec_MessageID_variableMessage'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute elementaryMessageID(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 2147483647 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute variableParts(2) with type SEQUENCE OF
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_MessageID_variableMessage_variableParts'(V2, [131073]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'MessageID_variableMessage', Term1, Term2}.

'dec_MessageID_variableMessage_variableParts'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_VariablePart'(V1, []) || V1 <- Tlv1].




%%================================
%%  ReceivedStatus
%%================================
'enc_ReceivedStatus'(Val) ->
    'enc_ReceivedStatus'(Val, [<<10>>]).

'enc_ReceivedStatus'(Val, TagIn) ->
case Val of
messageComplete -> encode_tags(TagIn, [0], 1);
messageInterrupted -> encode_tags(TagIn, [1], 1);
messageTimeOut -> encode_tags(TagIn, [2], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_ReceivedStatus'(Tlv) ->
   'dec_ReceivedStatus'(Tlv, [10]).

'dec_ReceivedStatus'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> messageComplete;
1 -> messageInterrupted;
2 -> messageTimeOut;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  RecordedMessageID
%%================================
'enc_RecordedMessageID'(Val) ->
    'enc_RecordedMessageID'(Val, [<<2>>]).

'enc_RecordedMessageID'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_RecordedMessageID'(Tlv) ->
   'dec_RecordedMessageID'(Tlv, [2]).

'dec_RecordedMessageID'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 2147483647 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  SRFGapCriteria
%%================================
'enc_SRFGapCriteria'(Val) ->
    'enc_SRFGapCriteria'(Val, []).

'enc_SRFGapCriteria'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      iPAddressValue ->
         encode_restricted_string(element(2,Val), [<<129>>]);
      gapOnResource ->
         'enc_GapOnResource'(element(2,Val), [<<162>>]);
      iPAddressAndresource ->
         'enc_SRFGapCriteria_iPAddressAndresource'(element(2,Val), [<<163>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  SRFGapCriteria_iPAddressAndresource
%%================================
'enc_SRFGapCriteria_iPAddressAndresource'(Val, TagIn) ->
   {_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute iPAddressValue(1) with type PrintableString
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<129>>]),

%%-------------------------------------------------
%% attribute gapOnResource(2)   External INCS3datatypes:GapOnResource
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_GapOnResource'(Cindex2, [<<162>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_SRFGapCriteria'(Tlv) ->
   'dec_SRFGapCriteria'(Tlv, []).

'dec_SRFGapCriteria'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'iPAddressValue'
    {131073, V1} -> 
        {iPAddressValue, begin
binary_to_list(decode_restricted_string(V1, []))
end
};


%% 'gapOnResource'
    {131074, V1} -> 
        {gapOnResource, 'dec_GapOnResource'(V1, [])};


%% 'iPAddressAndresource'
    {131075, V1} -> 
        {iPAddressAndresource, 'dec_SRFGapCriteria_iPAddressAndresource'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.
'dec_SRFGapCriteria_iPAddressAndresource'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute iPAddressValue(1) with type PrintableString
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
binary_to_list(decode_restricted_string(V1, [131073]))
end
,

%%-------------------------------------------------
%% attribute gapOnResource(2)   External INCS3datatypes:GapOnResource
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_GapOnResource'(V2, [131074]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'SRFGapCriteria_iPAddressAndresource', Term1, Term2}.



%%================================
%%  Tone
%%================================
'enc_Tone'(Val) ->
    'enc_Tone'(Val, [<<48>>]).

'enc_Tone'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute toneID(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute duration(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex2, [<<129>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_Tone'(Tlv) ->
   'dec_Tone'(Tlv, [16]).

'dec_Tone'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute toneID(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 2147483647 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute duration(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
Val2 = decode_integer(V2, []),
if 0 =< Val2, Val2 =< 2147483647 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'Tone', Term1, Term2}.



%%================================
%%  VariablePart
%%================================
'enc_VariablePart'(Val) ->
    'enc_VariablePart'(Val, []).

'enc_VariablePart'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      integer ->
         encode_integer(element(2,Val), [<<128>>]);
      number ->
         encode_restricted_string(element(2,Val), [<<129>>]);
      time ->
         encode_restricted_string(element(2,Val), [<<130>>]);
      date ->
         encode_restricted_string(element(2,Val), [<<131>>]);
      price ->
         encode_restricted_string(element(2,Val), [<<132>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_VariablePart'(Tlv) ->
   'dec_VariablePart'(Tlv, []).

'dec_VariablePart'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'integer'
    {131072, V1} -> 
        {integer, begin
Val1 = decode_integer(V1, []),
if 0 =< Val1, Val1 =< 2147483647 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'number'
    {131073, V1} -> 
        {number, begin
binary_to_list(decode_restricted_string(V1, []))
end
};


%% 'time'
    {131074, V1} -> 
        {time, begin
Val2 = decode_octet_string(V1, []),
C1 = byte_size(Val2),
if C1 =:= 2 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'date'
    {131075, V1} -> 
        {date, begin
Val3 = decode_octet_string(V1, []),
C2 = byte_size(Val3),
if C2 =:= 3 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'price'
    {131076, V1} -> 
        {price, begin
Val4 = decode_octet_string(V1, []),
C3 = byte_size(Val4),
if C3 =:= 4 ->
Val4;
true ->
exit({error,{asn1,bad_range}})
end
end};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  AccessCode
%%================================
'enc_AccessCode'(Val) ->
    'enc_AccessCode'(Val, [<<4>>]).

'enc_AccessCode'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_AccessCode'(Tlv) ->
   'dec_AccessCode'(Tlv, [4]).

'dec_AccessCode'(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 27 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  AChBillingChargingCharacteristics
%%================================
'enc_AChBillingChargingCharacteristics'(Val) ->
    'enc_AChBillingChargingCharacteristics'(Val, [<<4>>]).

'enc_AChBillingChargingCharacteristics'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_AChBillingChargingCharacteristics'(Tlv) ->
   'dec_AChBillingChargingCharacteristics'(Tlv, [4]).

'dec_AChBillingChargingCharacteristics'(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 27 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  ActionIndicator
%%================================
'enc_ActionIndicator'(Val) ->
    'enc_ActionIndicator'(Val, [<<10>>]).

'enc_ActionIndicator'(Val, TagIn) ->
case Val of
activate -> encode_tags(TagIn, [1], 1);
deactivate -> encode_tags(TagIn, [2], 1);
retrieve -> encode_tags(TagIn, [3], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_ActionIndicator'(Tlv) ->
   'dec_ActionIndicator'(Tlv, [10]).

'dec_ActionIndicator'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
1 -> activate;
2 -> deactivate;
3 -> retrieve;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  ActionOnProfile
%%================================
'enc_ActionOnProfile'(Val) ->
    'enc_ActionOnProfile'(Val, [<<10>>]).

'enc_ActionOnProfile'(Val, TagIn) ->
case Val of
activate -> encode_tags(TagIn, [0], 1);
deactivate -> encode_tags(TagIn, [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_ActionOnProfile'(Tlv) ->
   'dec_ActionOnProfile'(Tlv, [10]).

'dec_ActionOnProfile'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> activate;
1 -> deactivate;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  ActionPerformed
%%================================
'enc_ActionPerformed'(Val) ->
    'enc_ActionPerformed'(Val, [<<10>>]).

'enc_ActionPerformed'(Val, TagIn) ->
case Val of
activated -> encode_tags(TagIn, [1], 1);
deactivated -> encode_tags(TagIn, [2], 1);
alreadyActive -> encode_tags(TagIn, [3], 1);
alreadyInactive -> encode_tags(TagIn, [4], 1);
isActive -> encode_tags(TagIn, [5], 1);
isInactive -> encode_tags(TagIn, [6], 1);
tDPunknown -> encode_tags(TagIn, [7], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_ActionPerformed'(Tlv) ->
   'dec_ActionPerformed'(Tlv, [10]).

'dec_ActionPerformed'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
1 -> activated;
2 -> deactivated;
3 -> alreadyActive;
4 -> alreadyInactive;
5 -> isActive;
6 -> isInactive;
7 -> tDPunknown;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  ActivableServices
%%================================
'enc_ActivableServices'(Val) ->
    'enc_ActivableServices'(Val, [<<3>>]).

'enc_ActivableServices'(Val, TagIn) ->
encode_named_bit_string(Val, [{callingLineIdentificationPresentation,1},{callingLineIdentificationRestriction,2},{connectedLineIdentificationPresentation,3},{connectedLineIdentificationRestriction,4},{callForwardingOnNoReply,5},{callForwardingUnconditional,6},{callForwardingOnBusy,7},{callForwardingOnNotReachable,8},{reverseCharging,9},{adviceOfChargeOnStart,10},{adviceOfChargeAtEnd,11},{adviceOfChargeDuringCall,12},{timeDependentRouting,13},{callingPartingDependentRouting,14},{outgoingCallBarring,15},{incomingCallBarring,16}], TagIn).


'dec_ActivableServices'(Tlv) ->
   'dec_ActivableServices'(Tlv, [3]).

'dec_ActivableServices'(Tlv, TagIn) ->
decode_named_bit_string(Tlv, [{callingLineIdentificationPresentation,1},{callingLineIdentificationRestriction,2},{connectedLineIdentificationPresentation,3},{connectedLineIdentificationRestriction,4},{callForwardingOnNoReply,5},{callForwardingUnconditional,6},{callForwardingOnBusy,7},{callForwardingOnNotReachable,8},{reverseCharging,9},{adviceOfChargeOnStart,10},{adviceOfChargeAtEnd,11},{adviceOfChargeDuringCall,12},{timeDependentRouting,13},{callingPartingDependentRouting,14},{outgoingCallBarring,15},{incomingCallBarring,16}], TagIn).



%%================================
%%  AdditionalCallingPartyNumber
%%================================
'enc_AdditionalCallingPartyNumber'(Val) ->
    'enc_AdditionalCallingPartyNumber'(Val, [<<19>>]).

'enc_AdditionalCallingPartyNumber'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_AdditionalCallingPartyNumber'(Tlv) ->
   'dec_AdditionalCallingPartyNumber'(Tlv, [19]).

'dec_AdditionalCallingPartyNumber'(Tlv, TagIn) ->
begin
binary_to_list(decode_restricted_string(Tlv, TagIn))
end
.



%%================================
%%  AdditionalCauseDescription
%%================================
'enc_AdditionalCauseDescription'(Val) ->
    'enc_AdditionalCauseDescription'(Val, [<<48>>]).

'enc_AdditionalCauseDescription'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute key(1) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex1, [<<128>>])
       end,

%%-------------------------------------------------
%% attribute value(2) with type PrintableString OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex2, [<<129>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_AdditionalCauseDescription'(Tlv) ->
   'dec_AdditionalCauseDescription'(Tlv, [16]).

'dec_AdditionalCauseDescription'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute key(1) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {decode_octet_string(V1, []), TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute value(2) with type PrintableString OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
binary_to_list(decode_restricted_string(V2, []))
end
, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'AdditionalCauseDescription', Term1, Term2}.



%%================================
%%  SSFamily
%%================================
'enc_SSFamily'(Val) ->
    'enc_SSFamily'(Val, [<<10>>]).

'enc_SSFamily'(Val, TagIn) ->
case Val of
way -> encode_tags(TagIn, [0], 1);
acb -> encode_tags(TagIn, [1], 1);
cfb -> encode_tags(TagIn, [2], 1);
cfsip -> encode_tags(TagIn, [3], 1);
cfnr -> encode_tags(TagIn, [4], 1);
cfu -> encode_tags(TagIn, [5], 1);
cgg -> encode_tags(TagIn, [6], 1);
chold -> encode_tags(TagIn, [7], 1);
chunt -> encode_tags(TagIn, [8], 1);
cidb -> encode_tags(TagIn, [9], 1);
ctr -> encode_tags(TagIn, [10], 1);
dnd -> encode_tags(TagIn, [11], 1);
mgm -> encode_tags(TagIn, [12], 1);
pickup -> encode_tags(TagIn, [13], 1);
hole -> encode_tags(TagIn, [14], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_SSFamily'(Tlv) ->
   'dec_SSFamily'(Tlv, [10]).

'dec_SSFamily'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> way;
1 -> acb;
2 -> cfb;
3 -> cfsip;
4 -> cfnr;
5 -> cfu;
6 -> cgg;
7 -> chold;
8 -> chunt;
9 -> cidb;
10 -> ctr;
11 -> dnd;
12 -> mgm;
13 -> pickup;
14 -> hole;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  SORM
%%================================
'enc_SORM'(Val) ->
    'enc_SORM'(Val, [<<10>>]).

'enc_SORM'(Val, TagIn) ->
case Val of
allCf -> encode_tags(TagIn, [32], 1);
cfu -> encode_tags(TagIn, [33], 1);
allCondCf -> encode_tags(TagIn, [40], 1);
cfb -> encode_tags(TagIn, [41], 1);
cfnry -> encode_tags(TagIn, [42], 1);
cfnrc -> encode_tags(TagIn, [43], 1);
ct -> encode_tags(TagIn, [49], 1);
cp -> encode_tags(TagIn, [50], 1);
cc -> encode_tags(TagIn, [51], 1);
hole -> encode_tags(TagIn, [64], 1);
cw -> encode_tags(TagIn, [65], 1);
hold -> encode_tags(TagIn, [66], 1);
ccbs -> encode_tags(TagIn, [67], 1);
conf -> encode_tags(TagIn, [80], 1);
mpty -> encode_tags(TagIn, [81], 1);
way -> encode_tags(TagIn, [82], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_SORM'(Tlv) ->
   'dec_SORM'(Tlv, [10]).

'dec_SORM'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
32 -> allCf;
33 -> cfu;
40 -> allCondCf;
41 -> cfb;
42 -> cfnry;
43 -> cfnrc;
49 -> ct;
50 -> cp;
51 -> cc;
64 -> hole;
65 -> cw;
66 -> hold;
67 -> ccbs;
80 -> conf;
81 -> mpty;
82 -> way;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  SSNotification
%%================================
'enc_SSNotification'(Val) ->
    'enc_SSNotification'(Val, [<<48>>]).

'enc_SSNotification'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8} = Val,

%%-------------------------------------------------
%% attribute family(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
way -> encode_tags([<<128>>], [0], 1);
acb -> encode_tags([<<128>>], [1], 1);
cfb -> encode_tags([<<128>>], [2], 1);
cfsip -> encode_tags([<<128>>], [3], 1);
cfnr -> encode_tags([<<128>>], [4], 1);
cfu -> encode_tags([<<128>>], [5], 1);
cgg -> encode_tags([<<128>>], [6], 1);
chold -> encode_tags([<<128>>], [7], 1);
chunt -> encode_tags([<<128>>], [8], 1);
cidb -> encode_tags([<<128>>], [9], 1);
ctr -> encode_tags([<<128>>], [10], 1);
dnd -> encode_tags([<<128>>], [11], 1);
mgm -> encode_tags([<<128>>], [12], 1);
pickup -> encode_tags([<<128>>], [13], 1);
hole -> encode_tags([<<128>>], [14], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute cgpn(2)   External ACPdatatypes:CallingPartyNumber
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'ACPdatatypes':'enc_CallingPartyNumber'(Cindex2, [<<161>>]),

%%-------------------------------------------------
%% attribute cdpn(3)   External ACPdatatypes:CalledPartyNumber
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'ACPdatatypes':'enc_CalledPartyNumber'(Cindex3, [<<162>>]),

%%-------------------------------------------------
%% attribute servingSide(4) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes4,EncLen4} = case Cindex4 of
calling -> encode_tags([<<131>>], [0], 1);
called -> encode_tags([<<131>>], [1], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute serviceTimeStamp(5)   External INCS3Internals:EventTime
%%-------------------------------------------------
   {EncBytes5,EncLen5} = 'INCS3Internals':'enc_EventTime'(Cindex5, [<<164>>]),

%%-------------------------------------------------
%% attribute participants(6) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes6,EncLen6} = 'enc_SSNotification_participants'(Cindex6, [<<165>>]),

%%-------------------------------------------------
%% attribute internal(7) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes7,EncLen7} = encode_boolean(Cindex7, [<<134>>]),

%%-------------------------------------------------
%% attribute args(8) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes8,EncLen8} = 'enc_SSNotification_args'(Cindex8, [<<167>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  SSNotification_participants
%%================================
'enc_SSNotification_participants'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_SSNotification_participants_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_SSNotification_participants_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_SSNotification_participants_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = encode_open_type(H, []),
   'enc_SSNotification_participants_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  SSNotification_args
%%================================
'enc_SSNotification_args'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_SSNotification_args_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_SSNotification_args_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_SSNotification_args_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_SSNotification_args_SEQOF'(H, []),
   'enc_SSNotification_args_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  SSNotification_args_SEQOF
%%================================
'enc_SSNotification_args_SEQOF'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      iface ->
         encode_restricted_string(element(2,Val), [<<128>>]);
      event ->
         case element(2,Val) of
allCf -> encode_tags([<<129>>], [32], 1);
cfu -> encode_tags([<<129>>], [33], 1);
allCondCf -> encode_tags([<<129>>], [40], 1);
cfb -> encode_tags([<<129>>], [41], 1);
cfnry -> encode_tags([<<129>>], [42], 1);
cfnrc -> encode_tags([<<129>>], [43], 1);
ct -> encode_tags([<<129>>], [49], 1);
cp -> encode_tags([<<129>>], [50], 1);
cc -> encode_tags([<<129>>], [51], 1);
hole -> encode_tags([<<129>>], [64], 1);
cw -> encode_tags([<<129>>], [65], 1);
hold -> encode_tags([<<129>>], [66], 1);
ccbs -> encode_tags([<<129>>], [67], 1);
conf -> encode_tags([<<129>>], [80], 1);
mpty -> encode_tags([<<129>>], [81], 1);
way -> encode_tags([<<129>>], [82], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end;
      'call-ref' ->
         encode_integer(element(2,Val), [<<130>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_SSNotification'(Tlv) ->
   'dec_SSNotification'(Tlv, [16]).

'dec_SSNotification'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute family(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> way;
1 -> acb;
2 -> cfb;
3 -> cfsip;
4 -> cfnr;
5 -> cfu;
6 -> cgg;
7 -> chold;
8 -> chunt;
9 -> cidb;
10 -> ctr;
11 -> dnd;
12 -> mgm;
13 -> pickup;
14 -> hole;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute cgpn(2)   External ACPdatatypes:CallingPartyNumber
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'ACPdatatypes':'dec_CallingPartyNumber'(V2, [131073]),

%%-------------------------------------------------
%% attribute cdpn(3)   External ACPdatatypes:CalledPartyNumber
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = 'ACPdatatypes':'dec_CalledPartyNumber'(V3, [131074]),

%%-------------------------------------------------
%% attribute servingSide(4) with type ENUMERATED
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = case decode_integer(V4, [131075]) of
0 -> calling;
1 -> called;
Default2 -> exit({error,{asn1,{illegal_enumerated,Default2}}})
end,

%%-------------------------------------------------
%% attribute serviceTimeStamp(5)   External INCS3Internals:EventTime
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = 'INCS3Internals':'dec_EventTime'(V5, [131076]),

%%-------------------------------------------------
%% attribute participants(6) with type SEQUENCE OF
%%-------------------------------------------------
[V6|Tlv7] = Tlv6, 
Term6 = 'dec_SSNotification_participants'(V6, [131077]),

%%-------------------------------------------------
%% attribute internal(7) with type BOOLEAN
%%-------------------------------------------------
[V7|Tlv8] = Tlv7, 
Term7 = decode_boolean(V7, [131078]),

%%-------------------------------------------------
%% attribute args(8) with type SEQUENCE OF
%%-------------------------------------------------
[V8|Tlv9] = Tlv8, 
Term8 = 'dec_SSNotification_args'(V8, [131079]),

case Tlv9 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv9}}}) % extra fields not allowed
end,
   {'SSNotification', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8}.

'dec_SSNotification_participants'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[decode_open_type_as_binary(V1, []) || V1 <- Tlv1].


'dec_SSNotification_args'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_SSNotification_args_SEQOF'(V1, []) || V1 <- Tlv1].


'dec_SSNotification_args_SEQOF'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'iface'
    {131072, V1} -> 
        {iface, begin
Val1 = decode_octet_string(V1, []),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 128 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'event'
    {131073, V1} -> 
        {event, case decode_integer(V1, []) of
32 -> allCf;
33 -> cfu;
40 -> allCondCf;
41 -> cfb;
42 -> cfnry;
43 -> cfnrc;
49 -> ct;
50 -> cp;
51 -> cc;
64 -> hole;
65 -> cw;
66 -> hold;
67 -> ccbs;
80 -> conf;
81 -> mpty;
82 -> way;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end};


%% 'call-ref'
    {131074, V1} -> 
        {'call-ref', decode_integer(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  MediaId
%%================================
'enc_MediaId'(Val) ->
    'enc_MediaId'(Val, [<<48>>]).

'enc_MediaId'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute arg(1) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_MediaId'(Tlv) ->
   'dec_MediaId'(Tlv, [16]).

'dec_MediaId'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute arg(1) with type OCTET STRING
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_octet_string(V1, [131072]),

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'MediaId', Term1}.



%%================================
%%  AdditionalInformation
%%================================
'enc_AdditionalInformation'(Val) ->
    'enc_AdditionalInformation'(Val, []).

'enc_AdditionalInformation'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      forISUP ->
         'enc_AdditionalISUP'(element(2,Val), [<<160>>]);
      forMegaco ->
         'enc_AdditionalMegaco'(element(2,Val), [<<161>>]);
      forOther ->
         encode_integer(element(2,Val), [<<130>>]);
      causeDescription ->
         'enc_AdditionalCauseDescription'(element(2,Val), [<<163>>]);
      ssNotification ->
         'enc_SSNotification'(element(2,Val), [<<164>>]);
      sipInfo ->
         'enc_AdditionalInformation_sipInfo'(element(2,Val), [<<165>>]);
      callingInfo ->
         'enc_AdditionalInformation_callingInfo'(element(2,Val), [<<166>>]);
      'rm-ai' ->
         'enc_AdditionalInformation_rm-ai'(element(2,Val), [<<167>>]);
      'wi-id' ->
         encode_restricted_string(element(2,Val), [<<136>>]);
      'media-id' ->
         'enc_MediaId'(element(2,Val), [<<169>>]);
      'cfc-enabled' ->
         encode_boolean(element(2,Val), [<<138>>]);
      cggCall ->
         encode_boolean(element(2,Val), [<<139>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  AdditionalInformation_sipInfo
%%================================
'enc_AdditionalInformation_sipInfo'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_AdditionalInformation_sipInfo_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_AdditionalInformation_sipInfo_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_AdditionalInformation_sipInfo_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_AdditionalInformation_sipInfo_SEQOF'(H, []),
   'enc_AdditionalInformation_sipInfo_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  AdditionalInformation_sipInfo_SEQOF
%%================================
'enc_AdditionalInformation_sipInfo_SEQOF'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      'call-id' ->
         encode_restricted_string(element(2,Val), [<<128>>]);
      node ->
         encode_restricted_string(element(2,Val), [<<129>>]);
      'remote-number' ->
         encode_restricted_string(element(2,Val), [<<130>>]);
      'tag-from' ->
         encode_restricted_string(element(2,Val), [<<131>>]);
      'tag-to' ->
         encode_restricted_string(element(2,Val), [<<132>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  AdditionalInformation_callingInfo
%%================================
'enc_AdditionalInformation_callingInfo'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_AdditionalInformation_callingInfo_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_AdditionalInformation_callingInfo_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_AdditionalInformation_callingInfo_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_AdditionalInformation_callingInfo_SEQOF'(H, []),
   'enc_AdditionalInformation_callingInfo_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  AdditionalInformation_callingInfo_SEQOF
%%================================
'enc_AdditionalInformation_callingInfo_SEQOF'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      displayName ->
         encode_restricted_string(element(2,Val), [<<128>>]);
      'original-address' ->
         encode_restricted_string(element(2,Val), [<<129>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  AdditionalInformation_rm-ai
%%================================
'enc_AdditionalInformation_rm-ai'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_AdditionalInformation_rm-ai_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_AdditionalInformation_rm-ai_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_AdditionalInformation_rm-ai_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_AdditionalInformation_rm-ai_SEQOF'(H, []),
   'enc_AdditionalInformation_rm-ai_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  AdditionalInformation_rm-ai_SEQOF
%%================================
'enc_AdditionalInformation_rm-ai_SEQOF'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      'ivr-script' ->
         encode_restricted_string(element(2,Val), [<<128>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_AdditionalInformation'(Tlv) ->
   'dec_AdditionalInformation'(Tlv, []).

'dec_AdditionalInformation'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'forISUP'
    {131072, V1} -> 
        {forISUP, 'dec_AdditionalISUP'(V1, [])};


%% 'forMegaco'
    {131073, V1} -> 
        {forMegaco, 'dec_AdditionalMegaco'(V1, [])};


%% 'forOther'
    {131074, V1} -> 
        {forOther, begin
Val1 = decode_integer(V1, []),
if 0 =< Val1, Val1 =< 100 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'causeDescription'
    {131075, V1} -> 
        {causeDescription, 'dec_AdditionalCauseDescription'(V1, [])};


%% 'ssNotification'
    {131076, V1} -> 
        {ssNotification, 'dec_SSNotification'(V1, [])};


%% 'sipInfo'
    {131077, V1} -> 
        {sipInfo, 'dec_AdditionalInformation_sipInfo'(V1, [])};


%% 'callingInfo'
    {131078, V1} -> 
        {callingInfo, 'dec_AdditionalInformation_callingInfo'(V1, [])};


%% 'rm-ai'
    {131079, V1} -> 
        {'rm-ai', 'dec_AdditionalInformation_rm-ai'(V1, [])};


%% 'wi-id'
    {131080, V1} -> 
        {'wi-id', decode_octet_string(V1, [])};


%% 'media-id'
    {131081, V1} -> 
        {'media-id', 'dec_MediaId'(V1, [])};


%% 'cfc-enabled'
    {131082, V1} -> 
        {'cfc-enabled', decode_boolean(V1, [])};


%% 'cggCall'
    {131083, V1} -> 
        {cggCall, decode_boolean(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.
'dec_AdditionalInformation_sipInfo'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_AdditionalInformation_sipInfo_SEQOF'(V1, []) || V1 <- Tlv1].


'dec_AdditionalInformation_sipInfo_SEQOF'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'call-id'
    {131072, V1} -> 
        {'call-id', begin
binary_to_list(decode_restricted_string(V1, []))
end
};


%% 'node'
    {131073, V1} -> 
        {node, begin
binary_to_list(decode_restricted_string(V1, []))
end
};


%% 'remote-number'
    {131074, V1} -> 
        {'remote-number', begin
binary_to_list(decode_restricted_string(V1, []))
end
};


%% 'tag-from'
    {131075, V1} -> 
        {'tag-from', begin
binary_to_list(decode_restricted_string(V1, []))
end
};


%% 'tag-to'
    {131076, V1} -> 
        {'tag-to', begin
binary_to_list(decode_restricted_string(V1, []))
end
};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.
'dec_AdditionalInformation_callingInfo'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_AdditionalInformation_callingInfo_SEQOF'(V1, []) || V1 <- Tlv1].


'dec_AdditionalInformation_callingInfo_SEQOF'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'displayName'
    {131072, V1} -> 
        {displayName, begin
binary_to_list(decode_restricted_string(V1, []))
end
};


%% 'original-address'
    {131073, V1} -> 
        {'original-address', begin
binary_to_list(decode_restricted_string(V1, []))
end
};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.
'dec_AdditionalInformation_rm-ai'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_AdditionalInformation_rm-ai_SEQOF'(V1, []) || V1 <- Tlv1].


'dec_AdditionalInformation_rm-ai_SEQOF'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'ivr-script'
    {131072, V1} -> 
        {'ivr-script', begin
binary_to_list(decode_restricted_string(V1, []))
end
};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  AdditionalISUP
%%================================
'enc_AdditionalISUP'(Val) ->
    'enc_AdditionalISUP'(Val, [<<48>>]).

'enc_AdditionalISUP'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute message(1) with type IA5String
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute params(2) with type SET OF OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_AdditionalISUP_params'(Cindex2, [<<161>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  AdditionalISUP_params
%%================================
'enc_AdditionalISUP_params'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_AdditionalISUP_params_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_AdditionalISUP_params_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_AdditionalISUP_params_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_AdditionalISUPParam'(H, [<<48>>]),
   'enc_AdditionalISUP_params_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_AdditionalISUP'(Tlv) ->
   'dec_AdditionalISUP'(Tlv, [16]).

'dec_AdditionalISUP'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute message(1) with type IA5String
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_restricted_string(V1, [131072]),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 27 ->
binary_to_list(Val1);
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute params(2) with type SET OF OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_AdditionalISUP_params'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'AdditionalISUP', Term1, Term2}.

'dec_AdditionalISUP_params'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_AdditionalISUPParam'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  AdditionalISUPParam
%%================================
'enc_AdditionalISUPParam'(Val) ->
    'enc_AdditionalISUPParam'(Val, [<<48>>]).

'enc_AdditionalISUPParam'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute type(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute length(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute value(3) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_restricted_string(Cindex3, [<<130>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_AdditionalISUPParam'(Tlv) ->
   'dec_AdditionalISUPParam'(Tlv, [16]).

'dec_AdditionalISUPParam'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute type(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 255 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute length(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [131073]),
if 1 =< Val2, Val2 =< 255 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute value(3) with type OCTET STRING
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = begin
Val3 = decode_octet_string(V3, [131074]),
C1 = byte_size(Val3),
if 1 =< C1, C1 =< 255 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'AdditionalISUPParam', Term1, Term2, Term3}.



%%================================
%%  AdditionalMegaco
%%================================
'enc_AdditionalMegaco'(Val) ->
    'enc_AdditionalMegaco'(Val, []).

'enc_AdditionalMegaco'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      transfer ->
         'enc_AdditionalMegacoTransfer'(element(2,Val), [<<160>>]);
      conference ->
         'enc_AdditionalMegacoConference'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_AdditionalMegaco'(Tlv) ->
   'dec_AdditionalMegaco'(Tlv, []).

'dec_AdditionalMegaco'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'transfer'
    {131072, V1} -> 
        {transfer, 'dec_AdditionalMegacoTransfer'(V1, [])};


%% 'conference'
    {131073, V1} -> 
        {conference, 'dec_AdditionalMegacoConference'(V1, [])};

      Else -> 
         {asn1_ExtAlt,ber_encode(Else)}
   end
.


%%================================
%%  AdditionalMegacoTransfer
%%================================
'enc_AdditionalMegacoTransfer'(Val) ->
    'enc_AdditionalMegacoTransfer'(Val, [<<48>>]).

'enc_AdditionalMegacoTransfer'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute callRef(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute legRef(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute remoteSDP(3)   External INCS3Internals:SDPType
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'INCS3Internals':'enc_SDPType'(Cindex3, [<<162>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_AdditionalMegacoTransfer'(Tlv) ->
   'dec_AdditionalMegacoTransfer'(Tlv, [16]).

'dec_AdditionalMegacoTransfer'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute callRef(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1, [131072]),

%%-------------------------------------------------
%% attribute legRef(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_integer(V2, [131073]),

%%-------------------------------------------------
%% attribute remoteSDP(3)   External INCS3Internals:SDPType
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = 'INCS3Internals':'dec_SDPType'(V3, [131074]),

case Tlv4 of [] -> true; _ -> true end, % ... extra fields skipped
   {'AdditionalMegacoTransfer', Term1, Term2, Term3}.



%%================================
%%  AdditionalMegacoConference
%%================================
'enc_AdditionalMegacoConference'(Val) ->
    'enc_AdditionalMegacoConference'(Val, [<<48>>]).

'enc_AdditionalMegacoConference'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute callRef(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute legRef(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute remoteSDP(3)   External INCS3Internals:SDPType
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'INCS3Internals':'enc_SDPType'(Cindex3, [<<162>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_AdditionalMegacoConference'(Tlv) ->
   'dec_AdditionalMegacoConference'(Tlv, [16]).

'dec_AdditionalMegacoConference'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute callRef(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1, [131072]),

%%-------------------------------------------------
%% attribute legRef(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_integer(V2, [131073]),

%%-------------------------------------------------
%% attribute remoteSDP(3)   External INCS3Internals:SDPType
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = 'INCS3Internals':'dec_SDPType'(V3, [131074]),

case Tlv4 of [] -> true; _ -> true end, % ... extra fields skipped
   {'AdditionalMegacoConference', Term1, Term2, Term3}.



%%================================
%%  AlertingPattern
%%================================
'enc_AlertingPattern'(Val) ->
    'enc_AlertingPattern'(Val, [<<4>>]).

'enc_AlertingPattern'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_AlertingPattern'(Tlv) ->
   'dec_AlertingPattern'(Tlv, [4]).

'dec_AlertingPattern'(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if C1 =:= 3 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  ApplicationTimer
%%================================
'enc_ApplicationTimer'(Val) ->
    'enc_ApplicationTimer'(Val, [<<2>>]).

'enc_ApplicationTimer'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_ApplicationTimer'(Tlv) ->
   'dec_ApplicationTimer'(Tlv, [2]).

'dec_ApplicationTimer'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 2047 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  AssistingSSPIPRoutingAddress
%%================================
'enc_AssistingSSPIPRoutingAddress'(Val) ->
    'enc_AssistingSSPIPRoutingAddress'(Val, [<<19>>]).

'enc_AssistingSSPIPRoutingAddress'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_AssistingSSPIPRoutingAddress'(Tlv) ->
   'dec_AssistingSSPIPRoutingAddress'(Tlv, [19]).

'dec_AssistingSSPIPRoutingAddress'(Tlv, TagIn) ->
begin
binary_to_list(decode_restricted_string(Tlv, TagIn))
end
.



%%================================
%%  ATMTrafficDescriptor
%%================================
'enc_ATMTrafficDescriptor'(Val) ->
    'enc_ATMTrafficDescriptor'(Val, [<<4>>]).

'enc_ATMTrafficDescriptor'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_ATMTrafficDescriptor'(Tlv) ->
   'dec_ATMTrafficDescriptor'(Tlv, [4]).

'dec_ATMTrafficDescriptor'(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 27 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  BackwardGVNS
%%================================
'enc_BackwardGVNS'(Val) ->
    'enc_BackwardGVNS'(Val, [<<4>>]).

'enc_BackwardGVNS'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_BackwardGVNS'(Tlv) ->
   'dec_BackwardGVNS'(Tlv, [4]).

'dec_BackwardGVNS'(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 27 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  BackwardServiceInteractionInd
%%================================
'enc_BackwardServiceInteractionInd'(Val) ->
    'enc_BackwardServiceInteractionInd'(Val, [<<48>>]).

'enc_BackwardServiceInteractionInd'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute conferenceTreatmentIndicator(1) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex1, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute callCompletionTreatmentIndicator(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex2, [<<130>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_BackwardServiceInteractionInd'(Tlv) ->
   'dec_BackwardServiceInteractionInd'(Tlv, [16]).

'dec_BackwardServiceInteractionInd'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute conferenceTreatmentIndicator(1) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131073,V1}|TempTlv2] ->
    {begin
Val1 = decode_octet_string(V1, []),
C1 = byte_size(Val1),
if C1 =:= 1 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute callCompletionTreatmentIndicator(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131074,V2}|TempTlv3] ->
    {begin
Val2 = decode_octet_string(V2, []),
C2 = byte_size(Val2),
if C2 =:= 1 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'BackwardServiceInteractionInd', Term1, Term2}.



%%================================
%%  BCSMEvent
%%================================
'enc_BCSMEvent'(Val) ->
    'enc_BCSMEvent'(Val, [<<48>>]).

'enc_BCSMEvent'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute eventTypeBCSM(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
origAttemptAuthorized -> encode_tags([<<128>>], [1], 1);
collectedInfo -> encode_tags([<<128>>], [2], 1);
analysedInformation -> encode_tags([<<128>>], [3], 1);
routeSelectFailure -> encode_tags([<<128>>], [4], 1);
oCalledPartyBusy -> encode_tags([<<128>>], [5], 1);
oNoAnswer -> encode_tags([<<128>>], [6], 1);
oAnswer -> encode_tags([<<128>>], [7], 1);
oMidCall -> encode_tags([<<128>>], [8], 1);
oDisconnect -> encode_tags([<<128>>], [9], 1);
oAbandon -> encode_tags([<<128>>], [10], 1);
termAttemptAuthorized -> encode_tags([<<128>>], [12], 1);
tBusy -> encode_tags([<<128>>], [13], 1);
tNoAnswer -> encode_tags([<<128>>], [14], 1);
tAnswer -> encode_tags([<<128>>], [15], 1);
tMidCall -> encode_tags([<<128>>], [16], 1);
tDisconnect -> encode_tags([<<128>>], [17], 1);
tAbandon -> encode_tags([<<128>>], [18], 1);
oTermSeized -> encode_tags([<<128>>], [19], 1);
oSuspend -> encode_tags([<<128>>], [20], 1);
tSuspend -> encode_tags([<<128>>], [21], 1);
origAttempt -> encode_tags([<<128>>], [22], 1);
termAttempt -> encode_tags([<<128>>], [23], 1);
oReAnswer -> encode_tags([<<128>>], [24], 1);
tReAnswer -> encode_tags([<<128>>], [25], 1);
facilitySelectedAndAvailable -> encode_tags([<<128>>], [26], 1);
callAccepted -> encode_tags([<<128>>], [27], 1);
authorizeRouteFailure -> encode_tags([<<128>>], [28], 1);
originationDenied -> encode_tags([<<128>>], [29], 1);
terminationDenied -> encode_tags([<<128>>], [30], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute monitorMode(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
interrupted -> encode_tags([<<129>>], [0], 1);
notifyAndContinue -> encode_tags([<<129>>], [1], 1);
transparent -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute legID(3)   External INCS3datatypes:DTLegID OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_DTLegID'(Cindex3, [<<162>>])
       end,

%%-------------------------------------------------
%% attribute dpSpecificCriteria(4)   External INCS3datatypes:DpSpecificCriteria OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_DpSpecificCriteria'(Cindex4, [<<190>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_BCSMEvent'(Tlv) ->
   'dec_BCSMEvent'(Tlv, [16]).

'dec_BCSMEvent'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute eventTypeBCSM(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
1 -> origAttemptAuthorized;
2 -> collectedInfo;
3 -> analysedInformation;
4 -> routeSelectFailure;
5 -> oCalledPartyBusy;
6 -> oNoAnswer;
7 -> oAnswer;
8 -> oMidCall;
9 -> oDisconnect;
10 -> oAbandon;
12 -> termAttemptAuthorized;
13 -> tBusy;
14 -> tNoAnswer;
15 -> tAnswer;
16 -> tMidCall;
17 -> tDisconnect;
18 -> tAbandon;
19 -> oTermSeized;
20 -> oSuspend;
21 -> tSuspend;
22 -> origAttempt;
23 -> termAttempt;
24 -> oReAnswer;
25 -> tReAnswer;
26 -> facilitySelectedAndAvailable;
27 -> callAccepted;
28 -> authorizeRouteFailure;
29 -> originationDenied;
30 -> terminationDenied;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute monitorMode(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> interrupted;
1 -> notifyAndContinue;
2 -> transparent;
Default2 -> exit({error,{asn1,{illegal_enumerated,Default2}}})
end,

%%-------------------------------------------------
%% attribute legID(3)   External INCS3datatypes:DTLegID OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_DTLegID'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute dpSpecificCriteria(4)   External INCS3datatypes:DpSpecificCriteria OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131102,V4}|TempTlv5] ->
    {'dec_DpSpecificCriteria'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

case Tlv5 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed
end,
   {'BCSMEvent', Term1, Term2, Term3, Term4}.



%%================================
%%  BearerCapability
%%================================
'enc_BearerCapability'(Val) ->
    'enc_BearerCapability'(Val, []).

'enc_BearerCapability'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      bearerCap ->
         encode_restricted_string(element(2,Val), [<<128>>]);
      tmr ->
         encode_restricted_string(element(2,Val), [<<129>>]);
      broadbandBearerCap ->
         encode_restricted_string(element(2,Val), [<<130>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_BearerCapability'(Tlv) ->
   'dec_BearerCapability'(Tlv, []).

'dec_BearerCapability'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'bearerCap'
    {131072, V1} -> 
        {bearerCap, begin
Val1 = decode_octet_string(V1, []),
C1 = byte_size(Val1),
if 2 =< C1, C1 =< 27 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'tmr'
    {131073, V1} -> 
        {tmr, begin
Val2 = decode_octet_string(V1, []),
C2 = byte_size(Val2),
if C2 =:= 1 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'broadbandBearerCap'
    {131074, V1} -> 
        {broadbandBearerCap, begin
Val3 = decode_octet_string(V1, []),
C3 = byte_size(Val3),
if 1 =< C3, C3 =< 27 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  BothwayThroughConnectionInd
%%================================
'enc_BothwayThroughConnectionInd'(Val) ->
    'enc_BothwayThroughConnectionInd'(Val, [<<10>>]).

'enc_BothwayThroughConnectionInd'(Val, TagIn) ->
case Val of
bothwayPathRequired -> encode_tags(TagIn, [0], 1);
bothwayPathNotRequired -> encode_tags(TagIn, [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_BothwayThroughConnectionInd'(Tlv) ->
   'dec_BothwayThroughConnectionInd'(Tlv, [10]).

'dec_BothwayThroughConnectionInd'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> bothwayPathRequired;
1 -> bothwayPathNotRequired;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  CalledDirectoryNumber
%%================================
'enc_CalledDirectoryNumber'(Val) ->
    'enc_CalledDirectoryNumber'(Val, [<<4>>]).

'enc_CalledDirectoryNumber'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_CalledDirectoryNumber'(Tlv) ->
   'dec_CalledDirectoryNumber'(Tlv, [4]).

'dec_CalledDirectoryNumber'(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 27 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  CalledPartyBusinessGroupID
%%================================
'enc_CalledPartyBusinessGroupID'(Val) ->
    'enc_CalledPartyBusinessGroupID'(Val, [<<4>>]).

'enc_CalledPartyBusinessGroupID'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_CalledPartyBusinessGroupID'(Tlv) ->
   'dec_CalledPartyBusinessGroupID'(Tlv, [4]).

'dec_CalledPartyBusinessGroupID'(Tlv, TagIn) ->
decode_octet_string(Tlv, TagIn).



%%================================
%%  CalledPartySubaddress
%%================================
'enc_CalledPartySubaddress'(Val) ->
    'enc_CalledPartySubaddress'(Val, [<<4>>]).

'enc_CalledPartySubaddress'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_CalledPartySubaddress'(Tlv) ->
   'dec_CalledPartySubaddress'(Tlv, [4]).

'dec_CalledPartySubaddress'(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 27 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  CallingGeodeticLocation
%%================================
'enc_CallingGeodeticLocation'(Val) ->
    'enc_CallingGeodeticLocation'(Val, [<<4>>]).

'enc_CallingGeodeticLocation'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_CallingGeodeticLocation'(Tlv) ->
   'dec_CallingGeodeticLocation'(Tlv, [4]).

'dec_CallingGeodeticLocation'(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 10 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  CallingPartyBusinessGroupID
%%================================
'enc_CallingPartyBusinessGroupID'(Val) ->
    'enc_CallingPartyBusinessGroupID'(Val, [<<4>>]).

'enc_CallingPartyBusinessGroupID'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_CallingPartyBusinessGroupID'(Tlv) ->
   'dec_CallingPartyBusinessGroupID'(Tlv, [4]).

'dec_CallingPartyBusinessGroupID'(Tlv, TagIn) ->
decode_octet_string(Tlv, TagIn).



%%================================
%%  CallingPartySubaddress
%%================================
'enc_CallingPartySubaddress'(Val) ->
    'enc_CallingPartySubaddress'(Val, [<<4>>]).

'enc_CallingPartySubaddress'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_CallingPartySubaddress'(Tlv) ->
   'dec_CallingPartySubaddress'(Tlv, [4]).

'dec_CallingPartySubaddress'(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 27 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  CallingPartysCategory
%%================================
'enc_CallingPartysCategory'(Val) ->
    'enc_CallingPartysCategory'(Val, [<<4>>]).

'enc_CallingPartysCategory'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_CallingPartysCategory'(Tlv) ->
   'dec_CallingPartysCategory'(Tlv, [4]).

'dec_CallingPartysCategory'(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if C1 =:= 1 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  CallProcessingOperationCorrelationID
%%================================
'enc_CallProcessingOperationCorrelationID'(Val) ->
    'enc_CallProcessingOperationCorrelationID'(Val, [<<10>>]).

'enc_CallProcessingOperationCorrelationID'(Val, TagIn) ->
case Val of
aLERTing -> encode_tags(TagIn, [1], 1);
sETUP -> encode_tags(TagIn, [5], 1);
cONNNect -> encode_tags(TagIn, [7], 1);
dISConnect -> encode_tags(TagIn, [69], 1);
rELease -> encode_tags(TagIn, [77], 1);
rELeaseCOMPlete -> encode_tags(TagIn, [90], 1);
fACility -> encode_tags(TagIn, [98], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_CallProcessingOperationCorrelationID'(Tlv) ->
   'dec_CallProcessingOperationCorrelationID'(Tlv, [10]).

'dec_CallProcessingOperationCorrelationID'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
1 -> aLERTing;
5 -> sETUP;
7 -> cONNNect;
69 -> dISConnect;
77 -> rELease;
90 -> rELeaseCOMPlete;
98 -> fACility;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  CallReference
%%================================
'enc_CallReference'(Val) ->
    'enc_CallReference'(Val, [<<2>>]).

'enc_CallReference'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_CallReference'(Tlv) ->
   'dec_CallReference'(Tlv, [2]).

'dec_CallReference'(Tlv, TagIn) ->
decode_integer(Tlv, TagIn).



%%================================
%%  CallResult
%%================================
'enc_CallResult'(Val) ->
    'enc_CallResult'(Val, [<<4>>]).

'enc_CallResult'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_CallResult'(Tlv) ->
   'dec_CallResult'(Tlv, [4]).

'dec_CallResult'(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 27 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  DTCallSegmentID
%%================================
'enc_DTCallSegmentID'(Val) ->
    'enc_DTCallSegmentID'(Val, [<<2>>]).

'enc_DTCallSegmentID'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_DTCallSegmentID'(Tlv) ->
   'dec_DTCallSegmentID'(Tlv, [2]).

'dec_DTCallSegmentID'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 1 =< Val1, Val1 =< 10 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  Carrier
%%================================
'enc_Carrier'(Val) ->
    'enc_Carrier'(Val, [<<4>>]).

'enc_Carrier'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_Carrier'(Tlv) ->
   'dec_Carrier'(Tlv, [4]).

'dec_Carrier'(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if 3 =< C1, C1 =< 10 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  Cause
%%================================
'enc_Cause'(Val) ->
    'enc_Cause'(Val, [<<10>>]).

'enc_Cause'(Val, TagIn) ->
case Val of
normal -> encode_tags(TagIn, [0], 1);
originationDenied -> encode_tags(TagIn, [1], 1);
collectDigits -> encode_tags(TagIn, [2], 1);
authorisationFailure -> encode_tags(TagIn, [3], 1);
bPtyAlerted -> encode_tags(TagIn, [4], 1);
noIndication -> encode_tags(TagIn, [5], 1);
aPtyAbandon -> encode_tags(TagIn, [6], 1);
invalidCollectedInformation -> encode_tags(TagIn, [7], 1);
collectInformationFailure -> encode_tags(TagIn, [8], 1);
aPtyDisc -> encode_tags(TagIn, [9], 1);
bPtyDisc -> encode_tags(TagIn, [10], 1);
routeSelectFailure -> encode_tags(TagIn, [11], 1);
oNoAnswer -> encode_tags(TagIn, [12], 1);
terminationDenied -> encode_tags(TagIn, [13], 1);
notReachable -> encode_tags(TagIn, [14], 1);
bPtyNoAnswer -> encode_tags(TagIn, [15], 1);
bPtyBusyUDUB -> encode_tags(TagIn, [16], 1);
bPtyBusyNDUB -> encode_tags(TagIn, [17], 1);
ss7Failure -> encode_tags(TagIn, [18], 1);
calledPartyRejected -> encode_tags(TagIn, [19], 1);
tException -> encode_tags(TagIn, [20], 1);
routeFailure1 -> encode_tags(TagIn, [21], 1);
routeFailure2 -> encode_tags(TagIn, [22], 1);
ssActivating -> encode_tags(TagIn, [23], 1);
conversationTimeout -> encode_tags(TagIn, [24], 1);
noCircuitAvailable -> encode_tags(TagIn, [25], 1);
coreNotification -> encode_tags(TagIn, [26], 1);
unsupportedMedia -> encode_tags(TagIn, [27], 1);
numberIncomplete -> encode_tags(TagIn, [28], 1);
invalidNumber -> encode_tags(TagIn, [29], 1);
unassignedNumber -> encode_tags(TagIn, [30], 1);
doNotDisturb -> encode_tags(TagIn, [31], 1);
externalControlled -> encode_tags(TagIn, [32], 1);
systemFailure -> encode_tags(TagIn, [33], 1);
applicationNotification -> encode_tags(TagIn, [34], 1);
referOk -> encode_tags(TagIn, [35], 1);
referFailure -> encode_tags(TagIn, [36], 1);
hole -> encode_tags(TagIn, [37], 1);
hold -> encode_tags(TagIn, [38], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_Cause'(Tlv) ->
   'dec_Cause'(Tlv, [10]).

'dec_Cause'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> normal;
1 -> originationDenied;
2 -> collectDigits;
3 -> authorisationFailure;
4 -> bPtyAlerted;
5 -> noIndication;
6 -> aPtyAbandon;
7 -> invalidCollectedInformation;
8 -> collectInformationFailure;
9 -> aPtyDisc;
10 -> bPtyDisc;
11 -> routeSelectFailure;
12 -> oNoAnswer;
13 -> terminationDenied;
14 -> notReachable;
15 -> bPtyNoAnswer;
16 -> bPtyBusyUDUB;
17 -> bPtyBusyNDUB;
18 -> ss7Failure;
19 -> calledPartyRejected;
20 -> tException;
21 -> routeFailure1;
22 -> routeFailure2;
23 -> ssActivating;
24 -> conversationTimeout;
25 -> noCircuitAvailable;
26 -> coreNotification;
27 -> unsupportedMedia;
28 -> numberIncomplete;
29 -> invalidNumber;
30 -> unassignedNumber;
31 -> doNotDisturb;
32 -> externalControlled;
33 -> systemFailure;
34 -> applicationNotification;
35 -> referOk;
36 -> referFailure;
37 -> hole;
38 -> hold;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  CCSS
%%================================
'enc_CCSS'(Val) ->
    'enc_CCSS'(Val, [<<1>>]).

'enc_CCSS'(Val, TagIn) ->
encode_boolean(Val, TagIn).


'dec_CCSS'(Tlv) ->
   'dec_CCSS'(Tlv, [1]).

'dec_CCSS'(Tlv, TagIn) ->
decode_boolean(Tlv, TagIn).



%%================================
%%  CGEncountered
%%================================
'enc_CGEncountered'(Val) ->
    'enc_CGEncountered'(Val, [<<10>>]).

'enc_CGEncountered'(Val, TagIn) ->
case Val of
noCGencountered -> encode_tags(TagIn, [0], 1);
manualCGencountered -> encode_tags(TagIn, [1], 1);
sCPOverload -> encode_tags(TagIn, [2], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_CGEncountered'(Tlv) ->
   'dec_CGEncountered'(Tlv, [10]).

'dec_CGEncountered'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> noCGencountered;
1 -> manualCGencountered;
2 -> sCPOverload;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  ChargeNumber
%%================================
'enc_ChargeNumber'(Val) ->
    'enc_ChargeNumber'(Val, [<<4>>]).

'enc_ChargeNumber'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_ChargeNumber'(Tlv) ->
   'dec_ChargeNumber'(Tlv, [4]).

'dec_ChargeNumber'(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 27 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  ChargingEvent
%%================================
'enc_ChargingEvent'(Val) ->
    'enc_ChargingEvent'(Val, [<<48>>]).

'enc_ChargingEvent'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute eventTypeCharging(1) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute monitorMode(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
interrupted -> encode_tags([<<129>>], [0], 1);
notifyAndContinue -> encode_tags([<<129>>], [1], 1);
transparent -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute legID(3)   External INCS3datatypes:DTLegID OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_DTLegID'(Cindex3, [<<162>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_ChargingEvent'(Tlv) ->
   'dec_ChargingEvent'(Tlv, [16]).

'dec_ChargingEvent'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute eventTypeCharging(1) with type OCTET STRING
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_octet_string(V1, [131072]),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 27 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute monitorMode(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> interrupted;
1 -> notifyAndContinue;
2 -> transparent;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute legID(3)   External INCS3datatypes:DTLegID OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_DTLegID'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ChargingEvent', Term1, Term2, Term3}.



%%================================
%%  CollectInformation
%%================================
'enc_CollectInformation'(Val) ->
    'enc_CollectInformation'(Val, [<<48>>]).

'enc_CollectInformation'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute numberingPlan(1)   External INCS3datatypes:CollectNumberingPlan OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_CollectNumberingPlan'(Cindex1, [<<160>>])
       end,

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_CollectInformation'(Tlv) ->
   'dec_CollectInformation'(Tlv, [16]).

'dec_CollectInformation'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute numberingPlan(1)   External INCS3datatypes:CollectNumberingPlan OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {'dec_CollectNumberingPlan'(V1, []), TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'CollectInformation', Term1}.



%%================================
%%  CollectNumberingPlan
%%================================
'enc_CollectNumberingPlan'(Val) ->
    'enc_CollectNumberingPlan'(Val, [<<48>>]).

'enc_CollectNumberingPlan'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute name(1) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex1, [<<128>>])
       end,

%%-------------------------------------------------
%% attribute body(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex2, [<<129>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_CollectNumberingPlan'(Tlv) ->
   'dec_CollectNumberingPlan'(Tlv, [16]).

'dec_CollectNumberingPlan'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute name(1) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {decode_octet_string(V1, []), TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute body(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {decode_octet_string(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of [] -> true; _ -> true end, % ... extra fields skipped
   {'CollectNumberingPlan', Term1, Term2}.



%%================================
%%  Component
%%================================
'enc_Component'(Val) ->
    'enc_Component'(Val, []).

'enc_Component'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      componentInfo ->
         encode_restricted_string(element(2,Val), [<<128>>]);
      relayedComponent ->
         encode_restricted_string(element(2,Val), [<<129>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_Component'(Tlv) ->
   'dec_Component'(Tlv, []).

'dec_Component'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'componentInfo'
    {131072, V1} -> 
        {componentInfo, begin
Val1 = decode_octet_string(V1, []),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 118 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'relayedComponent'
    {131073, V1} -> 
        {relayedComponent, decode_octet_string(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  ComponentCorrelationID
%%================================
'enc_ComponentCorrelationID'(Val) ->
    'enc_ComponentCorrelationID'(Val, [<<2>>]).

'enc_ComponentCorrelationID'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_ComponentCorrelationID'(Tlv) ->
   'dec_ComponentCorrelationID'(Tlv, [2]).

'dec_ComponentCorrelationID'(Tlv, TagIn) ->
decode_integer(Tlv, TagIn).



%%================================
%%  ComponentType
%%================================
'enc_ComponentType'(Val) ->
    'enc_ComponentType'(Val, [<<10>>]).

'enc_ComponentType'(Val, TagIn) ->
case Val of
anny -> encode_tags(TagIn, [0], 1);
invoke -> encode_tags(TagIn, [1], 1);
rResult -> encode_tags(TagIn, [2], 1);
rError -> encode_tags(TagIn, [3], 1);
rReject -> encode_tags(TagIn, [4], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_ComponentType'(Tlv) ->
   'dec_ComponentType'(Tlv, [10]).

'dec_ComponentType'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> anny;
1 -> invoke;
2 -> rResult;
3 -> rError;
4 -> rReject;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  ConnectedNumberTreatmentInd
%%================================
'enc_ConnectedNumberTreatmentInd'(Val) ->
    'enc_ConnectedNumberTreatmentInd'(Val, [<<10>>]).

'enc_ConnectedNumberTreatmentInd'(Val, TagIn) ->
case Val of
noINImpact -> encode_tags(TagIn, [0], 1);
presentationRestricted -> encode_tags(TagIn, [1], 1);
presentCalledINNumber -> encode_tags(TagIn, [2], 1);
presentCalledINNumberRestricted -> encode_tags(TagIn, [3], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_ConnectedNumberTreatmentInd'(Tlv) ->
   'dec_ConnectedNumberTreatmentInd'(Tlv, [10]).

'dec_ConnectedNumberTreatmentInd'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> noINImpact;
1 -> presentationRestricted;
2 -> presentCalledINNumber;
3 -> presentCalledINNumberRestricted;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  ControlType
%%================================
'enc_ControlType'(Val) ->
    'enc_ControlType'(Val, [<<10>>]).

'enc_ControlType'(Val, TagIn) ->
case Val of
sCPOverloaded -> encode_tags(TagIn, [0], 1);
manuallyInitiated -> encode_tags(TagIn, [1], 1);
destinationOverload -> encode_tags(TagIn, [2], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_ControlType'(Tlv) ->
   'dec_ControlType'(Tlv, [10]).

'dec_ControlType'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> sCPOverloaded;
1 -> manuallyInitiated;
2 -> destinationOverload;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  CorrelationID
%%================================
'enc_CorrelationID'(Val) ->
    'enc_CorrelationID'(Val, [<<19>>]).

'enc_CorrelationID'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_CorrelationID'(Tlv) ->
   'dec_CorrelationID'(Tlv, [19]).

'dec_CorrelationID'(Tlv, TagIn) ->
begin
binary_to_list(decode_restricted_string(Tlv, TagIn))
end
.



%%================================
%%  CounterAndValue
%%================================
'enc_CounterAndValue'(Val) ->
    'enc_CounterAndValue'(Val, [<<48>>]).

'enc_CounterAndValue'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute counterID(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute counterValue(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_CounterAndValue'(Tlv) ->
   'dec_CounterAndValue'(Tlv, [16]).

'dec_CounterAndValue'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute counterID(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 9 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute counterValue(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [131073]),
if 0 =< Val2, Val2 =< 2147483647 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'CounterAndValue', Term1, Term2}.



%%================================
%%  CounterID
%%================================
'enc_CounterID'(Val) ->
    'enc_CounterID'(Val, [<<2>>]).

'enc_CounterID'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_CounterID'(Tlv) ->
   'dec_CounterID'(Tlv, [2]).

'dec_CounterID'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 9 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  CountersValue
%%================================
'enc_CountersValue'(Val) ->
    'enc_CountersValue'(Val, [<<48>>]).

'enc_CountersValue'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_CountersValue_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_CountersValue_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_CountersValue_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_CounterAndValue'(H, [<<48>>]),
   'enc_CountersValue_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_CountersValue'(Tlv) ->
   'dec_CountersValue'(Tlv, [16]).

'dec_CountersValue'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_CounterAndValue'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  CreateOrRemoveIndicator
%%================================
'enc_CreateOrRemoveIndicator'(Val) ->
    'enc_CreateOrRemoveIndicator'(Val, [<<10>>]).

'enc_CreateOrRemoveIndicator'(Val, TagIn) ->
case Val of
crreate -> encode_tags(TagIn, [0], 1);
remove -> encode_tags(TagIn, [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_CreateOrRemoveIndicator'(Tlv) ->
   'dec_CreateOrRemoveIndicator'(Tlv, [10]).

'dec_CreateOrRemoveIndicator'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> crreate;
1 -> remove;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  CSAID
%%================================
'enc_CSAID'(Val) ->
    'enc_CSAID'(Val, [<<2>>]).

'enc_CSAID'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_CSAID'(Tlv) ->
   'dec_CSAID'(Tlv, [2]).

'dec_CSAID'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 1 =< Val1, Val1 =< 10 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  CutAndPaste
%%================================
'enc_CutAndPaste'(Val) ->
    'enc_CutAndPaste'(Val, [<<2>>]).

'enc_CutAndPaste'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_CutAndPaste'(Tlv) ->
   'dec_CutAndPaste'(Tlv, [2]).

'dec_CutAndPaste'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 2 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  DateAndTime
%%================================
'enc_DateAndTime'(Val) ->
    'enc_DateAndTime'(Val, [<<4>>]).

'enc_DateAndTime'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_DateAndTime'(Tlv) ->
   'dec_DateAndTime'(Tlv, [4]).

'dec_DateAndTime'(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if C1 =:= 6 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  DefaultFaultHandling
%%================================
'enc_DefaultFaultHandling'(Val) ->
    'enc_DefaultFaultHandling'(Val, [<<48>>]).

'enc_DefaultFaultHandling'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute action(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
resumeCallProcessing -> encode_tags([<<128>>], [0], 1);
releaseCall -> encode_tags([<<128>>], [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute treatment(2)   External INCS3datatypes:GapTreatment OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_GapTreatment'(Cindex2, [<<161>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_DefaultFaultHandling'(Tlv) ->
   'dec_DefaultFaultHandling'(Tlv, [16]).

'dec_DefaultFaultHandling'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute action(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> resumeCallProcessing;
1 -> releaseCall;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute treatment(2)   External INCS3datatypes:GapTreatment OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_GapTreatment'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'DefaultFaultHandling', Term1, Term2}.



%%================================
%%  DestinationRoutingAddress
%%================================
'enc_DestinationRoutingAddress'(Val) ->
    'enc_DestinationRoutingAddress'(Val, [<<48>>]).

'enc_DestinationRoutingAddress'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_DestinationRoutingAddress_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_DestinationRoutingAddress_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_DestinationRoutingAddress_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'ACPdatatypes':'enc_CalledPartyNumber'(H, [<<48>>]),
   'enc_DestinationRoutingAddress_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_DestinationRoutingAddress'(Tlv) ->
   'dec_DestinationRoutingAddress'(Tlv, [16]).

'dec_DestinationRoutingAddress'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['ACPdatatypes':'dec_CalledPartyNumber'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  Digits
%%================================
'enc_Digits'(Val) ->
    'enc_Digits'(Val, [<<19>>]).

'enc_Digits'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_Digits'(Tlv) ->
   'dec_Digits'(Tlv, [19]).

'dec_Digits'(Tlv, TagIn) ->
begin
binary_to_list(decode_restricted_string(Tlv, TagIn))
end
.



%%================================
%%  DisplayInformation
%%================================
'enc_DisplayInformation'(Val) ->
    'enc_DisplayInformation'(Val, [<<22>>]).

'enc_DisplayInformation'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_DisplayInformation'(Tlv) ->
   'dec_DisplayInformation'(Tlv, [22]).

'dec_DisplayInformation'(Tlv, TagIn) ->
begin
Val1 = decode_restricted_string(Tlv, TagIn),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 27 ->
binary_to_list(Val1);
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  DpSpecificCommonParameters
%%================================
'enc_DpSpecificCommonParameters'(Val) ->
    'enc_DpSpecificCommonParameters'(Val, [<<48>>]).

'enc_DpSpecificCommonParameters'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8, Cindex9, Cindex10, Cindex11, Cindex12, Cindex13, Cindex14, Cindex15, Cindex16, Cindex17, Cindex18, Cindex19, Cindex20, Cindex21, Cindex22} = Val,

%%-------------------------------------------------
%% attribute serviceAddressInformation(1)   External INCS3datatypes:ServiceAddressInformation
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ServiceAddressInformation'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute bearerCapability(2)   External INCS3datatypes:BearerCapability OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_BearerCapability'(Cindex2, [<<161>>])
       end,

%%-------------------------------------------------
%% attribute calledPartyNumber(3)   External ACPdatatypes:CalledPartyNumber OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'ACPdatatypes':'enc_CalledPartyNumber'(Cindex3, [<<162>>])
       end,

%%-------------------------------------------------
%% attribute callingPartyNumber(4)   External ACPdatatypes:CallingPartyNumber OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'ACPdatatypes':'enc_CallingPartyNumber'(Cindex4, [<<163>>])
       end,

%%-------------------------------------------------
%% attribute callingPartysCategory(5) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex5, [<<132>>])
       end,

%%-------------------------------------------------
%% attribute iPSSPCapabilities(6) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex6, [<<133>>])
       end,

%%-------------------------------------------------
%% attribute iPAvailable(7) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex7, [<<134>>])
       end,

%%-------------------------------------------------
%% attribute iSDNAccessRelatedInformation(8) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case Cindex8 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex8, [<<135>>])
       end,

%%-------------------------------------------------
%% attribute cGEncountered(9) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes9,EncLen9} =  case Cindex9 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex9 of
noCGencountered -> encode_tags([<<136>>], [0], 1);
manualCGencountered -> encode_tags([<<136>>], [1], 1);
sCPOverload -> encode_tags([<<136>>], [2], 1);
Enumval5 -> exit({error,{asn1, {enumerated_not_in_range,Enumval5}}})
end
       end,

%%-------------------------------------------------
%% attribute locationNumber(10) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes10,EncLen10} =  case Cindex10 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex10, [<<137>>])
       end,

%%-------------------------------------------------
%% attribute serviceProfileIdentifier(11) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes11,EncLen11} =  case Cindex11 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex11, [<<138>>])
       end,

%%-------------------------------------------------
%% attribute terminalType(12) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes12,EncLen12} =  case Cindex12 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex12 of
unknown -> encode_tags([<<139>>], [0], 1);
dialPulse -> encode_tags([<<139>>], [1], 1);
dtmf -> encode_tags([<<139>>], [2], 1);
isdn -> encode_tags([<<139>>], [3], 1);
isdnNoDtmf -> encode_tags([<<139>>], [4], 1);
spare -> encode_tags([<<139>>], [16], 1);
Enumval8 -> exit({error,{asn1, {enumerated_not_in_range,Enumval8}}})
end
       end,

%%-------------------------------------------------
%% attribute extensions(13)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes13,EncLen13} =  case Cindex13 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_Extensions'(Cindex13, [<<172>>])
       end,

%%-------------------------------------------------
%% attribute chargeNumber(14) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes14,EncLen14} =  case Cindex14 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex14, [<<141>>])
       end,

%%-------------------------------------------------
%% attribute servingAreaID(15) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes15,EncLen15} =  case Cindex15 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex15, [<<142>>])
       end,

%%-------------------------------------------------
%% attribute serviceInteractionIndicators(16) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes16,EncLen16} =  case Cindex16 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex16, [<<143>>])
       end,

%%-------------------------------------------------
%% attribute iNServiceCompatibilityIndication(17)   External INCS3datatypes:INServiceCompatibilityIndication OPTIONAL
%%-------------------------------------------------
   {EncBytes17,EncLen17} =  case Cindex17 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_INServiceCompatibilityIndication'(Cindex17, [<<176>>])
       end,

%%-------------------------------------------------
%% attribute serviceInteractionIndicatorsTwo(18)   External INCS3datatypes:ServiceInteractionIndicatorsTwo OPTIONAL
%%-------------------------------------------------
   {EncBytes18,EncLen18} =  case Cindex18 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_ServiceInteractionIndicatorsTwo'(Cindex18, [<<177>>])
       end,

%%-------------------------------------------------
%% attribute uSIServiceIndicator(19)   External INCS3datatypes:USIServiceIndicator OPTIONAL
%%-------------------------------------------------
   {EncBytes19,EncLen19} =  case Cindex19 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_USIServiceIndicator'(Cindex19, [<<178>>])
       end,

%%-------------------------------------------------
%% attribute uSIInformation(20) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes20,EncLen20} =  case Cindex20 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex20, [<<147>>])
       end,

%%-------------------------------------------------
%% attribute forwardGVNS(21) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes21,EncLen21} =  case Cindex21 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex21, [<<148>>])
       end,

%%-------------------------------------------------
%% attribute createdCallSegmentAssociation(22) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes22,EncLen22} =  case Cindex22 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex22, [<<149>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10, EncBytes11, EncBytes12, EncBytes13, EncBytes14, EncBytes15, EncBytes16, EncBytes17, EncBytes18, EncBytes19, EncBytes20, EncBytes21, EncBytes22],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10 + EncLen11 + EncLen12 + EncLen13 + EncLen14 + EncLen15 + EncLen16 + EncLen17 + EncLen18 + EncLen19 + EncLen20 + EncLen21 + EncLen22,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_DpSpecificCommonParameters'(Tlv) ->
   'dec_DpSpecificCommonParameters'(Tlv, [16]).

'dec_DpSpecificCommonParameters'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute serviceAddressInformation(1)   External INCS3datatypes:ServiceAddressInformation
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_ServiceAddressInformation'(V1, [131072]),

%%-------------------------------------------------
%% attribute bearerCapability(2)   External INCS3datatypes:BearerCapability OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_BearerCapability'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute calledPartyNumber(3)   External ACPdatatypes:CalledPartyNumber OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'ACPdatatypes':'dec_CalledPartyNumber'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute callingPartyNumber(4)   External ACPdatatypes:CallingPartyNumber OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'ACPdatatypes':'dec_CallingPartyNumber'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute callingPartysCategory(5) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {begin
Val1 = decode_octet_string(V5, []),
C1 = byte_size(Val1),
if C1 =:= 1 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute iPSSPCapabilities(6) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {begin
Val2 = decode_octet_string(V6, []),
C2 = byte_size(Val2),
if 1 =< C2, C2 =< 27 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute iPAvailable(7) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {begin
Val3 = decode_octet_string(V7, []),
C3 = byte_size(Val3),
if 1 =< C3, C3 =< 27 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

%%-------------------------------------------------
%% attribute iSDNAccessRelatedInformation(8) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term8,Tlv9} = case Tlv8 of
[{131079,V8}|TempTlv9] ->
    {begin
Val4 = decode_octet_string(V8, []),
C4 = byte_size(Val4),
if 1 =< C4, C4 =< 10 ->
Val4;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv9};
    _ ->
        { asn1_NOVALUE, Tlv8}
end,

%%-------------------------------------------------
%% attribute cGEncountered(9) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term9,Tlv10} = case Tlv9 of
[{131080,V9}|TempTlv10] ->
    {case decode_integer(V9, []) of
0 -> noCGencountered;
1 -> manualCGencountered;
2 -> sCPOverload;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end, TempTlv10};
    _ ->
        { asn1_NOVALUE, Tlv9}
end,

%%-------------------------------------------------
%% attribute locationNumber(10) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term10,Tlv11} = case Tlv10 of
[{131081,V10}|TempTlv11] ->
    {begin
Val5 = decode_octet_string(V10, []),
C5 = byte_size(Val5),
if 1 =< C5, C5 =< 27 ->
Val5;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv11};
    _ ->
        { asn1_NOVALUE, Tlv10}
end,

%%-------------------------------------------------
%% attribute serviceProfileIdentifier(11) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term11,Tlv12} = case Tlv11 of
[{131082,V11}|TempTlv12] ->
    {decode_octet_string(V11, []), TempTlv12};
    _ ->
        { asn1_NOVALUE, Tlv11}
end,

%%-------------------------------------------------
%% attribute terminalType(12) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term12,Tlv13} = case Tlv12 of
[{131083,V12}|TempTlv13] ->
    {case decode_integer(V12, []) of
0 -> unknown;
1 -> dialPulse;
2 -> dtmf;
3 -> isdn;
4 -> isdnNoDtmf;
16 -> spare;
Default2 -> exit({error,{asn1,{illegal_enumerated,Default2}}})
end, TempTlv13};
    _ ->
        { asn1_NOVALUE, Tlv12}
end,

%%-------------------------------------------------
%% attribute extensions(13)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term13,Tlv14} = case Tlv13 of
[{131084,V13}|TempTlv14] ->
    {'dec_Extensions'(V13, []), TempTlv14};
    _ ->
        { asn1_NOVALUE, Tlv13}
end,

%%-------------------------------------------------
%% attribute chargeNumber(14) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term14,Tlv15} = case Tlv14 of
[{131085,V14}|TempTlv15] ->
    {begin
Val6 = decode_octet_string(V14, []),
C6 = byte_size(Val6),
if 1 =< C6, C6 =< 27 ->
Val6;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv15};
    _ ->
        { asn1_NOVALUE, Tlv14}
end,

%%-------------------------------------------------
%% attribute servingAreaID(15) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term15,Tlv16} = case Tlv15 of
[{131086,V15}|TempTlv16] ->
    {begin
Val7 = decode_octet_string(V15, []),
C7 = byte_size(Val7),
if 1 =< C7, C7 =< 27 ->
Val7;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv16};
    _ ->
        { asn1_NOVALUE, Tlv15}
end,

%%-------------------------------------------------
%% attribute serviceInteractionIndicators(16) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term16,Tlv17} = case Tlv16 of
[{131087,V16}|TempTlv17] ->
    {begin
Val8 = decode_octet_string(V16, []),
C8 = byte_size(Val8),
if 1 =< C8, C8 =< 5 ->
Val8;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv17};
    _ ->
        { asn1_NOVALUE, Tlv16}
end,

%%-------------------------------------------------
%% attribute iNServiceCompatibilityIndication(17)   External INCS3datatypes:INServiceCompatibilityIndication OPTIONAL
%%-------------------------------------------------
{Term17,Tlv18} = case Tlv17 of
[{131088,V17}|TempTlv18] ->
    {'dec_INServiceCompatibilityIndication'(V17, []), TempTlv18};
    _ ->
        { asn1_NOVALUE, Tlv17}
end,

%%-------------------------------------------------
%% attribute serviceInteractionIndicatorsTwo(18)   External INCS3datatypes:ServiceInteractionIndicatorsTwo OPTIONAL
%%-------------------------------------------------
{Term18,Tlv19} = case Tlv18 of
[{131089,V18}|TempTlv19] ->
    {'dec_ServiceInteractionIndicatorsTwo'(V18, []), TempTlv19};
    _ ->
        { asn1_NOVALUE, Tlv18}
end,

%%-------------------------------------------------
%% attribute uSIServiceIndicator(19)   External INCS3datatypes:USIServiceIndicator OPTIONAL
%%-------------------------------------------------
{Term19,Tlv20} = case Tlv19 of
[{131090,V19}|TempTlv20] ->
    {'dec_USIServiceIndicator'(V19, []), TempTlv20};
    _ ->
        { asn1_NOVALUE, Tlv19}
end,

%%-------------------------------------------------
%% attribute uSIInformation(20) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term20,Tlv21} = case Tlv20 of
[{131091,V20}|TempTlv21] ->
    {begin
Val9 = decode_octet_string(V20, []),
C9 = byte_size(Val9),
if 1 =< C9, C9 =< 5 ->
Val9;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv21};
    _ ->
        { asn1_NOVALUE, Tlv20}
end,

%%-------------------------------------------------
%% attribute forwardGVNS(21) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term21,Tlv22} = case Tlv21 of
[{131092,V21}|TempTlv22] ->
    {begin
Val10 = decode_octet_string(V21, []),
C10 = byte_size(Val10),
if 1 =< C10, C10 =< 27 ->
Val10;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv22};
    _ ->
        { asn1_NOVALUE, Tlv21}
end,

%%-------------------------------------------------
%% attribute createdCallSegmentAssociation(22) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term22,Tlv23} = case Tlv22 of
[{131093,V22}|TempTlv23] ->
    {begin
Val11 = decode_integer(V22, []),
if 1 =< Val11, Val11 =< 10 ->
Val11;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv23};
    _ ->
        { asn1_NOVALUE, Tlv22}
end,

case Tlv23 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv23}}}) % extra fields not allowed
end,
   {'DpSpecificCommonParameters', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9, Term10, Term11, Term12, Term13, Term14, Term15, Term16, Term17, Term18, Term19, Term20, Term21, Term22}.



%%================================
%%  DpSpecificCriteria
%%================================
'enc_DpSpecificCriteria'(Val) ->
    'enc_DpSpecificCriteria'(Val, []).

'enc_DpSpecificCriteria'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      numberOfDigits ->
         encode_integer(element(2,Val), [<<128>>]);
      applicationTimer ->
         encode_integer(element(2,Val), [<<129>>]);
      midCallControlInfo ->
         'enc_MidCallControlInfo'(element(2,Val), [<<162>>]);
      numberOfDigitsTwo ->
         'enc_DpSpecificCriteria_numberOfDigitsTwo'(element(2,Val), [<<163>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  DpSpecificCriteria_numberOfDigitsTwo
%%================================
'enc_DpSpecificCriteria_numberOfDigitsTwo'(Val, TagIn) ->
   {_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute requestedNumberOfDigits(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute minNumberOfDigits(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex2, [<<129>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_DpSpecificCriteria'(Tlv) ->
   'dec_DpSpecificCriteria'(Tlv, []).

'dec_DpSpecificCriteria'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'numberOfDigits'
    {131072, V1} -> 
        {numberOfDigits, begin
Val1 = decode_integer(V1, []),
if 1 =< Val1, Val1 =< 255 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'applicationTimer'
    {131073, V1} -> 
        {applicationTimer, begin
Val2 = decode_integer(V1, []),
if 0 =< Val2, Val2 =< 2047 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'midCallControlInfo'
    {131074, V1} -> 
        {midCallControlInfo, 'dec_MidCallControlInfo'(V1, [])};


%% 'numberOfDigitsTwo'
    {131075, V1} -> 
        {numberOfDigitsTwo, 'dec_DpSpecificCriteria_numberOfDigitsTwo'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.
'dec_DpSpecificCriteria_numberOfDigitsTwo'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute requestedNumberOfDigits(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 1 =< Val1, Val1 =< 255 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute minNumberOfDigits(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
Val2 = decode_integer(V2, []),
if 1 =< Val2, Val2 =< 255 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'DpSpecificCriteria_numberOfDigitsTwo', Term1, Term2}.



%%================================
%%  XDuration
%%================================
'enc_XDuration'(Val) ->
    'enc_XDuration'(Val, [<<2>>]).

'enc_XDuration'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_XDuration'(Tlv) ->
   'dec_XDuration'(Tlv, [2]).

'dec_XDuration'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if -2 =< Val1, Val1 =< 86400 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  Entry
%%================================
'enc_Entry'(Val) ->
    'enc_Entry'(Val, []).

'enc_Entry'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      agreements ->
         encode_object_identifier(element(2,Val), [<<128>>]);
      networkSpecific ->
         encode_integer(element(2,Val), [<<129>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_Entry'(Tlv) ->
   'dec_Entry'(Tlv, []).

'dec_Entry'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'agreements'
    {131072, V1} -> 
        {agreements, decode_object_identifier(V1, [])};


%% 'networkSpecific'
    {131073, V1} -> 
        {networkSpecific, begin
Val1 = decode_integer(V1, []),
if 0 =< Val1, Val1 =< 2147483647 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  EventSpecificInformationBCSM
%%================================
'enc_EventSpecificInformationBCSM'(Val) ->
    'enc_EventSpecificInformationBCSM'(Val, []).

'enc_EventSpecificInformationBCSM'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      collectedInfoSpecificInfo ->
         'enc_EventSpecificInformationBCSM_collectedInfoSpecificInfo'(element(2,Val), [<<160>>]);
      analysedInfoSpecificInfo ->
         'enc_EventSpecificInformationBCSM_analysedInfoSpecificInfo'(element(2,Val), [<<161>>]);
      routeSelectFailureSpecificInfo ->
         'enc_EventSpecificInformationBCSM_routeSelectFailureSpecificInfo'(element(2,Val), [<<162>>]);
      oCalledPartyBusySpecificInfo ->
         'enc_EventSpecificInformationBCSM_oCalledPartyBusySpecificInfo'(element(2,Val), [<<163>>]);
      oNoAnswerSpecificInfo ->
         'enc_EventSpecificInformationBCSM_oNoAnswerSpecificInfo'(element(2,Val), [<<164>>]);
      oAnswerSpecificInfo ->
         'enc_EventSpecificInformationBCSM_oAnswerSpecificInfo'(element(2,Val), [<<165>>]);
      oMidCallSpecificInfo ->
         'enc_EventSpecificInformationBCSM_oMidCallSpecificInfo'(element(2,Val), [<<166>>]);
      oDisconnectSpecificInfo ->
         'enc_EventSpecificInformationBCSM_oDisconnectSpecificInfo'(element(2,Val), [<<167>>]);
      tBusySpecificInfo ->
         'enc_EventSpecificInformationBCSM_tBusySpecificInfo'(element(2,Val), [<<168>>]);
      tNoAnswerSpecificInfo ->
         'enc_EventSpecificInformationBCSM_tNoAnswerSpecificInfo'(element(2,Val), [<<169>>]);
      tAnswerSpecificInfo ->
         'enc_EventSpecificInformationBCSM_tAnswerSpecificInfo'(element(2,Val), [<<170>>]);
      tMidCallSpecificInfo ->
         'enc_EventSpecificInformationBCSM_tMidCallSpecificInfo'(element(2,Val), [<<171>>]);
      tDisconnectSpecificInfo ->
         'enc_EventSpecificInformationBCSM_tDisconnectSpecificInfo'(element(2,Val), [<<172>>]);
      oTermSeizedSpecificInfo ->
         'enc_EventSpecificInformationBCSM_oTermSeizedSpecificInfo'(element(2,Val), [<<173>>]);
      oSuspend ->
         'enc_EventSpecificInformationBCSM_oSuspend'(element(2,Val), [<<174>>]);
      tSuspend ->
         'enc_EventSpecificInformationBCSM_tSuspend'(element(2,Val), [<<175>>]);
      origAttemptAuthorized ->
         'enc_EventSpecificInformationBCSM_origAttemptAuthorized'(element(2,Val), [<<176>>]);
      oReAnswer ->
         'enc_EventSpecificInformationBCSM_oReAnswer'(element(2,Val), [<<177>>]);
      tReAnswer ->
         'enc_EventSpecificInformationBCSM_tReAnswer'(element(2,Val), [<<178>>]);
      facilitySelectedAndAvailable ->
         'enc_EventSpecificInformationBCSM_facilitySelectedAndAvailable'(element(2,Val), [<<179>>]);
      callAccepted ->
         'enc_EventSpecificInformationBCSM_callAccepted'(element(2,Val), [<<180>>]);
      oAbandon ->
         'enc_EventSpecificInformationBCSM_oAbandon'(element(2,Val), [<<181>>]);
      tAbandon ->
         'enc_EventSpecificInformationBCSM_tAbandon'(element(2,Val), [<<182>>]);
      authorizeRouteFailure ->
         'enc_EventSpecificInformationBCSM_authorizeRouteFailure'(element(2,Val), [<<183>>]);
      terminationAttemptAuthorized ->
         'enc_EventSpecificInformationBCSM_terminationAttemptAuthorized'(element(2,Val), [<<184>>]);
      orininationDenied ->
         'enc_EventSpecificInformationBCSM_orininationDenied'(element(2,Val), [<<185>>]);
      terminationDenied ->
         'enc_EventSpecificInformationBCSM_terminationDenied'(element(2,Val), [<<186>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  EventSpecificInformationBCSM_collectedInfoSpecificInfo
%%================================
'enc_EventSpecificInformationBCSM_collectedInfoSpecificInfo'(Val, TagIn) ->
   {_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute calledPartynumber(1)   External ACPdatatypes:CalledPartyNumber
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'ACPdatatypes':'enc_CalledPartyNumber'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  EventSpecificInformationBCSM_analysedInfoSpecificInfo
%%================================
'enc_EventSpecificInformationBCSM_analysedInfoSpecificInfo'(Val, TagIn) ->
   {_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute calledPartynumber(1)   External ACPdatatypes:CalledPartyNumber
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'ACPdatatypes':'enc_CalledPartyNumber'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  EventSpecificInformationBCSM_routeSelectFailureSpecificInfo
%%================================
'enc_EventSpecificInformationBCSM_routeSelectFailureSpecificInfo'(Val, TagIn) ->
   {_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute failureCause(1) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex1 of
normal -> encode_tags([<<128>>], [0], 1);
originationDenied -> encode_tags([<<128>>], [1], 1);
collectDigits -> encode_tags([<<128>>], [2], 1);
authorisationFailure -> encode_tags([<<128>>], [3], 1);
bPtyAlerted -> encode_tags([<<128>>], [4], 1);
noIndication -> encode_tags([<<128>>], [5], 1);
aPtyAbandon -> encode_tags([<<128>>], [6], 1);
invalidCollectedInformation -> encode_tags([<<128>>], [7], 1);
collectInformationFailure -> encode_tags([<<128>>], [8], 1);
aPtyDisc -> encode_tags([<<128>>], [9], 1);
bPtyDisc -> encode_tags([<<128>>], [10], 1);
routeSelectFailure -> encode_tags([<<128>>], [11], 1);
oNoAnswer -> encode_tags([<<128>>], [12], 1);
terminationDenied -> encode_tags([<<128>>], [13], 1);
notReachable -> encode_tags([<<128>>], [14], 1);
bPtyNoAnswer -> encode_tags([<<128>>], [15], 1);
bPtyBusyUDUB -> encode_tags([<<128>>], [16], 1);
bPtyBusyNDUB -> encode_tags([<<128>>], [17], 1);
ss7Failure -> encode_tags([<<128>>], [18], 1);
calledPartyRejected -> encode_tags([<<128>>], [19], 1);
tException -> encode_tags([<<128>>], [20], 1);
routeFailure1 -> encode_tags([<<128>>], [21], 1);
routeFailure2 -> encode_tags([<<128>>], [22], 1);
ssActivating -> encode_tags([<<128>>], [23], 1);
conversationTimeout -> encode_tags([<<128>>], [24], 1);
noCircuitAvailable -> encode_tags([<<128>>], [25], 1);
coreNotification -> encode_tags([<<128>>], [26], 1);
unsupportedMedia -> encode_tags([<<128>>], [27], 1);
numberIncomplete -> encode_tags([<<128>>], [28], 1);
invalidNumber -> encode_tags([<<128>>], [29], 1);
unassignedNumber -> encode_tags([<<128>>], [30], 1);
doNotDisturb -> encode_tags([<<128>>], [31], 1);
externalControlled -> encode_tags([<<128>>], [32], 1);
systemFailure -> encode_tags([<<128>>], [33], 1);
applicationNotification -> encode_tags([<<128>>], [34], 1);
referOk -> encode_tags([<<128>>], [35], 1);
referFailure -> encode_tags([<<128>>], [36], 1);
hole -> encode_tags([<<128>>], [37], 1);
hold -> encode_tags([<<128>>], [38], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end
       end,

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  EventSpecificInformationBCSM_oCalledPartyBusySpecificInfo
%%================================
'enc_EventSpecificInformationBCSM_oCalledPartyBusySpecificInfo'(Val, TagIn) ->
   {_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute busyCause(1) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex1 of
normal -> encode_tags([<<128>>], [0], 1);
originationDenied -> encode_tags([<<128>>], [1], 1);
collectDigits -> encode_tags([<<128>>], [2], 1);
authorisationFailure -> encode_tags([<<128>>], [3], 1);
bPtyAlerted -> encode_tags([<<128>>], [4], 1);
noIndication -> encode_tags([<<128>>], [5], 1);
aPtyAbandon -> encode_tags([<<128>>], [6], 1);
invalidCollectedInformation -> encode_tags([<<128>>], [7], 1);
collectInformationFailure -> encode_tags([<<128>>], [8], 1);
aPtyDisc -> encode_tags([<<128>>], [9], 1);
bPtyDisc -> encode_tags([<<128>>], [10], 1);
routeSelectFailure -> encode_tags([<<128>>], [11], 1);
oNoAnswer -> encode_tags([<<128>>], [12], 1);
terminationDenied -> encode_tags([<<128>>], [13], 1);
notReachable -> encode_tags([<<128>>], [14], 1);
bPtyNoAnswer -> encode_tags([<<128>>], [15], 1);
bPtyBusyUDUB -> encode_tags([<<128>>], [16], 1);
bPtyBusyNDUB -> encode_tags([<<128>>], [17], 1);
ss7Failure -> encode_tags([<<128>>], [18], 1);
calledPartyRejected -> encode_tags([<<128>>], [19], 1);
tException -> encode_tags([<<128>>], [20], 1);
routeFailure1 -> encode_tags([<<128>>], [21], 1);
routeFailure2 -> encode_tags([<<128>>], [22], 1);
ssActivating -> encode_tags([<<128>>], [23], 1);
conversationTimeout -> encode_tags([<<128>>], [24], 1);
noCircuitAvailable -> encode_tags([<<128>>], [25], 1);
coreNotification -> encode_tags([<<128>>], [26], 1);
unsupportedMedia -> encode_tags([<<128>>], [27], 1);
numberIncomplete -> encode_tags([<<128>>], [28], 1);
invalidNumber -> encode_tags([<<128>>], [29], 1);
unassignedNumber -> encode_tags([<<128>>], [30], 1);
doNotDisturb -> encode_tags([<<128>>], [31], 1);
externalControlled -> encode_tags([<<128>>], [32], 1);
systemFailure -> encode_tags([<<128>>], [33], 1);
applicationNotification -> encode_tags([<<128>>], [34], 1);
referOk -> encode_tags([<<128>>], [35], 1);
referFailure -> encode_tags([<<128>>], [36], 1);
hole -> encode_tags([<<128>>], [37], 1);
hold -> encode_tags([<<128>>], [38], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end
       end,

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  EventSpecificInformationBCSM_oNoAnswerSpecificInfo
%%================================
'enc_EventSpecificInformationBCSM_oNoAnswerSpecificInfo'(Val, TagIn) ->
   {_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  EventSpecificInformationBCSM_oAnswerSpecificInfo
%%================================
'enc_EventSpecificInformationBCSM_oAnswerSpecificInfo'(Val, TagIn) ->
   {_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute backwardGVNS(1) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex1, [<<128>>])
       end,

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  EventSpecificInformationBCSM_oMidCallSpecificInfo
%%================================
'enc_EventSpecificInformationBCSM_oMidCallSpecificInfo'(Val, TagIn) ->
   {_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute connectTime(1) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex1, [<<128>>])
       end,

%%-------------------------------------------------
%% attribute oMidCallInfo(2)   External INCS3datatypes:MidCallInfo OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_MidCallInfo'(Cindex2, [<<161>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  EventSpecificInformationBCSM_oDisconnectSpecificInfo
%%================================
'enc_EventSpecificInformationBCSM_oDisconnectSpecificInfo'(Val, TagIn) ->
   {_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute releaseCause(1) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex1 of
normal -> encode_tags([<<128>>], [0], 1);
originationDenied -> encode_tags([<<128>>], [1], 1);
collectDigits -> encode_tags([<<128>>], [2], 1);
authorisationFailure -> encode_tags([<<128>>], [3], 1);
bPtyAlerted -> encode_tags([<<128>>], [4], 1);
noIndication -> encode_tags([<<128>>], [5], 1);
aPtyAbandon -> encode_tags([<<128>>], [6], 1);
invalidCollectedInformation -> encode_tags([<<128>>], [7], 1);
collectInformationFailure -> encode_tags([<<128>>], [8], 1);
aPtyDisc -> encode_tags([<<128>>], [9], 1);
bPtyDisc -> encode_tags([<<128>>], [10], 1);
routeSelectFailure -> encode_tags([<<128>>], [11], 1);
oNoAnswer -> encode_tags([<<128>>], [12], 1);
terminationDenied -> encode_tags([<<128>>], [13], 1);
notReachable -> encode_tags([<<128>>], [14], 1);
bPtyNoAnswer -> encode_tags([<<128>>], [15], 1);
bPtyBusyUDUB -> encode_tags([<<128>>], [16], 1);
bPtyBusyNDUB -> encode_tags([<<128>>], [17], 1);
ss7Failure -> encode_tags([<<128>>], [18], 1);
calledPartyRejected -> encode_tags([<<128>>], [19], 1);
tException -> encode_tags([<<128>>], [20], 1);
routeFailure1 -> encode_tags([<<128>>], [21], 1);
routeFailure2 -> encode_tags([<<128>>], [22], 1);
ssActivating -> encode_tags([<<128>>], [23], 1);
conversationTimeout -> encode_tags([<<128>>], [24], 1);
noCircuitAvailable -> encode_tags([<<128>>], [25], 1);
coreNotification -> encode_tags([<<128>>], [26], 1);
unsupportedMedia -> encode_tags([<<128>>], [27], 1);
numberIncomplete -> encode_tags([<<128>>], [28], 1);
invalidNumber -> encode_tags([<<128>>], [29], 1);
unassignedNumber -> encode_tags([<<128>>], [30], 1);
doNotDisturb -> encode_tags([<<128>>], [31], 1);
externalControlled -> encode_tags([<<128>>], [32], 1);
systemFailure -> encode_tags([<<128>>], [33], 1);
applicationNotification -> encode_tags([<<128>>], [34], 1);
referOk -> encode_tags([<<128>>], [35], 1);
referFailure -> encode_tags([<<128>>], [36], 1);
hole -> encode_tags([<<128>>], [37], 1);
hold -> encode_tags([<<128>>], [38], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end
       end,

%%-------------------------------------------------
%% attribute connectTime(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex2, [<<129>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  EventSpecificInformationBCSM_tBusySpecificInfo
%%================================
'enc_EventSpecificInformationBCSM_tBusySpecificInfo'(Val, TagIn) ->
   {_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute busyCause(1) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex1 of
normal -> encode_tags([<<128>>], [0], 1);
originationDenied -> encode_tags([<<128>>], [1], 1);
collectDigits -> encode_tags([<<128>>], [2], 1);
authorisationFailure -> encode_tags([<<128>>], [3], 1);
bPtyAlerted -> encode_tags([<<128>>], [4], 1);
noIndication -> encode_tags([<<128>>], [5], 1);
aPtyAbandon -> encode_tags([<<128>>], [6], 1);
invalidCollectedInformation -> encode_tags([<<128>>], [7], 1);
collectInformationFailure -> encode_tags([<<128>>], [8], 1);
aPtyDisc -> encode_tags([<<128>>], [9], 1);
bPtyDisc -> encode_tags([<<128>>], [10], 1);
routeSelectFailure -> encode_tags([<<128>>], [11], 1);
oNoAnswer -> encode_tags([<<128>>], [12], 1);
terminationDenied -> encode_tags([<<128>>], [13], 1);
notReachable -> encode_tags([<<128>>], [14], 1);
bPtyNoAnswer -> encode_tags([<<128>>], [15], 1);
bPtyBusyUDUB -> encode_tags([<<128>>], [16], 1);
bPtyBusyNDUB -> encode_tags([<<128>>], [17], 1);
ss7Failure -> encode_tags([<<128>>], [18], 1);
calledPartyRejected -> encode_tags([<<128>>], [19], 1);
tException -> encode_tags([<<128>>], [20], 1);
routeFailure1 -> encode_tags([<<128>>], [21], 1);
routeFailure2 -> encode_tags([<<128>>], [22], 1);
ssActivating -> encode_tags([<<128>>], [23], 1);
conversationTimeout -> encode_tags([<<128>>], [24], 1);
noCircuitAvailable -> encode_tags([<<128>>], [25], 1);
coreNotification -> encode_tags([<<128>>], [26], 1);
unsupportedMedia -> encode_tags([<<128>>], [27], 1);
numberIncomplete -> encode_tags([<<128>>], [28], 1);
invalidNumber -> encode_tags([<<128>>], [29], 1);
unassignedNumber -> encode_tags([<<128>>], [30], 1);
doNotDisturb -> encode_tags([<<128>>], [31], 1);
externalControlled -> encode_tags([<<128>>], [32], 1);
systemFailure -> encode_tags([<<128>>], [33], 1);
applicationNotification -> encode_tags([<<128>>], [34], 1);
referOk -> encode_tags([<<128>>], [35], 1);
referFailure -> encode_tags([<<128>>], [36], 1);
hole -> encode_tags([<<128>>], [37], 1);
hold -> encode_tags([<<128>>], [38], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end
       end,

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  EventSpecificInformationBCSM_tNoAnswerSpecificInfo
%%================================
'enc_EventSpecificInformationBCSM_tNoAnswerSpecificInfo'(Val, TagIn) ->
   {_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  EventSpecificInformationBCSM_tAnswerSpecificInfo
%%================================
'enc_EventSpecificInformationBCSM_tAnswerSpecificInfo'(Val, TagIn) ->
   {_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  EventSpecificInformationBCSM_tMidCallSpecificInfo
%%================================
'enc_EventSpecificInformationBCSM_tMidCallSpecificInfo'(Val, TagIn) ->
   {_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute connectTime(1) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex1, [<<128>>])
       end,

%%-------------------------------------------------
%% attribute tMidCallInfo(2)   External INCS3datatypes:MidCallInfo OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_MidCallInfo'(Cindex2, [<<161>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  EventSpecificInformationBCSM_tDisconnectSpecificInfo
%%================================
'enc_EventSpecificInformationBCSM_tDisconnectSpecificInfo'(Val, TagIn) ->
   {_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute releaseCause(1) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex1 of
normal -> encode_tags([<<128>>], [0], 1);
originationDenied -> encode_tags([<<128>>], [1], 1);
collectDigits -> encode_tags([<<128>>], [2], 1);
authorisationFailure -> encode_tags([<<128>>], [3], 1);
bPtyAlerted -> encode_tags([<<128>>], [4], 1);
noIndication -> encode_tags([<<128>>], [5], 1);
aPtyAbandon -> encode_tags([<<128>>], [6], 1);
invalidCollectedInformation -> encode_tags([<<128>>], [7], 1);
collectInformationFailure -> encode_tags([<<128>>], [8], 1);
aPtyDisc -> encode_tags([<<128>>], [9], 1);
bPtyDisc -> encode_tags([<<128>>], [10], 1);
routeSelectFailure -> encode_tags([<<128>>], [11], 1);
oNoAnswer -> encode_tags([<<128>>], [12], 1);
terminationDenied -> encode_tags([<<128>>], [13], 1);
notReachable -> encode_tags([<<128>>], [14], 1);
bPtyNoAnswer -> encode_tags([<<128>>], [15], 1);
bPtyBusyUDUB -> encode_tags([<<128>>], [16], 1);
bPtyBusyNDUB -> encode_tags([<<128>>], [17], 1);
ss7Failure -> encode_tags([<<128>>], [18], 1);
calledPartyRejected -> encode_tags([<<128>>], [19], 1);
tException -> encode_tags([<<128>>], [20], 1);
routeFailure1 -> encode_tags([<<128>>], [21], 1);
routeFailure2 -> encode_tags([<<128>>], [22], 1);
ssActivating -> encode_tags([<<128>>], [23], 1);
conversationTimeout -> encode_tags([<<128>>], [24], 1);
noCircuitAvailable -> encode_tags([<<128>>], [25], 1);
coreNotification -> encode_tags([<<128>>], [26], 1);
unsupportedMedia -> encode_tags([<<128>>], [27], 1);
numberIncomplete -> encode_tags([<<128>>], [28], 1);
invalidNumber -> encode_tags([<<128>>], [29], 1);
unassignedNumber -> encode_tags([<<128>>], [30], 1);
doNotDisturb -> encode_tags([<<128>>], [31], 1);
externalControlled -> encode_tags([<<128>>], [32], 1);
systemFailure -> encode_tags([<<128>>], [33], 1);
applicationNotification -> encode_tags([<<128>>], [34], 1);
referOk -> encode_tags([<<128>>], [35], 1);
referFailure -> encode_tags([<<128>>], [36], 1);
hole -> encode_tags([<<128>>], [37], 1);
hold -> encode_tags([<<128>>], [38], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end
       end,

%%-------------------------------------------------
%% attribute connectTime(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex2, [<<129>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  EventSpecificInformationBCSM_oTermSeizedSpecificInfo
%%================================
'enc_EventSpecificInformationBCSM_oTermSeizedSpecificInfo'(Val, TagIn) ->
   {_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  EventSpecificInformationBCSM_oSuspend
%%================================
'enc_EventSpecificInformationBCSM_oSuspend'(Val, TagIn) ->
   {_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  EventSpecificInformationBCSM_tSuspend
%%================================
'enc_EventSpecificInformationBCSM_tSuspend'(Val, TagIn) ->
   {_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  EventSpecificInformationBCSM_origAttemptAuthorized
%%================================
'enc_EventSpecificInformationBCSM_origAttemptAuthorized'(Val, TagIn) ->
   {_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  EventSpecificInformationBCSM_oReAnswer
%%================================
'enc_EventSpecificInformationBCSM_oReAnswer'(Val, TagIn) ->
   {_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  EventSpecificInformationBCSM_tReAnswer
%%================================
'enc_EventSpecificInformationBCSM_tReAnswer'(Val, TagIn) ->
   {_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  EventSpecificInformationBCSM_facilitySelectedAndAvailable
%%================================
'enc_EventSpecificInformationBCSM_facilitySelectedAndAvailable'(Val, TagIn) ->
   {_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  EventSpecificInformationBCSM_callAccepted
%%================================
'enc_EventSpecificInformationBCSM_callAccepted'(Val, TagIn) ->
   {_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  EventSpecificInformationBCSM_oAbandon
%%================================
'enc_EventSpecificInformationBCSM_oAbandon'(Val, TagIn) ->
   {_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute abandonCause(1) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex1 of
normal -> encode_tags([<<128>>], [0], 1);
originationDenied -> encode_tags([<<128>>], [1], 1);
collectDigits -> encode_tags([<<128>>], [2], 1);
authorisationFailure -> encode_tags([<<128>>], [3], 1);
bPtyAlerted -> encode_tags([<<128>>], [4], 1);
noIndication -> encode_tags([<<128>>], [5], 1);
aPtyAbandon -> encode_tags([<<128>>], [6], 1);
invalidCollectedInformation -> encode_tags([<<128>>], [7], 1);
collectInformationFailure -> encode_tags([<<128>>], [8], 1);
aPtyDisc -> encode_tags([<<128>>], [9], 1);
bPtyDisc -> encode_tags([<<128>>], [10], 1);
routeSelectFailure -> encode_tags([<<128>>], [11], 1);
oNoAnswer -> encode_tags([<<128>>], [12], 1);
terminationDenied -> encode_tags([<<128>>], [13], 1);
notReachable -> encode_tags([<<128>>], [14], 1);
bPtyNoAnswer -> encode_tags([<<128>>], [15], 1);
bPtyBusyUDUB -> encode_tags([<<128>>], [16], 1);
bPtyBusyNDUB -> encode_tags([<<128>>], [17], 1);
ss7Failure -> encode_tags([<<128>>], [18], 1);
calledPartyRejected -> encode_tags([<<128>>], [19], 1);
tException -> encode_tags([<<128>>], [20], 1);
routeFailure1 -> encode_tags([<<128>>], [21], 1);
routeFailure2 -> encode_tags([<<128>>], [22], 1);
ssActivating -> encode_tags([<<128>>], [23], 1);
conversationTimeout -> encode_tags([<<128>>], [24], 1);
noCircuitAvailable -> encode_tags([<<128>>], [25], 1);
coreNotification -> encode_tags([<<128>>], [26], 1);
unsupportedMedia -> encode_tags([<<128>>], [27], 1);
numberIncomplete -> encode_tags([<<128>>], [28], 1);
invalidNumber -> encode_tags([<<128>>], [29], 1);
unassignedNumber -> encode_tags([<<128>>], [30], 1);
doNotDisturb -> encode_tags([<<128>>], [31], 1);
externalControlled -> encode_tags([<<128>>], [32], 1);
systemFailure -> encode_tags([<<128>>], [33], 1);
applicationNotification -> encode_tags([<<128>>], [34], 1);
referOk -> encode_tags([<<128>>], [35], 1);
referFailure -> encode_tags([<<128>>], [36], 1);
hole -> encode_tags([<<128>>], [37], 1);
hold -> encode_tags([<<128>>], [38], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end
       end,

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  EventSpecificInformationBCSM_tAbandon
%%================================
'enc_EventSpecificInformationBCSM_tAbandon'(Val, TagIn) ->
   {_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute abandonCause(1) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex1 of
normal -> encode_tags([<<128>>], [0], 1);
originationDenied -> encode_tags([<<128>>], [1], 1);
collectDigits -> encode_tags([<<128>>], [2], 1);
authorisationFailure -> encode_tags([<<128>>], [3], 1);
bPtyAlerted -> encode_tags([<<128>>], [4], 1);
noIndication -> encode_tags([<<128>>], [5], 1);
aPtyAbandon -> encode_tags([<<128>>], [6], 1);
invalidCollectedInformation -> encode_tags([<<128>>], [7], 1);
collectInformationFailure -> encode_tags([<<128>>], [8], 1);
aPtyDisc -> encode_tags([<<128>>], [9], 1);
bPtyDisc -> encode_tags([<<128>>], [10], 1);
routeSelectFailure -> encode_tags([<<128>>], [11], 1);
oNoAnswer -> encode_tags([<<128>>], [12], 1);
terminationDenied -> encode_tags([<<128>>], [13], 1);
notReachable -> encode_tags([<<128>>], [14], 1);
bPtyNoAnswer -> encode_tags([<<128>>], [15], 1);
bPtyBusyUDUB -> encode_tags([<<128>>], [16], 1);
bPtyBusyNDUB -> encode_tags([<<128>>], [17], 1);
ss7Failure -> encode_tags([<<128>>], [18], 1);
calledPartyRejected -> encode_tags([<<128>>], [19], 1);
tException -> encode_tags([<<128>>], [20], 1);
routeFailure1 -> encode_tags([<<128>>], [21], 1);
routeFailure2 -> encode_tags([<<128>>], [22], 1);
ssActivating -> encode_tags([<<128>>], [23], 1);
conversationTimeout -> encode_tags([<<128>>], [24], 1);
noCircuitAvailable -> encode_tags([<<128>>], [25], 1);
coreNotification -> encode_tags([<<128>>], [26], 1);
unsupportedMedia -> encode_tags([<<128>>], [27], 1);
numberIncomplete -> encode_tags([<<128>>], [28], 1);
invalidNumber -> encode_tags([<<128>>], [29], 1);
unassignedNumber -> encode_tags([<<128>>], [30], 1);
doNotDisturb -> encode_tags([<<128>>], [31], 1);
externalControlled -> encode_tags([<<128>>], [32], 1);
systemFailure -> encode_tags([<<128>>], [33], 1);
applicationNotification -> encode_tags([<<128>>], [34], 1);
referOk -> encode_tags([<<128>>], [35], 1);
referFailure -> encode_tags([<<128>>], [36], 1);
hole -> encode_tags([<<128>>], [37], 1);
hold -> encode_tags([<<128>>], [38], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end
       end,

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  EventSpecificInformationBCSM_authorizeRouteFailure
%%================================
'enc_EventSpecificInformationBCSM_authorizeRouteFailure'(Val, TagIn) ->
   {_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute authoriseRouteFailureCause(1) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex1 of
normal -> encode_tags([<<128>>], [0], 1);
originationDenied -> encode_tags([<<128>>], [1], 1);
collectDigits -> encode_tags([<<128>>], [2], 1);
authorisationFailure -> encode_tags([<<128>>], [3], 1);
bPtyAlerted -> encode_tags([<<128>>], [4], 1);
noIndication -> encode_tags([<<128>>], [5], 1);
aPtyAbandon -> encode_tags([<<128>>], [6], 1);
invalidCollectedInformation -> encode_tags([<<128>>], [7], 1);
collectInformationFailure -> encode_tags([<<128>>], [8], 1);
aPtyDisc -> encode_tags([<<128>>], [9], 1);
bPtyDisc -> encode_tags([<<128>>], [10], 1);
routeSelectFailure -> encode_tags([<<128>>], [11], 1);
oNoAnswer -> encode_tags([<<128>>], [12], 1);
terminationDenied -> encode_tags([<<128>>], [13], 1);
notReachable -> encode_tags([<<128>>], [14], 1);
bPtyNoAnswer -> encode_tags([<<128>>], [15], 1);
bPtyBusyUDUB -> encode_tags([<<128>>], [16], 1);
bPtyBusyNDUB -> encode_tags([<<128>>], [17], 1);
ss7Failure -> encode_tags([<<128>>], [18], 1);
calledPartyRejected -> encode_tags([<<128>>], [19], 1);
tException -> encode_tags([<<128>>], [20], 1);
routeFailure1 -> encode_tags([<<128>>], [21], 1);
routeFailure2 -> encode_tags([<<128>>], [22], 1);
ssActivating -> encode_tags([<<128>>], [23], 1);
conversationTimeout -> encode_tags([<<128>>], [24], 1);
noCircuitAvailable -> encode_tags([<<128>>], [25], 1);
coreNotification -> encode_tags([<<128>>], [26], 1);
unsupportedMedia -> encode_tags([<<128>>], [27], 1);
numberIncomplete -> encode_tags([<<128>>], [28], 1);
invalidNumber -> encode_tags([<<128>>], [29], 1);
unassignedNumber -> encode_tags([<<128>>], [30], 1);
doNotDisturb -> encode_tags([<<128>>], [31], 1);
externalControlled -> encode_tags([<<128>>], [32], 1);
systemFailure -> encode_tags([<<128>>], [33], 1);
applicationNotification -> encode_tags([<<128>>], [34], 1);
referOk -> encode_tags([<<128>>], [35], 1);
referFailure -> encode_tags([<<128>>], [36], 1);
hole -> encode_tags([<<128>>], [37], 1);
hold -> encode_tags([<<128>>], [38], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end
       end,

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  EventSpecificInformationBCSM_terminationAttemptAuthorized
%%================================
'enc_EventSpecificInformationBCSM_terminationAttemptAuthorized'(Val, TagIn) ->
   {_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  EventSpecificInformationBCSM_orininationDenied
%%================================
'enc_EventSpecificInformationBCSM_orininationDenied'(Val, TagIn) ->
   {_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute originationDeniedCause(1) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex1 of
normal -> encode_tags([<<128>>], [0], 1);
originationDenied -> encode_tags([<<128>>], [1], 1);
collectDigits -> encode_tags([<<128>>], [2], 1);
authorisationFailure -> encode_tags([<<128>>], [3], 1);
bPtyAlerted -> encode_tags([<<128>>], [4], 1);
noIndication -> encode_tags([<<128>>], [5], 1);
aPtyAbandon -> encode_tags([<<128>>], [6], 1);
invalidCollectedInformation -> encode_tags([<<128>>], [7], 1);
collectInformationFailure -> encode_tags([<<128>>], [8], 1);
aPtyDisc -> encode_tags([<<128>>], [9], 1);
bPtyDisc -> encode_tags([<<128>>], [10], 1);
routeSelectFailure -> encode_tags([<<128>>], [11], 1);
oNoAnswer -> encode_tags([<<128>>], [12], 1);
terminationDenied -> encode_tags([<<128>>], [13], 1);
notReachable -> encode_tags([<<128>>], [14], 1);
bPtyNoAnswer -> encode_tags([<<128>>], [15], 1);
bPtyBusyUDUB -> encode_tags([<<128>>], [16], 1);
bPtyBusyNDUB -> encode_tags([<<128>>], [17], 1);
ss7Failure -> encode_tags([<<128>>], [18], 1);
calledPartyRejected -> encode_tags([<<128>>], [19], 1);
tException -> encode_tags([<<128>>], [20], 1);
routeFailure1 -> encode_tags([<<128>>], [21], 1);
routeFailure2 -> encode_tags([<<128>>], [22], 1);
ssActivating -> encode_tags([<<128>>], [23], 1);
conversationTimeout -> encode_tags([<<128>>], [24], 1);
noCircuitAvailable -> encode_tags([<<128>>], [25], 1);
coreNotification -> encode_tags([<<128>>], [26], 1);
unsupportedMedia -> encode_tags([<<128>>], [27], 1);
numberIncomplete -> encode_tags([<<128>>], [28], 1);
invalidNumber -> encode_tags([<<128>>], [29], 1);
unassignedNumber -> encode_tags([<<128>>], [30], 1);
doNotDisturb -> encode_tags([<<128>>], [31], 1);
externalControlled -> encode_tags([<<128>>], [32], 1);
systemFailure -> encode_tags([<<128>>], [33], 1);
applicationNotification -> encode_tags([<<128>>], [34], 1);
referOk -> encode_tags([<<128>>], [35], 1);
referFailure -> encode_tags([<<128>>], [36], 1);
hole -> encode_tags([<<128>>], [37], 1);
hold -> encode_tags([<<128>>], [38], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end
       end,

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  EventSpecificInformationBCSM_terminationDenied
%%================================
'enc_EventSpecificInformationBCSM_terminationDenied'(Val, TagIn) ->
   {_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute terminationDeniedCause(1) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex1 of
normal -> encode_tags([<<128>>], [0], 1);
originationDenied -> encode_tags([<<128>>], [1], 1);
collectDigits -> encode_tags([<<128>>], [2], 1);
authorisationFailure -> encode_tags([<<128>>], [3], 1);
bPtyAlerted -> encode_tags([<<128>>], [4], 1);
noIndication -> encode_tags([<<128>>], [5], 1);
aPtyAbandon -> encode_tags([<<128>>], [6], 1);
invalidCollectedInformation -> encode_tags([<<128>>], [7], 1);
collectInformationFailure -> encode_tags([<<128>>], [8], 1);
aPtyDisc -> encode_tags([<<128>>], [9], 1);
bPtyDisc -> encode_tags([<<128>>], [10], 1);
routeSelectFailure -> encode_tags([<<128>>], [11], 1);
oNoAnswer -> encode_tags([<<128>>], [12], 1);
terminationDenied -> encode_tags([<<128>>], [13], 1);
notReachable -> encode_tags([<<128>>], [14], 1);
bPtyNoAnswer -> encode_tags([<<128>>], [15], 1);
bPtyBusyUDUB -> encode_tags([<<128>>], [16], 1);
bPtyBusyNDUB -> encode_tags([<<128>>], [17], 1);
ss7Failure -> encode_tags([<<128>>], [18], 1);
calledPartyRejected -> encode_tags([<<128>>], [19], 1);
tException -> encode_tags([<<128>>], [20], 1);
routeFailure1 -> encode_tags([<<128>>], [21], 1);
routeFailure2 -> encode_tags([<<128>>], [22], 1);
ssActivating -> encode_tags([<<128>>], [23], 1);
conversationTimeout -> encode_tags([<<128>>], [24], 1);
noCircuitAvailable -> encode_tags([<<128>>], [25], 1);
coreNotification -> encode_tags([<<128>>], [26], 1);
unsupportedMedia -> encode_tags([<<128>>], [27], 1);
numberIncomplete -> encode_tags([<<128>>], [28], 1);
invalidNumber -> encode_tags([<<128>>], [29], 1);
unassignedNumber -> encode_tags([<<128>>], [30], 1);
doNotDisturb -> encode_tags([<<128>>], [31], 1);
externalControlled -> encode_tags([<<128>>], [32], 1);
systemFailure -> encode_tags([<<128>>], [33], 1);
applicationNotification -> encode_tags([<<128>>], [34], 1);
referOk -> encode_tags([<<128>>], [35], 1);
referFailure -> encode_tags([<<128>>], [36], 1);
hole -> encode_tags([<<128>>], [37], 1);
hold -> encode_tags([<<128>>], [38], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end
       end,

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_EventSpecificInformationBCSM'(Tlv) ->
   'dec_EventSpecificInformationBCSM'(Tlv, []).

'dec_EventSpecificInformationBCSM'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'collectedInfoSpecificInfo'
    {131072, V1} -> 
        {collectedInfoSpecificInfo, 'dec_EventSpecificInformationBCSM_collectedInfoSpecificInfo'(V1, [])};


%% 'analysedInfoSpecificInfo'
    {131073, V1} -> 
        {analysedInfoSpecificInfo, 'dec_EventSpecificInformationBCSM_analysedInfoSpecificInfo'(V1, [])};


%% 'routeSelectFailureSpecificInfo'
    {131074, V1} -> 
        {routeSelectFailureSpecificInfo, 'dec_EventSpecificInformationBCSM_routeSelectFailureSpecificInfo'(V1, [])};


%% 'oCalledPartyBusySpecificInfo'
    {131075, V1} -> 
        {oCalledPartyBusySpecificInfo, 'dec_EventSpecificInformationBCSM_oCalledPartyBusySpecificInfo'(V1, [])};


%% 'oNoAnswerSpecificInfo'
    {131076, V1} -> 
        {oNoAnswerSpecificInfo, 'dec_EventSpecificInformationBCSM_oNoAnswerSpecificInfo'(V1, [])};


%% 'oAnswerSpecificInfo'
    {131077, V1} -> 
        {oAnswerSpecificInfo, 'dec_EventSpecificInformationBCSM_oAnswerSpecificInfo'(V1, [])};


%% 'oMidCallSpecificInfo'
    {131078, V1} -> 
        {oMidCallSpecificInfo, 'dec_EventSpecificInformationBCSM_oMidCallSpecificInfo'(V1, [])};


%% 'oDisconnectSpecificInfo'
    {131079, V1} -> 
        {oDisconnectSpecificInfo, 'dec_EventSpecificInformationBCSM_oDisconnectSpecificInfo'(V1, [])};


%% 'tBusySpecificInfo'
    {131080, V1} -> 
        {tBusySpecificInfo, 'dec_EventSpecificInformationBCSM_tBusySpecificInfo'(V1, [])};


%% 'tNoAnswerSpecificInfo'
    {131081, V1} -> 
        {tNoAnswerSpecificInfo, 'dec_EventSpecificInformationBCSM_tNoAnswerSpecificInfo'(V1, [])};


%% 'tAnswerSpecificInfo'
    {131082, V1} -> 
        {tAnswerSpecificInfo, 'dec_EventSpecificInformationBCSM_tAnswerSpecificInfo'(V1, [])};


%% 'tMidCallSpecificInfo'
    {131083, V1} -> 
        {tMidCallSpecificInfo, 'dec_EventSpecificInformationBCSM_tMidCallSpecificInfo'(V1, [])};


%% 'tDisconnectSpecificInfo'
    {131084, V1} -> 
        {tDisconnectSpecificInfo, 'dec_EventSpecificInformationBCSM_tDisconnectSpecificInfo'(V1, [])};


%% 'oTermSeizedSpecificInfo'
    {131085, V1} -> 
        {oTermSeizedSpecificInfo, 'dec_EventSpecificInformationBCSM_oTermSeizedSpecificInfo'(V1, [])};


%% 'oSuspend'
    {131086, V1} -> 
        {oSuspend, 'dec_EventSpecificInformationBCSM_oSuspend'(V1, [])};


%% 'tSuspend'
    {131087, V1} -> 
        {tSuspend, 'dec_EventSpecificInformationBCSM_tSuspend'(V1, [])};


%% 'origAttemptAuthorized'
    {131088, V1} -> 
        {origAttemptAuthorized, 'dec_EventSpecificInformationBCSM_origAttemptAuthorized'(V1, [])};


%% 'oReAnswer'
    {131089, V1} -> 
        {oReAnswer, 'dec_EventSpecificInformationBCSM_oReAnswer'(V1, [])};


%% 'tReAnswer'
    {131090, V1} -> 
        {tReAnswer, 'dec_EventSpecificInformationBCSM_tReAnswer'(V1, [])};


%% 'facilitySelectedAndAvailable'
    {131091, V1} -> 
        {facilitySelectedAndAvailable, 'dec_EventSpecificInformationBCSM_facilitySelectedAndAvailable'(V1, [])};


%% 'callAccepted'
    {131092, V1} -> 
        {callAccepted, 'dec_EventSpecificInformationBCSM_callAccepted'(V1, [])};


%% 'oAbandon'
    {131093, V1} -> 
        {oAbandon, 'dec_EventSpecificInformationBCSM_oAbandon'(V1, [])};


%% 'tAbandon'
    {131094, V1} -> 
        {tAbandon, 'dec_EventSpecificInformationBCSM_tAbandon'(V1, [])};


%% 'authorizeRouteFailure'
    {131095, V1} -> 
        {authorizeRouteFailure, 'dec_EventSpecificInformationBCSM_authorizeRouteFailure'(V1, [])};


%% 'terminationAttemptAuthorized'
    {131096, V1} -> 
        {terminationAttemptAuthorized, 'dec_EventSpecificInformationBCSM_terminationAttemptAuthorized'(V1, [])};


%% 'orininationDenied'
    {131097, V1} -> 
        {orininationDenied, 'dec_EventSpecificInformationBCSM_orininationDenied'(V1, [])};


%% 'terminationDenied'
    {131098, V1} -> 
        {terminationDenied, 'dec_EventSpecificInformationBCSM_terminationDenied'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.
'dec_EventSpecificInformationBCSM_collectedInfoSpecificInfo'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute calledPartynumber(1)   External ACPdatatypes:CalledPartyNumber
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'ACPdatatypes':'dec_CalledPartyNumber'(V1, [131072]),

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'EventSpecificInformationBCSM_collectedInfoSpecificInfo', Term1}.

'dec_EventSpecificInformationBCSM_analysedInfoSpecificInfo'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute calledPartynumber(1)   External ACPdatatypes:CalledPartyNumber
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'ACPdatatypes':'dec_CalledPartyNumber'(V1, [131072]),

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'EventSpecificInformationBCSM_analysedInfoSpecificInfo', Term1}.

'dec_EventSpecificInformationBCSM_routeSelectFailureSpecificInfo'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute failureCause(1) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {case decode_integer(V1, []) of
0 -> normal;
1 -> originationDenied;
2 -> collectDigits;
3 -> authorisationFailure;
4 -> bPtyAlerted;
5 -> noIndication;
6 -> aPtyAbandon;
7 -> invalidCollectedInformation;
8 -> collectInformationFailure;
9 -> aPtyDisc;
10 -> bPtyDisc;
11 -> routeSelectFailure;
12 -> oNoAnswer;
13 -> terminationDenied;
14 -> notReachable;
15 -> bPtyNoAnswer;
16 -> bPtyBusyUDUB;
17 -> bPtyBusyNDUB;
18 -> ss7Failure;
19 -> calledPartyRejected;
20 -> tException;
21 -> routeFailure1;
22 -> routeFailure2;
23 -> ssActivating;
24 -> conversationTimeout;
25 -> noCircuitAvailable;
26 -> coreNotification;
27 -> unsupportedMedia;
28 -> numberIncomplete;
29 -> invalidNumber;
30 -> unassignedNumber;
31 -> doNotDisturb;
32 -> externalControlled;
33 -> systemFailure;
34 -> applicationNotification;
35 -> referOk;
36 -> referFailure;
37 -> hole;
38 -> hold;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end, TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'EventSpecificInformationBCSM_routeSelectFailureSpecificInfo', Term1}.

'dec_EventSpecificInformationBCSM_oCalledPartyBusySpecificInfo'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute busyCause(1) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {case decode_integer(V1, []) of
0 -> normal;
1 -> originationDenied;
2 -> collectDigits;
3 -> authorisationFailure;
4 -> bPtyAlerted;
5 -> noIndication;
6 -> aPtyAbandon;
7 -> invalidCollectedInformation;
8 -> collectInformationFailure;
9 -> aPtyDisc;
10 -> bPtyDisc;
11 -> routeSelectFailure;
12 -> oNoAnswer;
13 -> terminationDenied;
14 -> notReachable;
15 -> bPtyNoAnswer;
16 -> bPtyBusyUDUB;
17 -> bPtyBusyNDUB;
18 -> ss7Failure;
19 -> calledPartyRejected;
20 -> tException;
21 -> routeFailure1;
22 -> routeFailure2;
23 -> ssActivating;
24 -> conversationTimeout;
25 -> noCircuitAvailable;
26 -> coreNotification;
27 -> unsupportedMedia;
28 -> numberIncomplete;
29 -> invalidNumber;
30 -> unassignedNumber;
31 -> doNotDisturb;
32 -> externalControlled;
33 -> systemFailure;
34 -> applicationNotification;
35 -> referOk;
36 -> referFailure;
37 -> hole;
38 -> hold;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end, TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'EventSpecificInformationBCSM_oCalledPartyBusySpecificInfo', Term1}.

'dec_EventSpecificInformationBCSM_oNoAnswerSpecificInfo'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'EventSpecificInformationBCSM_oNoAnswerSpecificInfo'}.

'dec_EventSpecificInformationBCSM_oAnswerSpecificInfo'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute backwardGVNS(1) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {begin
Val1 = decode_octet_string(V1, []),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 27 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'EventSpecificInformationBCSM_oAnswerSpecificInfo', Term1}.

'dec_EventSpecificInformationBCSM_oMidCallSpecificInfo'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute connectTime(1) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {begin
Val1 = decode_integer(V1, []),
if 0 =< Val1, Val1 =< 2147483647 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute oMidCallInfo(2)   External INCS3datatypes:MidCallInfo OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_MidCallInfo'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'EventSpecificInformationBCSM_oMidCallSpecificInfo', Term1, Term2}.

'dec_EventSpecificInformationBCSM_oDisconnectSpecificInfo'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute releaseCause(1) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {case decode_integer(V1, []) of
0 -> normal;
1 -> originationDenied;
2 -> collectDigits;
3 -> authorisationFailure;
4 -> bPtyAlerted;
5 -> noIndication;
6 -> aPtyAbandon;
7 -> invalidCollectedInformation;
8 -> collectInformationFailure;
9 -> aPtyDisc;
10 -> bPtyDisc;
11 -> routeSelectFailure;
12 -> oNoAnswer;
13 -> terminationDenied;
14 -> notReachable;
15 -> bPtyNoAnswer;
16 -> bPtyBusyUDUB;
17 -> bPtyBusyNDUB;
18 -> ss7Failure;
19 -> calledPartyRejected;
20 -> tException;
21 -> routeFailure1;
22 -> routeFailure2;
23 -> ssActivating;
24 -> conversationTimeout;
25 -> noCircuitAvailable;
26 -> coreNotification;
27 -> unsupportedMedia;
28 -> numberIncomplete;
29 -> invalidNumber;
30 -> unassignedNumber;
31 -> doNotDisturb;
32 -> externalControlled;
33 -> systemFailure;
34 -> applicationNotification;
35 -> referOk;
36 -> referFailure;
37 -> hole;
38 -> hold;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end, TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute connectTime(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
Val1 = decode_integer(V2, []),
if 0 =< Val1, Val1 =< 2147483647 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'EventSpecificInformationBCSM_oDisconnectSpecificInfo', Term1, Term2}.

'dec_EventSpecificInformationBCSM_tBusySpecificInfo'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute busyCause(1) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {case decode_integer(V1, []) of
0 -> normal;
1 -> originationDenied;
2 -> collectDigits;
3 -> authorisationFailure;
4 -> bPtyAlerted;
5 -> noIndication;
6 -> aPtyAbandon;
7 -> invalidCollectedInformation;
8 -> collectInformationFailure;
9 -> aPtyDisc;
10 -> bPtyDisc;
11 -> routeSelectFailure;
12 -> oNoAnswer;
13 -> terminationDenied;
14 -> notReachable;
15 -> bPtyNoAnswer;
16 -> bPtyBusyUDUB;
17 -> bPtyBusyNDUB;
18 -> ss7Failure;
19 -> calledPartyRejected;
20 -> tException;
21 -> routeFailure1;
22 -> routeFailure2;
23 -> ssActivating;
24 -> conversationTimeout;
25 -> noCircuitAvailable;
26 -> coreNotification;
27 -> unsupportedMedia;
28 -> numberIncomplete;
29 -> invalidNumber;
30 -> unassignedNumber;
31 -> doNotDisturb;
32 -> externalControlled;
33 -> systemFailure;
34 -> applicationNotification;
35 -> referOk;
36 -> referFailure;
37 -> hole;
38 -> hold;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end, TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'EventSpecificInformationBCSM_tBusySpecificInfo', Term1}.

'dec_EventSpecificInformationBCSM_tNoAnswerSpecificInfo'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'EventSpecificInformationBCSM_tNoAnswerSpecificInfo'}.

'dec_EventSpecificInformationBCSM_tAnswerSpecificInfo'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'EventSpecificInformationBCSM_tAnswerSpecificInfo'}.

'dec_EventSpecificInformationBCSM_tMidCallSpecificInfo'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute connectTime(1) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {begin
Val1 = decode_integer(V1, []),
if 0 =< Val1, Val1 =< 2147483647 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute tMidCallInfo(2)   External INCS3datatypes:MidCallInfo OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_MidCallInfo'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'EventSpecificInformationBCSM_tMidCallSpecificInfo', Term1, Term2}.

'dec_EventSpecificInformationBCSM_tDisconnectSpecificInfo'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute releaseCause(1) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {case decode_integer(V1, []) of
0 -> normal;
1 -> originationDenied;
2 -> collectDigits;
3 -> authorisationFailure;
4 -> bPtyAlerted;
5 -> noIndication;
6 -> aPtyAbandon;
7 -> invalidCollectedInformation;
8 -> collectInformationFailure;
9 -> aPtyDisc;
10 -> bPtyDisc;
11 -> routeSelectFailure;
12 -> oNoAnswer;
13 -> terminationDenied;
14 -> notReachable;
15 -> bPtyNoAnswer;
16 -> bPtyBusyUDUB;
17 -> bPtyBusyNDUB;
18 -> ss7Failure;
19 -> calledPartyRejected;
20 -> tException;
21 -> routeFailure1;
22 -> routeFailure2;
23 -> ssActivating;
24 -> conversationTimeout;
25 -> noCircuitAvailable;
26 -> coreNotification;
27 -> unsupportedMedia;
28 -> numberIncomplete;
29 -> invalidNumber;
30 -> unassignedNumber;
31 -> doNotDisturb;
32 -> externalControlled;
33 -> systemFailure;
34 -> applicationNotification;
35 -> referOk;
36 -> referFailure;
37 -> hole;
38 -> hold;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end, TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute connectTime(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
Val1 = decode_integer(V2, []),
if 0 =< Val1, Val1 =< 2147483647 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'EventSpecificInformationBCSM_tDisconnectSpecificInfo', Term1, Term2}.

'dec_EventSpecificInformationBCSM_oTermSeizedSpecificInfo'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'EventSpecificInformationBCSM_oTermSeizedSpecificInfo'}.

'dec_EventSpecificInformationBCSM_oSuspend'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'EventSpecificInformationBCSM_oSuspend'}.

'dec_EventSpecificInformationBCSM_tSuspend'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'EventSpecificInformationBCSM_tSuspend'}.

'dec_EventSpecificInformationBCSM_origAttemptAuthorized'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'EventSpecificInformationBCSM_origAttemptAuthorized'}.

'dec_EventSpecificInformationBCSM_oReAnswer'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'EventSpecificInformationBCSM_oReAnswer'}.

'dec_EventSpecificInformationBCSM_tReAnswer'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'EventSpecificInformationBCSM_tReAnswer'}.

'dec_EventSpecificInformationBCSM_facilitySelectedAndAvailable'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'EventSpecificInformationBCSM_facilitySelectedAndAvailable'}.

'dec_EventSpecificInformationBCSM_callAccepted'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'EventSpecificInformationBCSM_callAccepted'}.

'dec_EventSpecificInformationBCSM_oAbandon'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute abandonCause(1) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {case decode_integer(V1, []) of
0 -> normal;
1 -> originationDenied;
2 -> collectDigits;
3 -> authorisationFailure;
4 -> bPtyAlerted;
5 -> noIndication;
6 -> aPtyAbandon;
7 -> invalidCollectedInformation;
8 -> collectInformationFailure;
9 -> aPtyDisc;
10 -> bPtyDisc;
11 -> routeSelectFailure;
12 -> oNoAnswer;
13 -> terminationDenied;
14 -> notReachable;
15 -> bPtyNoAnswer;
16 -> bPtyBusyUDUB;
17 -> bPtyBusyNDUB;
18 -> ss7Failure;
19 -> calledPartyRejected;
20 -> tException;
21 -> routeFailure1;
22 -> routeFailure2;
23 -> ssActivating;
24 -> conversationTimeout;
25 -> noCircuitAvailable;
26 -> coreNotification;
27 -> unsupportedMedia;
28 -> numberIncomplete;
29 -> invalidNumber;
30 -> unassignedNumber;
31 -> doNotDisturb;
32 -> externalControlled;
33 -> systemFailure;
34 -> applicationNotification;
35 -> referOk;
36 -> referFailure;
37 -> hole;
38 -> hold;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end, TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'EventSpecificInformationBCSM_oAbandon', Term1}.

'dec_EventSpecificInformationBCSM_tAbandon'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute abandonCause(1) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {case decode_integer(V1, []) of
0 -> normal;
1 -> originationDenied;
2 -> collectDigits;
3 -> authorisationFailure;
4 -> bPtyAlerted;
5 -> noIndication;
6 -> aPtyAbandon;
7 -> invalidCollectedInformation;
8 -> collectInformationFailure;
9 -> aPtyDisc;
10 -> bPtyDisc;
11 -> routeSelectFailure;
12 -> oNoAnswer;
13 -> terminationDenied;
14 -> notReachable;
15 -> bPtyNoAnswer;
16 -> bPtyBusyUDUB;
17 -> bPtyBusyNDUB;
18 -> ss7Failure;
19 -> calledPartyRejected;
20 -> tException;
21 -> routeFailure1;
22 -> routeFailure2;
23 -> ssActivating;
24 -> conversationTimeout;
25 -> noCircuitAvailable;
26 -> coreNotification;
27 -> unsupportedMedia;
28 -> numberIncomplete;
29 -> invalidNumber;
30 -> unassignedNumber;
31 -> doNotDisturb;
32 -> externalControlled;
33 -> systemFailure;
34 -> applicationNotification;
35 -> referOk;
36 -> referFailure;
37 -> hole;
38 -> hold;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end, TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'EventSpecificInformationBCSM_tAbandon', Term1}.

'dec_EventSpecificInformationBCSM_authorizeRouteFailure'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute authoriseRouteFailureCause(1) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {case decode_integer(V1, []) of
0 -> normal;
1 -> originationDenied;
2 -> collectDigits;
3 -> authorisationFailure;
4 -> bPtyAlerted;
5 -> noIndication;
6 -> aPtyAbandon;
7 -> invalidCollectedInformation;
8 -> collectInformationFailure;
9 -> aPtyDisc;
10 -> bPtyDisc;
11 -> routeSelectFailure;
12 -> oNoAnswer;
13 -> terminationDenied;
14 -> notReachable;
15 -> bPtyNoAnswer;
16 -> bPtyBusyUDUB;
17 -> bPtyBusyNDUB;
18 -> ss7Failure;
19 -> calledPartyRejected;
20 -> tException;
21 -> routeFailure1;
22 -> routeFailure2;
23 -> ssActivating;
24 -> conversationTimeout;
25 -> noCircuitAvailable;
26 -> coreNotification;
27 -> unsupportedMedia;
28 -> numberIncomplete;
29 -> invalidNumber;
30 -> unassignedNumber;
31 -> doNotDisturb;
32 -> externalControlled;
33 -> systemFailure;
34 -> applicationNotification;
35 -> referOk;
36 -> referFailure;
37 -> hole;
38 -> hold;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end, TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'EventSpecificInformationBCSM_authorizeRouteFailure', Term1}.

'dec_EventSpecificInformationBCSM_terminationAttemptAuthorized'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'EventSpecificInformationBCSM_terminationAttemptAuthorized'}.

'dec_EventSpecificInformationBCSM_orininationDenied'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute originationDeniedCause(1) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {case decode_integer(V1, []) of
0 -> normal;
1 -> originationDenied;
2 -> collectDigits;
3 -> authorisationFailure;
4 -> bPtyAlerted;
5 -> noIndication;
6 -> aPtyAbandon;
7 -> invalidCollectedInformation;
8 -> collectInformationFailure;
9 -> aPtyDisc;
10 -> bPtyDisc;
11 -> routeSelectFailure;
12 -> oNoAnswer;
13 -> terminationDenied;
14 -> notReachable;
15 -> bPtyNoAnswer;
16 -> bPtyBusyUDUB;
17 -> bPtyBusyNDUB;
18 -> ss7Failure;
19 -> calledPartyRejected;
20 -> tException;
21 -> routeFailure1;
22 -> routeFailure2;
23 -> ssActivating;
24 -> conversationTimeout;
25 -> noCircuitAvailable;
26 -> coreNotification;
27 -> unsupportedMedia;
28 -> numberIncomplete;
29 -> invalidNumber;
30 -> unassignedNumber;
31 -> doNotDisturb;
32 -> externalControlled;
33 -> systemFailure;
34 -> applicationNotification;
35 -> referOk;
36 -> referFailure;
37 -> hole;
38 -> hold;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end, TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'EventSpecificInformationBCSM_orininationDenied', Term1}.

'dec_EventSpecificInformationBCSM_terminationDenied'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute terminationDeniedCause(1) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {case decode_integer(V1, []) of
0 -> normal;
1 -> originationDenied;
2 -> collectDigits;
3 -> authorisationFailure;
4 -> bPtyAlerted;
5 -> noIndication;
6 -> aPtyAbandon;
7 -> invalidCollectedInformation;
8 -> collectInformationFailure;
9 -> aPtyDisc;
10 -> bPtyDisc;
11 -> routeSelectFailure;
12 -> oNoAnswer;
13 -> terminationDenied;
14 -> notReachable;
15 -> bPtyNoAnswer;
16 -> bPtyBusyUDUB;
17 -> bPtyBusyNDUB;
18 -> ss7Failure;
19 -> calledPartyRejected;
20 -> tException;
21 -> routeFailure1;
22 -> routeFailure2;
23 -> ssActivating;
24 -> conversationTimeout;
25 -> noCircuitAvailable;
26 -> coreNotification;
27 -> unsupportedMedia;
28 -> numberIncomplete;
29 -> invalidNumber;
30 -> unassignedNumber;
31 -> doNotDisturb;
32 -> externalControlled;
33 -> systemFailure;
34 -> applicationNotification;
35 -> referOk;
36 -> referFailure;
37 -> hole;
38 -> hold;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end, TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'EventSpecificInformationBCSM_terminationDenied', Term1}.



%%================================
%%  EventSpecificInformationCharging
%%================================
'enc_EventSpecificInformationCharging'(Val) ->
    'enc_EventSpecificInformationCharging'(Val, [<<4>>]).

'enc_EventSpecificInformationCharging'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_EventSpecificInformationCharging'(Tlv) ->
   'dec_EventSpecificInformationCharging'(Tlv, [4]).

'dec_EventSpecificInformationCharging'(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 27 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  EventTypeBCSM
%%================================
'enc_EventTypeBCSM'(Val) ->
    'enc_EventTypeBCSM'(Val, [<<10>>]).

'enc_EventTypeBCSM'(Val, TagIn) ->
case Val of
origAttemptAuthorized -> encode_tags(TagIn, [1], 1);
collectedInfo -> encode_tags(TagIn, [2], 1);
analysedInformation -> encode_tags(TagIn, [3], 1);
routeSelectFailure -> encode_tags(TagIn, [4], 1);
oCalledPartyBusy -> encode_tags(TagIn, [5], 1);
oNoAnswer -> encode_tags(TagIn, [6], 1);
oAnswer -> encode_tags(TagIn, [7], 1);
oMidCall -> encode_tags(TagIn, [8], 1);
oDisconnect -> encode_tags(TagIn, [9], 1);
oAbandon -> encode_tags(TagIn, [10], 1);
termAttemptAuthorized -> encode_tags(TagIn, [12], 1);
tBusy -> encode_tags(TagIn, [13], 1);
tNoAnswer -> encode_tags(TagIn, [14], 1);
tAnswer -> encode_tags(TagIn, [15], 1);
tMidCall -> encode_tags(TagIn, [16], 1);
tDisconnect -> encode_tags(TagIn, [17], 1);
tAbandon -> encode_tags(TagIn, [18], 1);
oTermSeized -> encode_tags(TagIn, [19], 1);
oSuspend -> encode_tags(TagIn, [20], 1);
tSuspend -> encode_tags(TagIn, [21], 1);
origAttempt -> encode_tags(TagIn, [22], 1);
termAttempt -> encode_tags(TagIn, [23], 1);
oReAnswer -> encode_tags(TagIn, [24], 1);
tReAnswer -> encode_tags(TagIn, [25], 1);
facilitySelectedAndAvailable -> encode_tags(TagIn, [26], 1);
callAccepted -> encode_tags(TagIn, [27], 1);
authorizeRouteFailure -> encode_tags(TagIn, [28], 1);
originationDenied -> encode_tags(TagIn, [29], 1);
terminationDenied -> encode_tags(TagIn, [30], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_EventTypeBCSM'(Tlv) ->
   'dec_EventTypeBCSM'(Tlv, [10]).

'dec_EventTypeBCSM'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
1 -> origAttemptAuthorized;
2 -> collectedInfo;
3 -> analysedInformation;
4 -> routeSelectFailure;
5 -> oCalledPartyBusy;
6 -> oNoAnswer;
7 -> oAnswer;
8 -> oMidCall;
9 -> oDisconnect;
10 -> oAbandon;
12 -> termAttemptAuthorized;
13 -> tBusy;
14 -> tNoAnswer;
15 -> tAnswer;
16 -> tMidCall;
17 -> tDisconnect;
18 -> tAbandon;
19 -> oTermSeized;
20 -> oSuspend;
21 -> tSuspend;
22 -> origAttempt;
23 -> termAttempt;
24 -> oReAnswer;
25 -> tReAnswer;
26 -> facilitySelectedAndAvailable;
27 -> callAccepted;
28 -> authorizeRouteFailure;
29 -> originationDenied;
30 -> terminationDenied;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  EventTypeCharging
%%================================
'enc_EventTypeCharging'(Val) ->
    'enc_EventTypeCharging'(Val, [<<4>>]).

'enc_EventTypeCharging'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_EventTypeCharging'(Tlv) ->
   'dec_EventTypeCharging'(Tlv, [4]).

'dec_EventTypeCharging'(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 27 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  FacilityGroup
%%================================
'enc_FacilityGroup'(Val) ->
    'enc_FacilityGroup'(Val, []).

'enc_FacilityGroup'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      trunkGroupID ->
         encode_integer(element(2,Val), [<<128>>]);
      privateFacilityID ->
         encode_integer(element(2,Val), [<<129>>]);
      huntGroup ->
         encode_restricted_string(element(2,Val), [<<130>>]);
      routeIndex ->
         encode_restricted_string(element(2,Val), [<<131>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_FacilityGroup'(Tlv) ->
   'dec_FacilityGroup'(Tlv, []).

'dec_FacilityGroup'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'trunkGroupID'
    {131072, V1} -> 
        {trunkGroupID, decode_integer(V1, [])};


%% 'privateFacilityID'
    {131073, V1} -> 
        {privateFacilityID, decode_integer(V1, [])};


%% 'huntGroup'
    {131074, V1} -> 
        {huntGroup, decode_octet_string(V1, [])};


%% 'routeIndex'
    {131075, V1} -> 
        {routeIndex, decode_octet_string(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  FacilityGroupMember
%%================================
'enc_FacilityGroupMember'(Val) ->
    'enc_FacilityGroupMember'(Val, [<<2>>]).

'enc_FacilityGroupMember'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_FacilityGroupMember'(Tlv) ->
   'dec_FacilityGroupMember'(Tlv, [2]).

'dec_FacilityGroupMember'(Tlv, TagIn) ->
decode_integer(Tlv, TagIn).



%%================================
%%  FCIBillingChargingCharacteristics
%%================================
'enc_FCIBillingChargingCharacteristics'(Val) ->
    'enc_FCIBillingChargingCharacteristics'(Val, [<<4>>]).

'enc_FCIBillingChargingCharacteristics'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_FCIBillingChargingCharacteristics'(Tlv) ->
   'dec_FCIBillingChargingCharacteristics'(Tlv, [4]).

'dec_FCIBillingChargingCharacteristics'(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 27 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  FeatureCode
%%================================
'enc_FeatureCode'(Val) ->
    'enc_FeatureCode'(Val, [<<4>>]).

'enc_FeatureCode'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_FeatureCode'(Tlv) ->
   'dec_FeatureCode'(Tlv, [4]).

'dec_FeatureCode'(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 27 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  FeatureRequestIndicator
%%================================
'enc_FeatureRequestIndicator'(Val) ->
    'enc_FeatureRequestIndicator'(Val, [<<10>>]).

'enc_FeatureRequestIndicator'(Val, TagIn) ->
case Val of
hold -> encode_tags(TagIn, [0], 1);
retrieve -> encode_tags(TagIn, [1], 1);
featureActivation -> encode_tags(TagIn, [2], 1);
spare1 -> encode_tags(TagIn, [3], 1);
sparen -> encode_tags(TagIn, [127], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_FeatureRequestIndicator'(Tlv) ->
   'dec_FeatureRequestIndicator'(Tlv, [10]).

'dec_FeatureRequestIndicator'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> hold;
1 -> retrieve;
2 -> featureActivation;
3 -> spare1;
127 -> sparen;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  FilteredCallTreatment
%%================================
'enc_FilteredCallTreatment'(Val) ->
    'enc_FilteredCallTreatment'(Val, [<<48>>]).

'enc_FilteredCallTreatment'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute sFBillingChargingCharacteristics(1) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute informationToSend(2)   External INCS3datatypes:InformationToSend OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_InformationToSend'(Cindex2, [<<161>>])
       end,

%%-------------------------------------------------
%% attribute maximumNumberOfCounters(3) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute releaseCause(4) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex4 of
normal -> encode_tags([<<131>>], [0], 1);
originationDenied -> encode_tags([<<131>>], [1], 1);
collectDigits -> encode_tags([<<131>>], [2], 1);
authorisationFailure -> encode_tags([<<131>>], [3], 1);
bPtyAlerted -> encode_tags([<<131>>], [4], 1);
noIndication -> encode_tags([<<131>>], [5], 1);
aPtyAbandon -> encode_tags([<<131>>], [6], 1);
invalidCollectedInformation -> encode_tags([<<131>>], [7], 1);
collectInformationFailure -> encode_tags([<<131>>], [8], 1);
aPtyDisc -> encode_tags([<<131>>], [9], 1);
bPtyDisc -> encode_tags([<<131>>], [10], 1);
routeSelectFailure -> encode_tags([<<131>>], [11], 1);
oNoAnswer -> encode_tags([<<131>>], [12], 1);
terminationDenied -> encode_tags([<<131>>], [13], 1);
notReachable -> encode_tags([<<131>>], [14], 1);
bPtyNoAnswer -> encode_tags([<<131>>], [15], 1);
bPtyBusyUDUB -> encode_tags([<<131>>], [16], 1);
bPtyBusyNDUB -> encode_tags([<<131>>], [17], 1);
ss7Failure -> encode_tags([<<131>>], [18], 1);
calledPartyRejected -> encode_tags([<<131>>], [19], 1);
tException -> encode_tags([<<131>>], [20], 1);
routeFailure1 -> encode_tags([<<131>>], [21], 1);
routeFailure2 -> encode_tags([<<131>>], [22], 1);
ssActivating -> encode_tags([<<131>>], [23], 1);
conversationTimeout -> encode_tags([<<131>>], [24], 1);
noCircuitAvailable -> encode_tags([<<131>>], [25], 1);
coreNotification -> encode_tags([<<131>>], [26], 1);
unsupportedMedia -> encode_tags([<<131>>], [27], 1);
numberIncomplete -> encode_tags([<<131>>], [28], 1);
invalidNumber -> encode_tags([<<131>>], [29], 1);
unassignedNumber -> encode_tags([<<131>>], [30], 1);
doNotDisturb -> encode_tags([<<131>>], [31], 1);
externalControlled -> encode_tags([<<131>>], [32], 1);
systemFailure -> encode_tags([<<131>>], [33], 1);
applicationNotification -> encode_tags([<<131>>], [34], 1);
referOk -> encode_tags([<<131>>], [35], 1);
referFailure -> encode_tags([<<131>>], [36], 1);
hole -> encode_tags([<<131>>], [37], 1);
hold -> encode_tags([<<131>>], [38], 1);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_FilteredCallTreatment'(Tlv) ->
   'dec_FilteredCallTreatment'(Tlv, [16]).

'dec_FilteredCallTreatment'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute sFBillingChargingCharacteristics(1) with type OCTET STRING
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_octet_string(V1, [131072]),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 27 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute informationToSend(2)   External INCS3datatypes:InformationToSend OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_InformationToSend'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute maximumNumberOfCounters(3) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {begin
Val2 = decode_integer(V3, []),
if 1 =< Val2, Val2 =< 100 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute releaseCause(4) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {case decode_integer(V4, []) of
0 -> normal;
1 -> originationDenied;
2 -> collectDigits;
3 -> authorisationFailure;
4 -> bPtyAlerted;
5 -> noIndication;
6 -> aPtyAbandon;
7 -> invalidCollectedInformation;
8 -> collectInformationFailure;
9 -> aPtyDisc;
10 -> bPtyDisc;
11 -> routeSelectFailure;
12 -> oNoAnswer;
13 -> terminationDenied;
14 -> notReachable;
15 -> bPtyNoAnswer;
16 -> bPtyBusyUDUB;
17 -> bPtyBusyNDUB;
18 -> ss7Failure;
19 -> calledPartyRejected;
20 -> tException;
21 -> routeFailure1;
22 -> routeFailure2;
23 -> ssActivating;
24 -> conversationTimeout;
25 -> noCircuitAvailable;
26 -> coreNotification;
27 -> unsupportedMedia;
28 -> numberIncomplete;
29 -> invalidNumber;
30 -> unassignedNumber;
31 -> doNotDisturb;
32 -> externalControlled;
33 -> systemFailure;
34 -> applicationNotification;
35 -> referOk;
36 -> referFailure;
37 -> hole;
38 -> hold;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end, TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

case Tlv5 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed
end,
   {'FilteredCallTreatment', Term1, Term2, Term3, Term4}.



%%================================
%%  FilteringCharacteristics
%%================================
'enc_FilteringCharacteristics'(Val) ->
    'enc_FilteringCharacteristics'(Val, []).

'enc_FilteringCharacteristics'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      interval ->
         encode_integer(element(2,Val), [<<128>>]);
      numberOfCalls ->
         encode_integer(element(2,Val), [<<129>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_FilteringCharacteristics'(Tlv) ->
   'dec_FilteringCharacteristics'(Tlv, []).

'dec_FilteringCharacteristics'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'interval'
    {131072, V1} -> 
        {interval, begin
Val1 = decode_integer(V1, []),
if -1 =< Val1, Val1 =< 32000 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'numberOfCalls'
    {131073, V1} -> 
        {numberOfCalls, begin
Val2 = decode_integer(V1, []),
if 0 =< Val2, Val2 =< 2147483647 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  FilteringCriteria
%%================================
'enc_FilteringCriteria'(Val) ->
    'enc_FilteringCriteria'(Val, []).

'enc_FilteringCriteria'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      dialledNumber ->
         encode_restricted_string(element(2,Val), [<<128>>]);
      callingLineID ->
         encode_restricted_string(element(2,Val), [<<129>>]);
      serviceKey ->
         encode_integer(element(2,Val), [<<130>>]);
      addressAndService ->
         'enc_FilteringCriteria_addressAndService'(element(2,Val), [<<190>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  FilteringCriteria_addressAndService
%%================================
'enc_FilteringCriteria_addressAndService'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute calledAddressValue(1) with type PrintableString
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute serviceKey(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute callingAddressValue(3) with type PrintableString OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute locationNumber(4) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex4, [<<131>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_FilteringCriteria'(Tlv) ->
   'dec_FilteringCriteria'(Tlv, []).

'dec_FilteringCriteria'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'dialledNumber'
    {131072, V1} -> 
        {dialledNumber, begin
binary_to_list(decode_restricted_string(V1, []))
end
};


%% 'callingLineID'
    {131073, V1} -> 
        {callingLineID, begin
binary_to_list(decode_restricted_string(V1, []))
end
};


%% 'serviceKey'
    {131074, V1} -> 
        {serviceKey, begin
Val1 = decode_integer(V1, []),
if 0 =< Val1, Val1 =< 2147483647 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'addressAndService'
    {131102, V1} -> 
        {addressAndService, 'dec_FilteringCriteria_addressAndService'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.
'dec_FilteringCriteria_addressAndService'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute calledAddressValue(1) with type PrintableString
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
binary_to_list(decode_restricted_string(V1, [131072]))
end
,

%%-------------------------------------------------
%% attribute serviceKey(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val1 = decode_integer(V2, [131073]),
if 0 =< Val1, Val1 =< 2147483647 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute callingAddressValue(3) with type PrintableString OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {begin
binary_to_list(decode_restricted_string(V3, []))
end
, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute locationNumber(4) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {begin
Val2 = decode_octet_string(V4, []),
C1 = byte_size(Val2),
if 1 =< C1, C1 =< 27 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

case Tlv5 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed
end,
   {'FilteringCriteria_addressAndService', Term1, Term2, Term3, Term4}.



%%================================
%%  FilteringTimeOut
%%================================
'enc_FilteringTimeOut'(Val) ->
    'enc_FilteringTimeOut'(Val, []).

'enc_FilteringTimeOut'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      duration ->
         encode_integer(element(2,Val), [<<128>>]);
      stopTime ->
         encode_restricted_string(element(2,Val), [<<129>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_FilteringTimeOut'(Tlv) ->
   'dec_FilteringTimeOut'(Tlv, []).

'dec_FilteringTimeOut'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'duration'
    {131072, V1} -> 
        {duration, begin
Val1 = decode_integer(V1, []),
if -2 =< Val1, Val1 =< 86400 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'stopTime'
    {131073, V1} -> 
        {stopTime, begin
Val2 = decode_octet_string(V1, []),
C1 = byte_size(Val2),
if C1 =:= 6 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  ForwardCallIndicators
%%================================
'enc_ForwardCallIndicators'(Val) ->
    'enc_ForwardCallIndicators'(Val, [<<4>>]).

'enc_ForwardCallIndicators'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_ForwardCallIndicators'(Tlv) ->
   'dec_ForwardCallIndicators'(Tlv, [4]).

'dec_ForwardCallIndicators'(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if C1 =:= 2 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  ForwardGVNS
%%================================
'enc_ForwardGVNS'(Val) ->
    'enc_ForwardGVNS'(Val, [<<4>>]).

'enc_ForwardGVNS'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_ForwardGVNS'(Tlv) ->
   'dec_ForwardGVNS'(Tlv, [4]).

'dec_ForwardGVNS'(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 27 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  ForwardingCondition
%%================================
'enc_ForwardingCondition'(Val) ->
    'enc_ForwardingCondition'(Val, [<<10>>]).

'enc_ForwardingCondition'(Val, TagIn) ->
case Val of
busy -> encode_tags(TagIn, [0], 1);
noanswer -> encode_tags(TagIn, [1], 1);
anny -> encode_tags(TagIn, [2], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_ForwardingCondition'(Tlv) ->
   'dec_ForwardingCondition'(Tlv, [10]).

'dec_ForwardingCondition'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> busy;
1 -> noanswer;
2 -> anny;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  ForwardServiceInteractionInd
%%================================
'enc_ForwardServiceInteractionInd'(Val) ->
    'enc_ForwardServiceInteractionInd'(Val, [<<48>>]).

'enc_ForwardServiceInteractionInd'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute conferenceTreatmentIndicator(1) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex1, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute callDiversionTreatmentIndicator(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex2, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute callOfferingTreatmentIndicator(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex3, [<<131>>])
       end,

%%-------------------------------------------------
%% attribute callWaitingTreatmentIndicator(4) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex4, [<<133>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_ForwardServiceInteractionInd'(Tlv) ->
   'dec_ForwardServiceInteractionInd'(Tlv, [16]).

'dec_ForwardServiceInteractionInd'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute conferenceTreatmentIndicator(1) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131073,V1}|TempTlv2] ->
    {begin
Val1 = decode_octet_string(V1, []),
C1 = byte_size(Val1),
if C1 =:= 1 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute callDiversionTreatmentIndicator(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131074,V2}|TempTlv3] ->
    {begin
Val2 = decode_octet_string(V2, []),
C2 = byte_size(Val2),
if C2 =:= 1 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute callOfferingTreatmentIndicator(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131075,V3}|TempTlv4] ->
    {begin
Val3 = decode_octet_string(V3, []),
C3 = byte_size(Val3),
if C3 =:= 1 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute callWaitingTreatmentIndicator(4) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131077,V4}|TempTlv5] ->
    {begin
Val4 = decode_octet_string(V4, []),
C4 = byte_size(Val4),
if C4 =:= 1 ->
Val4;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

case Tlv5 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed
end,
   {'ForwardServiceInteractionInd', Term1, Term2, Term3, Term4}.



%%================================
%%  GapCriteria
%%================================
'enc_GapCriteria'(Val) ->
    'enc_GapCriteria'(Val, []).

'enc_GapCriteria'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      calledAddressValue ->
         encode_restricted_string(element(2,Val), [<<128>>]);
      gapOnService ->
         'enc_GapOnService'(element(2,Val), [<<162>>]);
      gapAllInTraffic ->
         encode_null(element(2,Val), [<<131>>]);
      calledAddressAndService ->
         'enc_GapCriteria_calledAddressAndService'(element(2,Val), [<<189>>]);
      callingAddressAndService ->
         'enc_GapCriteria_callingAddressAndService'(element(2,Val), [<<190>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  GapCriteria_calledAddressAndService
%%================================
'enc_GapCriteria_calledAddressAndService'(Val, TagIn) ->
   {_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute calledAddressValue(1) with type PrintableString
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute serviceKey(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  GapCriteria_callingAddressAndService
%%================================
'enc_GapCriteria_callingAddressAndService'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute callingAddressValue(1) with type PrintableString
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute serviceKey(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute locationNumber(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex3, [<<130>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_GapCriteria'(Tlv) ->
   'dec_GapCriteria'(Tlv, []).

'dec_GapCriteria'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'calledAddressValue'
    {131072, V1} -> 
        {calledAddressValue, begin
binary_to_list(decode_restricted_string(V1, []))
end
};


%% 'gapOnService'
    {131074, V1} -> 
        {gapOnService, 'dec_GapOnService'(V1, [])};


%% 'gapAllInTraffic'
    {131075, V1} -> 
        {gapAllInTraffic, decode_null(V1, [])};


%% 'calledAddressAndService'
    {131101, V1} -> 
        {calledAddressAndService, 'dec_GapCriteria_calledAddressAndService'(V1, [])};


%% 'callingAddressAndService'
    {131102, V1} -> 
        {callingAddressAndService, 'dec_GapCriteria_callingAddressAndService'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.
'dec_GapCriteria_calledAddressAndService'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute calledAddressValue(1) with type PrintableString
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
binary_to_list(decode_restricted_string(V1, [131072]))
end
,

%%-------------------------------------------------
%% attribute serviceKey(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val1 = decode_integer(V2, [131073]),
if 0 =< Val1, Val1 =< 2147483647 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'GapCriteria_calledAddressAndService', Term1, Term2}.

'dec_GapCriteria_callingAddressAndService'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute callingAddressValue(1) with type PrintableString
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
binary_to_list(decode_restricted_string(V1, [131072]))
end
,

%%-------------------------------------------------
%% attribute serviceKey(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val1 = decode_integer(V2, [131073]),
if 0 =< Val1, Val1 =< 2147483647 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute locationNumber(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {begin
Val2 = decode_octet_string(V3, []),
C1 = byte_size(Val2),
if 1 =< C1, C1 =< 27 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'GapCriteria_callingAddressAndService', Term1, Term2, Term3}.



%%================================
%%  GapOnService
%%================================
'enc_GapOnService'(Val) ->
    'enc_GapOnService'(Val, [<<48>>]).

'enc_GapOnService'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute serviceKey(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute dpCriteria(2) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex2 of
origAttemptAuthorized -> encode_tags([<<129>>], [1], 1);
collectedInfo -> encode_tags([<<129>>], [2], 1);
analysedInformation -> encode_tags([<<129>>], [3], 1);
routeSelectFailure -> encode_tags([<<129>>], [4], 1);
oCalledPartyBusy -> encode_tags([<<129>>], [5], 1);
oNoAnswer -> encode_tags([<<129>>], [6], 1);
oAnswer -> encode_tags([<<129>>], [7], 1);
oMidCall -> encode_tags([<<129>>], [8], 1);
oDisconnect -> encode_tags([<<129>>], [9], 1);
oAbandon -> encode_tags([<<129>>], [10], 1);
termAttemptAuthorized -> encode_tags([<<129>>], [12], 1);
tBusy -> encode_tags([<<129>>], [13], 1);
tNoAnswer -> encode_tags([<<129>>], [14], 1);
tAnswer -> encode_tags([<<129>>], [15], 1);
tMidCall -> encode_tags([<<129>>], [16], 1);
tDisconnect -> encode_tags([<<129>>], [17], 1);
tAbandon -> encode_tags([<<129>>], [18], 1);
oTermSeized -> encode_tags([<<129>>], [19], 1);
oSuspend -> encode_tags([<<129>>], [20], 1);
tSuspend -> encode_tags([<<129>>], [21], 1);
origAttempt -> encode_tags([<<129>>], [22], 1);
termAttempt -> encode_tags([<<129>>], [23], 1);
oReAnswer -> encode_tags([<<129>>], [24], 1);
tReAnswer -> encode_tags([<<129>>], [25], 1);
facilitySelectedAndAvailable -> encode_tags([<<129>>], [26], 1);
callAccepted -> encode_tags([<<129>>], [27], 1);
authorizeRouteFailure -> encode_tags([<<129>>], [28], 1);
originationDenied -> encode_tags([<<129>>], [29], 1);
terminationDenied -> encode_tags([<<129>>], [30], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_GapOnService'(Tlv) ->
   'dec_GapOnService'(Tlv, [16]).

'dec_GapOnService'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute serviceKey(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 2147483647 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute dpCriteria(2) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {case decode_integer(V2, []) of
1 -> origAttemptAuthorized;
2 -> collectedInfo;
3 -> analysedInformation;
4 -> routeSelectFailure;
5 -> oCalledPartyBusy;
6 -> oNoAnswer;
7 -> oAnswer;
8 -> oMidCall;
9 -> oDisconnect;
10 -> oAbandon;
12 -> termAttemptAuthorized;
13 -> tBusy;
14 -> tNoAnswer;
15 -> tAnswer;
16 -> tMidCall;
17 -> tDisconnect;
18 -> tAbandon;
19 -> oTermSeized;
20 -> oSuspend;
21 -> tSuspend;
22 -> origAttempt;
23 -> termAttempt;
24 -> oReAnswer;
25 -> tReAnswer;
26 -> facilitySelectedAndAvailable;
27 -> callAccepted;
28 -> authorizeRouteFailure;
29 -> originationDenied;
30 -> terminationDenied;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'GapOnService', Term1, Term2}.



%%================================
%%  GapIndicators
%%================================
'enc_GapIndicators'(Val) ->
    'enc_GapIndicators'(Val, [<<48>>]).

'enc_GapIndicators'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute duration(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute gapInterval(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_GapIndicators'(Tlv) ->
   'dec_GapIndicators'(Tlv, [16]).

'dec_GapIndicators'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute duration(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if -2 =< Val1, Val1 =< 86400 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute gapInterval(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [131073]),
if -1 =< Val2, Val2 =< 60000 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'GapIndicators', Term1, Term2}.



%%================================
%%  GapTreatment
%%================================
'enc_GapTreatment'(Val) ->
    'enc_GapTreatment'(Val, []).

'enc_GapTreatment'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      informationToSend ->
         'enc_InformationToSend'(element(2,Val), [<<160>>]);
      releaseCause ->
         case element(2,Val) of
normal -> encode_tags([<<129>>], [0], 1);
originationDenied -> encode_tags([<<129>>], [1], 1);
collectDigits -> encode_tags([<<129>>], [2], 1);
authorisationFailure -> encode_tags([<<129>>], [3], 1);
bPtyAlerted -> encode_tags([<<129>>], [4], 1);
noIndication -> encode_tags([<<129>>], [5], 1);
aPtyAbandon -> encode_tags([<<129>>], [6], 1);
invalidCollectedInformation -> encode_tags([<<129>>], [7], 1);
collectInformationFailure -> encode_tags([<<129>>], [8], 1);
aPtyDisc -> encode_tags([<<129>>], [9], 1);
bPtyDisc -> encode_tags([<<129>>], [10], 1);
routeSelectFailure -> encode_tags([<<129>>], [11], 1);
oNoAnswer -> encode_tags([<<129>>], [12], 1);
terminationDenied -> encode_tags([<<129>>], [13], 1);
notReachable -> encode_tags([<<129>>], [14], 1);
bPtyNoAnswer -> encode_tags([<<129>>], [15], 1);
bPtyBusyUDUB -> encode_tags([<<129>>], [16], 1);
bPtyBusyNDUB -> encode_tags([<<129>>], [17], 1);
ss7Failure -> encode_tags([<<129>>], [18], 1);
calledPartyRejected -> encode_tags([<<129>>], [19], 1);
tException -> encode_tags([<<129>>], [20], 1);
routeFailure1 -> encode_tags([<<129>>], [21], 1);
routeFailure2 -> encode_tags([<<129>>], [22], 1);
ssActivating -> encode_tags([<<129>>], [23], 1);
conversationTimeout -> encode_tags([<<129>>], [24], 1);
noCircuitAvailable -> encode_tags([<<129>>], [25], 1);
coreNotification -> encode_tags([<<129>>], [26], 1);
unsupportedMedia -> encode_tags([<<129>>], [27], 1);
numberIncomplete -> encode_tags([<<129>>], [28], 1);
invalidNumber -> encode_tags([<<129>>], [29], 1);
unassignedNumber -> encode_tags([<<129>>], [30], 1);
doNotDisturb -> encode_tags([<<129>>], [31], 1);
externalControlled -> encode_tags([<<129>>], [32], 1);
systemFailure -> encode_tags([<<129>>], [33], 1);
applicationNotification -> encode_tags([<<129>>], [34], 1);
referOk -> encode_tags([<<129>>], [35], 1);
referFailure -> encode_tags([<<129>>], [36], 1);
hole -> encode_tags([<<129>>], [37], 1);
hold -> encode_tags([<<129>>], [38], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end;
      both ->
         'enc_GapTreatment_both'(element(2,Val), [<<162>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  GapTreatment_both
%%================================
'enc_GapTreatment_both'(Val, TagIn) ->
   {_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute informationToSend(1)   External INCS3datatypes:InformationToSend
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_InformationToSend'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute releaseCause(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
normal -> encode_tags([<<129>>], [0], 1);
originationDenied -> encode_tags([<<129>>], [1], 1);
collectDigits -> encode_tags([<<129>>], [2], 1);
authorisationFailure -> encode_tags([<<129>>], [3], 1);
bPtyAlerted -> encode_tags([<<129>>], [4], 1);
noIndication -> encode_tags([<<129>>], [5], 1);
aPtyAbandon -> encode_tags([<<129>>], [6], 1);
invalidCollectedInformation -> encode_tags([<<129>>], [7], 1);
collectInformationFailure -> encode_tags([<<129>>], [8], 1);
aPtyDisc -> encode_tags([<<129>>], [9], 1);
bPtyDisc -> encode_tags([<<129>>], [10], 1);
routeSelectFailure -> encode_tags([<<129>>], [11], 1);
oNoAnswer -> encode_tags([<<129>>], [12], 1);
terminationDenied -> encode_tags([<<129>>], [13], 1);
notReachable -> encode_tags([<<129>>], [14], 1);
bPtyNoAnswer -> encode_tags([<<129>>], [15], 1);
bPtyBusyUDUB -> encode_tags([<<129>>], [16], 1);
bPtyBusyNDUB -> encode_tags([<<129>>], [17], 1);
ss7Failure -> encode_tags([<<129>>], [18], 1);
calledPartyRejected -> encode_tags([<<129>>], [19], 1);
tException -> encode_tags([<<129>>], [20], 1);
routeFailure1 -> encode_tags([<<129>>], [21], 1);
routeFailure2 -> encode_tags([<<129>>], [22], 1);
ssActivating -> encode_tags([<<129>>], [23], 1);
conversationTimeout -> encode_tags([<<129>>], [24], 1);
noCircuitAvailable -> encode_tags([<<129>>], [25], 1);
coreNotification -> encode_tags([<<129>>], [26], 1);
unsupportedMedia -> encode_tags([<<129>>], [27], 1);
numberIncomplete -> encode_tags([<<129>>], [28], 1);
invalidNumber -> encode_tags([<<129>>], [29], 1);
unassignedNumber -> encode_tags([<<129>>], [30], 1);
doNotDisturb -> encode_tags([<<129>>], [31], 1);
externalControlled -> encode_tags([<<129>>], [32], 1);
systemFailure -> encode_tags([<<129>>], [33], 1);
applicationNotification -> encode_tags([<<129>>], [34], 1);
referOk -> encode_tags([<<129>>], [35], 1);
referFailure -> encode_tags([<<129>>], [36], 1);
hole -> encode_tags([<<129>>], [37], 1);
hold -> encode_tags([<<129>>], [38], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_GapTreatment'(Tlv) ->
   'dec_GapTreatment'(Tlv, []).

'dec_GapTreatment'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'informationToSend'
    {131072, V1} -> 
        {informationToSend, 'dec_InformationToSend'(V1, [])};


%% 'releaseCause'
    {131073, V1} -> 
        {releaseCause, case decode_integer(V1, []) of
0 -> normal;
1 -> originationDenied;
2 -> collectDigits;
3 -> authorisationFailure;
4 -> bPtyAlerted;
5 -> noIndication;
6 -> aPtyAbandon;
7 -> invalidCollectedInformation;
8 -> collectInformationFailure;
9 -> aPtyDisc;
10 -> bPtyDisc;
11 -> routeSelectFailure;
12 -> oNoAnswer;
13 -> terminationDenied;
14 -> notReachable;
15 -> bPtyNoAnswer;
16 -> bPtyBusyUDUB;
17 -> bPtyBusyNDUB;
18 -> ss7Failure;
19 -> calledPartyRejected;
20 -> tException;
21 -> routeFailure1;
22 -> routeFailure2;
23 -> ssActivating;
24 -> conversationTimeout;
25 -> noCircuitAvailable;
26 -> coreNotification;
27 -> unsupportedMedia;
28 -> numberIncomplete;
29 -> invalidNumber;
30 -> unassignedNumber;
31 -> doNotDisturb;
32 -> externalControlled;
33 -> systemFailure;
34 -> applicationNotification;
35 -> referOk;
36 -> referFailure;
37 -> hole;
38 -> hold;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end};


%% 'both'
    {131074, V1} -> 
        {both, 'dec_GapTreatment_both'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.
'dec_GapTreatment_both'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute informationToSend(1)   External INCS3datatypes:InformationToSend
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_InformationToSend'(V1, [131072]),

%%-------------------------------------------------
%% attribute releaseCause(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> normal;
1 -> originationDenied;
2 -> collectDigits;
3 -> authorisationFailure;
4 -> bPtyAlerted;
5 -> noIndication;
6 -> aPtyAbandon;
7 -> invalidCollectedInformation;
8 -> collectInformationFailure;
9 -> aPtyDisc;
10 -> bPtyDisc;
11 -> routeSelectFailure;
12 -> oNoAnswer;
13 -> terminationDenied;
14 -> notReachable;
15 -> bPtyNoAnswer;
16 -> bPtyBusyUDUB;
17 -> bPtyBusyNDUB;
18 -> ss7Failure;
19 -> calledPartyRejected;
20 -> tException;
21 -> routeFailure1;
22 -> routeFailure2;
23 -> ssActivating;
24 -> conversationTimeout;
25 -> noCircuitAvailable;
26 -> coreNotification;
27 -> unsupportedMedia;
28 -> numberIncomplete;
29 -> invalidNumber;
30 -> unassignedNumber;
31 -> doNotDisturb;
32 -> externalControlled;
33 -> systemFailure;
34 -> applicationNotification;
35 -> referOk;
36 -> referFailure;
37 -> hole;
38 -> hold;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'GapTreatment_both', Term1, Term2}.



%%================================
%%  GenericName
%%================================
'enc_GenericName'(Val) ->
    'enc_GenericName'(Val, [<<4>>]).

'enc_GenericName'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_GenericName'(Tlv) ->
   'dec_GenericName'(Tlv, [4]).

'dec_GenericName'(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 27 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  GenericNumber
%%================================
'enc_GenericNumber'(Val) ->
    'enc_GenericNumber'(Val, [<<4>>]).

'enc_GenericNumber'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_GenericNumber'(Tlv) ->
   'dec_GenericNumber'(Tlv, [4]).

'dec_GenericNumber'(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 27 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  GenericNumbers
%%================================
'enc_GenericNumbers'(Val) ->
    'enc_GenericNumbers'(Val, [<<49>>]).

'enc_GenericNumbers'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_GenericNumbers_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_GenericNumbers_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_GenericNumbers_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = encode_restricted_string(H, [<<4>>]),
   'enc_GenericNumbers_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_GenericNumbers'(Tlv) ->
   'dec_GenericNumbers'(Tlv, [17]).

'dec_GenericNumbers'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[begin
Val1 = decode_octet_string(V1, [4]),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 27 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end || V1 <- Tlv1].




%%================================
%%  HighLayerCompatibility
%%================================
'enc_HighLayerCompatibility'(Val) ->
    'enc_HighLayerCompatibility'(Val, [<<4>>]).

'enc_HighLayerCompatibility'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_HighLayerCompatibility'(Tlv) ->
   'dec_HighLayerCompatibility'(Tlv, [4]).

'dec_HighLayerCompatibility'(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if C1 =:= 2 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  HoldCause
%%================================
'enc_HoldCause'(Val) ->
    'enc_HoldCause'(Val, [<<4>>]).

'enc_HoldCause'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_HoldCause'(Tlv) ->
   'dec_HoldCause'(Tlv, [4]).

'dec_HoldCause'(Tlv, TagIn) ->
decode_octet_string(Tlv, TagIn).



%%================================
%%  INprofile
%%================================
'enc_INprofile'(Val) ->
    'enc_INprofile'(Val, [<<48>>]).

'enc_INprofile'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute actionOnProfile(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
activate -> encode_tags([<<128>>], [0], 1);
deactivate -> encode_tags([<<128>>], [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute tDPIdentifier(2)   External INCS3datatypes:TDPIdentifier
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_TDPIdentifier'(Cindex2, [<<161>>]),

%%-------------------------------------------------
%% attribute dpName(3) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex3 of
origAttemptAuthorized -> encode_tags([<<130>>], [1], 1);
collectedInfo -> encode_tags([<<130>>], [2], 1);
analysedInformation -> encode_tags([<<130>>], [3], 1);
routeSelectFailure -> encode_tags([<<130>>], [4], 1);
oCalledPartyBusy -> encode_tags([<<130>>], [5], 1);
oNoAnswer -> encode_tags([<<130>>], [6], 1);
oAnswer -> encode_tags([<<130>>], [7], 1);
oMidCall -> encode_tags([<<130>>], [8], 1);
oDisconnect -> encode_tags([<<130>>], [9], 1);
oAbandon -> encode_tags([<<130>>], [10], 1);
termAttemptAuthorized -> encode_tags([<<130>>], [12], 1);
tBusy -> encode_tags([<<130>>], [13], 1);
tNoAnswer -> encode_tags([<<130>>], [14], 1);
tAnswer -> encode_tags([<<130>>], [15], 1);
tMidCall -> encode_tags([<<130>>], [16], 1);
tDisconnect -> encode_tags([<<130>>], [17], 1);
tAbandon -> encode_tags([<<130>>], [18], 1);
oTermSeized -> encode_tags([<<130>>], [19], 1);
oSuspend -> encode_tags([<<130>>], [20], 1);
tSuspend -> encode_tags([<<130>>], [21], 1);
origAttempt -> encode_tags([<<130>>], [22], 1);
termAttempt -> encode_tags([<<130>>], [23], 1);
oReAnswer -> encode_tags([<<130>>], [24], 1);
tReAnswer -> encode_tags([<<130>>], [25], 1);
facilitySelectedAndAvailable -> encode_tags([<<130>>], [26], 1);
callAccepted -> encode_tags([<<130>>], [27], 1);
authorizeRouteFailure -> encode_tags([<<130>>], [28], 1);
originationDenied -> encode_tags([<<130>>], [29], 1);
terminationDenied -> encode_tags([<<130>>], [30], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end
       end,

%%-------------------------------------------------
%% attribute extensions(4)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_Extensions'(Cindex4, [<<163>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_INprofile'(Tlv) ->
   'dec_INprofile'(Tlv, [16]).

'dec_INprofile'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute actionOnProfile(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> activate;
1 -> deactivate;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute tDPIdentifier(2)   External INCS3datatypes:TDPIdentifier
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_TDPIdentifier'(V2, [131073]),

%%-------------------------------------------------
%% attribute dpName(3) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {case decode_integer(V3, []) of
1 -> origAttemptAuthorized;
2 -> collectedInfo;
3 -> analysedInformation;
4 -> routeSelectFailure;
5 -> oCalledPartyBusy;
6 -> oNoAnswer;
7 -> oAnswer;
8 -> oMidCall;
9 -> oDisconnect;
10 -> oAbandon;
12 -> termAttemptAuthorized;
13 -> tBusy;
14 -> tNoAnswer;
15 -> tAnswer;
16 -> tMidCall;
17 -> tDisconnect;
18 -> tAbandon;
19 -> oTermSeized;
20 -> oSuspend;
21 -> tSuspend;
22 -> origAttempt;
23 -> termAttempt;
24 -> oReAnswer;
25 -> tReAnswer;
26 -> facilitySelectedAndAvailable;
27 -> callAccepted;
28 -> authorizeRouteFailure;
29 -> originationDenied;
30 -> terminationDenied;
Default2 -> exit({error,{asn1,{illegal_enumerated,Default2}}})
end, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute extensions(4)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'dec_Extensions'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

case Tlv5 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed
end,
   {'INprofile', Term1, Term2, Term3, Term4}.



%%================================
%%  INServiceCompatibilityIndication
%%================================
'enc_INServiceCompatibilityIndication'(Val) ->
    'enc_INServiceCompatibilityIndication'(Val, [<<48>>]).

'enc_INServiceCompatibilityIndication'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_INServiceCompatibilityIndication_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_INServiceCompatibilityIndication_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_INServiceCompatibilityIndication_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_Entry'(H, []),
   'enc_INServiceCompatibilityIndication_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_INServiceCompatibilityIndication'(Tlv) ->
   'dec_INServiceCompatibilityIndication'(Tlv, [16]).

'dec_INServiceCompatibilityIndication'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_Entry'(V1, []) || V1 <- Tlv1].




%%================================
%%  INServiceCompatibilityResponse
%%================================
'enc_INServiceCompatibilityResponse'(Val) ->
    'enc_INServiceCompatibilityResponse'(Val, []).

'enc_INServiceCompatibilityResponse'(Val, TagIn) ->
   'enc_Entry'(Val, TagIn).


'dec_INServiceCompatibilityResponse'(Tlv) ->
   'dec_INServiceCompatibilityResponse'(Tlv, []).

'dec_INServiceCompatibilityResponse'(Tlv, TagIn) ->
'dec_Entry'(Tlv, TagIn).



%%================================
%%  Interval
%%================================
'enc_Interval'(Val) ->
    'enc_Interval'(Val, [<<2>>]).

'enc_Interval'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_Interval'(Tlv) ->
   'dec_Interval'(Tlv, [2]).

'dec_Interval'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if -1 =< Val1, Val1 =< 60000 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  IPAvailable
%%================================
'enc_IPAvailable'(Val) ->
    'enc_IPAvailable'(Val, [<<4>>]).

'enc_IPAvailable'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_IPAvailable'(Tlv) ->
   'dec_IPAvailable'(Tlv, [4]).

'dec_IPAvailable'(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 27 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  IPRoutingAddress
%%================================
'enc_IPRoutingAddress'(Val) ->
    'enc_IPRoutingAddress'(Val, [<<48>>]).

'enc_IPRoutingAddress'(Val, TagIn) ->
   'ACPdatatypes':'enc_CalledPartyNumber'(Val, TagIn).


'dec_IPRoutingAddress'(Tlv) ->
   'dec_IPRoutingAddress'(Tlv, [16]).

'dec_IPRoutingAddress'(Tlv, TagIn) ->
'ACPdatatypes':'dec_CalledPartyNumber'(Tlv, TagIn).



%%================================
%%  IPSSPCapabilities
%%================================
'enc_IPSSPCapabilities'(Val) ->
    'enc_IPSSPCapabilities'(Val, [<<4>>]).

'enc_IPSSPCapabilities'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_IPSSPCapabilities'(Tlv) ->
   'dec_IPSSPCapabilities'(Tlv, [4]).

'dec_IPSSPCapabilities'(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 27 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  ISDNAccessRelatedInformation
%%================================
'enc_ISDNAccessRelatedInformation'(Val) ->
    'enc_ISDNAccessRelatedInformation'(Val, [<<4>>]).

'enc_ISDNAccessRelatedInformation'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_ISDNAccessRelatedInformation'(Tlv) ->
   'dec_ISDNAccessRelatedInformation'(Tlv, [4]).

'dec_ISDNAccessRelatedInformation'(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 10 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  DTLegID
%%================================
'enc_DTLegID'(Val) ->
    'enc_DTLegID'(Val, []).

'enc_DTLegID'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      sendingSideID ->
         encode_restricted_string(element(2,Val), [<<128>>]);
      receivingSideID ->
         encode_restricted_string(element(2,Val), [<<129>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_DTLegID'(Tlv) ->
   'dec_DTLegID'(Tlv, []).

'dec_DTLegID'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'sendingSideID'
    {131072, V1} -> 
        {sendingSideID, begin
Val1 = decode_octet_string(V1, []),
C1 = byte_size(Val1),
if C1 =:= 1 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'receivingSideID'
    {131073, V1} -> 
        {receivingSideID, begin
Val2 = decode_octet_string(V1, []),
C2 = byte_size(Val2),
if C2 =:= 1 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  DTLegType
%%================================
'enc_DTLegType'(Val) ->
    'enc_DTLegType'(Val, [<<4>>]).

'enc_DTLegType'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_DTLegType'(Tlv) ->
   'dec_DTLegType'(Tlv, [4]).

'dec_DTLegType'(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if C1 =:= 1 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  LocationNumber
%%================================
'enc_LocationNumber'(Val) ->
    'enc_LocationNumber'(Val, [<<4>>]).

'enc_LocationNumber'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_LocationNumber'(Tlv) ->
   'dec_LocationNumber'(Tlv, [4]).

'dec_LocationNumber'(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 27 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  MaximumNumberOfCounters
%%================================
'enc_MaximumNumberOfCounters'(Val) ->
    'enc_MaximumNumberOfCounters'(Val, [<<2>>]).

'enc_MaximumNumberOfCounters'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_MaximumNumberOfCounters'(Tlv) ->
   'dec_MaximumNumberOfCounters'(Tlv, [2]).

'dec_MaximumNumberOfCounters'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 1 =< Val1, Val1 =< 100 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  MidCallControlInfo
%%================================
'enc_MidCallControlInfo'(Val) ->
    'enc_MidCallControlInfo'(Val, [<<48>>]).

'enc_MidCallControlInfo'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_MidCallControlInfo_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_MidCallControlInfo_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_MidCallControlInfo_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_MidCallControlInfo_SEQOF'(H, [<<48>>]),
   'enc_MidCallControlInfo_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  MidCallControlInfo_SEQOF
%%================================
'enc_MidCallControlInfo_SEQOF'(Val, TagIn) ->
   {_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute midCallInfoType(1)   External INCS3datatypes:MidCallInfoType
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_MidCallInfoType'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute midCallReportType(2) with type ENUMERATED DEFAULT = inMonitoringState
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_DEFAULT -> {<<>>,0};
         inMonitoringState -> {<<>>,0};
         _ ->
            case Cindex2 of
inMonitoringState -> encode_tags([<<129>>], [0], 1);
inAnyState -> encode_tags([<<129>>], [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_MidCallControlInfo'(Tlv) ->
   'dec_MidCallControlInfo'(Tlv, [16]).

'dec_MidCallControlInfo'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_MidCallControlInfo_SEQOF'(V1, [16]) || V1 <- Tlv1].


'dec_MidCallControlInfo_SEQOF'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute midCallInfoType(1)   External INCS3datatypes:MidCallInfoType
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_MidCallInfoType'(V1, [131072]),

%%-------------------------------------------------
%% attribute midCallReportType(2) with type ENUMERATED DEFAULT = inMonitoringState
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {case decode_integer(V2, []) of
0 -> inMonitoringState;
1 -> inAnyState;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end, TempTlv3};
    _ ->
        {inMonitoringState,Tlv2}
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'MidCallControlInfo_SEQOF', Term1, Term2}.



%%================================
%%  MidCallInfo
%%================================
'enc_MidCallInfo'(Val) ->
    'enc_MidCallInfo'(Val, [<<48>>]).

'enc_MidCallInfo'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute iNServiceControlCode(1) with type PrintableString
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_MidCallInfo'(Tlv) ->
   'dec_MidCallInfo'(Tlv, [16]).

'dec_MidCallInfo'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute iNServiceControlCode(1) with type PrintableString
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
binary_to_list(decode_restricted_string(V1, [131072]))
end
,

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'MidCallInfo', Term1}.



%%================================
%%  MidCallInfoType
%%================================
'enc_MidCallInfoType'(Val) ->
    'enc_MidCallInfoType'(Val, [<<48>>]).

'enc_MidCallInfoType'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute iNServiceControlCodeLow(1) with type PrintableString
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute iNServiceControlCodeHigh(2) with type PrintableString OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex2, [<<129>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_MidCallInfoType'(Tlv) ->
   'dec_MidCallInfoType'(Tlv, [16]).

'dec_MidCallInfoType'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute iNServiceControlCodeLow(1) with type PrintableString
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
binary_to_list(decode_restricted_string(V1, [131072]))
end
,

%%-------------------------------------------------
%% attribute iNServiceControlCodeHigh(2) with type PrintableString OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
binary_to_list(decode_restricted_string(V2, []))
end
, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'MidCallInfoType', Term1, Term2}.



%%================================
%%  DTMiscCallInfo
%%================================
'enc_DTMiscCallInfo'(Val) ->
    'enc_DTMiscCallInfo'(Val, [<<48>>]).

'enc_DTMiscCallInfo'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute messageType(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
request -> encode_tags([<<128>>], [0], 1);
notification -> encode_tags([<<128>>], [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute dpAssignment(2) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex2 of
individualLine -> encode_tags([<<129>>], [0], 1);
groupBased -> encode_tags([<<129>>], [1], 1);
switchBased -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_DTMiscCallInfo'(Tlv) ->
   'dec_DTMiscCallInfo'(Tlv, [16]).

'dec_DTMiscCallInfo'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute messageType(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> request;
1 -> notification;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute dpAssignment(2) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {case decode_integer(V2, []) of
0 -> individualLine;
1 -> groupBased;
2 -> switchBased;
Default2 -> exit({error,{asn1,{illegal_enumerated,Default2}}})
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'DTMiscCallInfo', Term1, Term2}.



%%================================
%%  MonitorMode
%%================================
'enc_MonitorMode'(Val) ->
    'enc_MonitorMode'(Val, [<<10>>]).

'enc_MonitorMode'(Val, TagIn) ->
case Val of
interrupted -> encode_tags(TagIn, [0], 1);
notifyAndContinue -> encode_tags(TagIn, [1], 1);
transparent -> encode_tags(TagIn, [2], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_MonitorMode'(Tlv) ->
   'dec_MonitorMode'(Tlv, [10]).

'dec_MonitorMode'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> interrupted;
1 -> notifyAndContinue;
2 -> transparent;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  NumberingPlan
%%================================
'enc_NumberingPlan'(Val) ->
    'enc_NumberingPlan'(Val, [<<4>>]).

'enc_NumberingPlan'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_NumberingPlan'(Tlv) ->
   'dec_NumberingPlan'(Tlv, [4]).

'dec_NumberingPlan'(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if C1 =:= 1 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  NumberOfDigits
%%================================
'enc_NumberOfDigits'(Val) ->
    'enc_NumberOfDigits'(Val, [<<2>>]).

'enc_NumberOfDigits'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_NumberOfDigits'(Tlv) ->
   'dec_NumberOfDigits'(Tlv, [2]).

'dec_NumberOfDigits'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 1 =< Val1, Val1 =< 255 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  OriginalCalledPartyID
%%================================
'enc_OriginalCalledPartyID'(Val) ->
    'enc_OriginalCalledPartyID'(Val, [<<4>>]).

'enc_OriginalCalledPartyID'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_OriginalCalledPartyID'(Tlv) ->
   'dec_OriginalCalledPartyID'(Tlv, [4]).

'dec_OriginalCalledPartyID'(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 15 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  ProfileIdentifier
%%================================
'enc_ProfileIdentifier'(Val) ->
    'enc_ProfileIdentifier'(Val, []).

'enc_ProfileIdentifier'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      access ->
         'ACPdatatypes':'enc_CalledPartyNumber'(element(2,Val), [<<160>>]);
      group ->
         'enc_FacilityGroup'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_ProfileIdentifier'(Tlv) ->
   'dec_ProfileIdentifier'(Tlv, []).

'dec_ProfileIdentifier'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'access'
    {131072, V1} -> 
        {access, 'ACPdatatypes':'dec_CalledPartyNumber'(V1, [])};


%% 'group'
    {131073, V1} -> 
        {group, 'dec_FacilityGroup'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  QoSParameter
%%================================
'enc_QoSParameter'(Val) ->
    'enc_QoSParameter'(Val, [<<4>>]).

'enc_QoSParameter'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_QoSParameter'(Tlv) ->
   'dec_QoSParameter'(Tlv, [4]).

'dec_QoSParameter'(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 5 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  Reason
%%================================
'enc_Reason'(Val) ->
    'enc_Reason'(Val, [<<4>>]).

'enc_Reason'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_Reason'(Tlv) ->
   'dec_Reason'(Tlv, [4]).

'dec_Reason'(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 5 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  RedirectingPartyID
%%================================
'enc_RedirectingPartyID'(Val) ->
    'enc_RedirectingPartyID'(Val, [<<4>>]).

'enc_RedirectingPartyID'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_RedirectingPartyID'(Tlv) ->
   'dec_RedirectingPartyID'(Tlv, [4]).

'dec_RedirectingPartyID'(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 27 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  RedirectionInformation
%%================================
'enc_RedirectionInformation'(Val) ->
    'enc_RedirectionInformation'(Val, [<<4>>]).

'enc_RedirectionInformation'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_RedirectionInformation'(Tlv) ->
   'dec_RedirectionInformation'(Tlv, [4]).

'dec_RedirectionInformation'(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if C1 =:= 2 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  RedirectReason
%%================================
'enc_RedirectReason'(Val) ->
    'enc_RedirectReason'(Val, [<<4>>]).

'enc_RedirectReason'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_RedirectReason'(Tlv) ->
   'dec_RedirectReason'(Tlv, [4]).

'dec_RedirectReason'(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if C1 =:= 1 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  RegistratorIdentifier
%%================================
'enc_RegistratorIdentifier'(Val) ->
    'enc_RegistratorIdentifier'(Val, [<<4>>]).

'enc_RegistratorIdentifier'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_RegistratorIdentifier'(Tlv) ->
   'dec_RegistratorIdentifier'(Tlv, [4]).

'dec_RegistratorIdentifier'(Tlv, TagIn) ->
decode_octet_string(Tlv, TagIn).



%%================================
%%  ReportCondition
%%================================
'enc_ReportCondition'(Val) ->
    'enc_ReportCondition'(Val, [<<10>>]).

'enc_ReportCondition'(Val, TagIn) ->
case Val of
statusReport -> encode_tags(TagIn, [0], 1);
timerExpired -> encode_tags(TagIn, [1], 1);
canceled -> encode_tags(TagIn, [2], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_ReportCondition'(Tlv) ->
   'dec_ReportCondition'(Tlv, [10]).

'dec_ReportCondition'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> statusReport;
1 -> timerExpired;
2 -> canceled;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  RequestedInformationList
%%================================
'enc_RequestedInformationList'(Val) ->
    'enc_RequestedInformationList'(Val, [<<48>>]).

'enc_RequestedInformationList'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_RequestedInformationList_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_RequestedInformationList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_RequestedInformationList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_RequestedInformation'(H, [<<48>>]),
   'enc_RequestedInformationList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_RequestedInformationList'(Tlv) ->
   'dec_RequestedInformationList'(Tlv, [16]).

'dec_RequestedInformationList'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_RequestedInformation'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  RequestedInformationTypeList
%%================================
'enc_RequestedInformationTypeList'(Val) ->
    'enc_RequestedInformationTypeList'(Val, [<<48>>]).

'enc_RequestedInformationTypeList'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_RequestedInformationTypeList_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_RequestedInformationTypeList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_RequestedInformationTypeList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = case H of
callAttemptElapsedTime -> encode_tags([<<10>>], [0], 1);
callStopTime -> encode_tags([<<10>>], [1], 1);
callConnectedElapsedTime -> encode_tags([<<10>>], [2], 1);
calledAddress -> encode_tags([<<10>>], [3], 1);
releaseCause -> encode_tags([<<10>>], [30], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,
   'enc_RequestedInformationTypeList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_RequestedInformationTypeList'(Tlv) ->
   'dec_RequestedInformationTypeList'(Tlv, [16]).

'dec_RequestedInformationTypeList'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[case decode_integer(V1, [10]) of
0 -> callAttemptElapsedTime;
1 -> callStopTime;
2 -> callConnectedElapsedTime;
3 -> calledAddress;
30 -> releaseCause;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end || V1 <- Tlv1].




%%================================
%%  RequestedInformation
%%================================
'enc_RequestedInformation'(Val) ->
    'enc_RequestedInformation'(Val, [<<48>>]).

'enc_RequestedInformation'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute requestedInformationType(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
callAttemptElapsedTime -> encode_tags([<<128>>], [0], 1);
callStopTime -> encode_tags([<<128>>], [1], 1);
callConnectedElapsedTime -> encode_tags([<<128>>], [2], 1);
calledAddress -> encode_tags([<<128>>], [3], 1);
releaseCause -> encode_tags([<<128>>], [30], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute requestedInformationValue(2)   External INCS3datatypes:RequestedInformationValue
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_RequestedInformationValue'(Cindex2, [<<161>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_RequestedInformation'(Tlv) ->
   'dec_RequestedInformation'(Tlv, [16]).

'dec_RequestedInformation'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute requestedInformationType(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> callAttemptElapsedTime;
1 -> callStopTime;
2 -> callConnectedElapsedTime;
3 -> calledAddress;
30 -> releaseCause;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute requestedInformationValue(2)   External INCS3datatypes:RequestedInformationValue
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_RequestedInformationValue'(V2, [131073]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'RequestedInformation', Term1, Term2}.



%%================================
%%  RequestedInformationType
%%================================
'enc_RequestedInformationType'(Val) ->
    'enc_RequestedInformationType'(Val, [<<10>>]).

'enc_RequestedInformationType'(Val, TagIn) ->
case Val of
callAttemptElapsedTime -> encode_tags(TagIn, [0], 1);
callStopTime -> encode_tags(TagIn, [1], 1);
callConnectedElapsedTime -> encode_tags(TagIn, [2], 1);
calledAddress -> encode_tags(TagIn, [3], 1);
releaseCause -> encode_tags(TagIn, [30], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_RequestedInformationType'(Tlv) ->
   'dec_RequestedInformationType'(Tlv, [10]).

'dec_RequestedInformationType'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> callAttemptElapsedTime;
1 -> callStopTime;
2 -> callConnectedElapsedTime;
3 -> calledAddress;
30 -> releaseCause;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  RequestedInformationValue
%%================================
'enc_RequestedInformationValue'(Val) ->
    'enc_RequestedInformationValue'(Val, []).

'enc_RequestedInformationValue'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      callAttemptElapsedTimeValue ->
         encode_integer(element(2,Val), [<<128>>]);
      callStopTimeValue ->
         encode_restricted_string(element(2,Val), [<<129>>]);
      callConnectedElapsedTimeValue ->
         encode_integer(element(2,Val), [<<130>>]);
      calledAddressValue ->
         encode_restricted_string(element(2,Val), [<<131>>]);
      releaseCauseValue ->
         case element(2,Val) of
normal -> encode_tags([<<158>>], [0], 1);
originationDenied -> encode_tags([<<158>>], [1], 1);
collectDigits -> encode_tags([<<158>>], [2], 1);
authorisationFailure -> encode_tags([<<158>>], [3], 1);
bPtyAlerted -> encode_tags([<<158>>], [4], 1);
noIndication -> encode_tags([<<158>>], [5], 1);
aPtyAbandon -> encode_tags([<<158>>], [6], 1);
invalidCollectedInformation -> encode_tags([<<158>>], [7], 1);
collectInformationFailure -> encode_tags([<<158>>], [8], 1);
aPtyDisc -> encode_tags([<<158>>], [9], 1);
bPtyDisc -> encode_tags([<<158>>], [10], 1);
routeSelectFailure -> encode_tags([<<158>>], [11], 1);
oNoAnswer -> encode_tags([<<158>>], [12], 1);
terminationDenied -> encode_tags([<<158>>], [13], 1);
notReachable -> encode_tags([<<158>>], [14], 1);
bPtyNoAnswer -> encode_tags([<<158>>], [15], 1);
bPtyBusyUDUB -> encode_tags([<<158>>], [16], 1);
bPtyBusyNDUB -> encode_tags([<<158>>], [17], 1);
ss7Failure -> encode_tags([<<158>>], [18], 1);
calledPartyRejected -> encode_tags([<<158>>], [19], 1);
tException -> encode_tags([<<158>>], [20], 1);
routeFailure1 -> encode_tags([<<158>>], [21], 1);
routeFailure2 -> encode_tags([<<158>>], [22], 1);
ssActivating -> encode_tags([<<158>>], [23], 1);
conversationTimeout -> encode_tags([<<158>>], [24], 1);
noCircuitAvailable -> encode_tags([<<158>>], [25], 1);
coreNotification -> encode_tags([<<158>>], [26], 1);
unsupportedMedia -> encode_tags([<<158>>], [27], 1);
numberIncomplete -> encode_tags([<<158>>], [28], 1);
invalidNumber -> encode_tags([<<158>>], [29], 1);
unassignedNumber -> encode_tags([<<158>>], [30], 1);
doNotDisturb -> encode_tags([<<158>>], [31], 1);
externalControlled -> encode_tags([<<158>>], [32], 1);
systemFailure -> encode_tags([<<158>>], [33], 1);
applicationNotification -> encode_tags([<<158>>], [34], 1);
referOk -> encode_tags([<<158>>], [35], 1);
referFailure -> encode_tags([<<158>>], [36], 1);
hole -> encode_tags([<<158>>], [37], 1);
hold -> encode_tags([<<158>>], [38], 1);
Enumval5 -> exit({error,{asn1, {enumerated_not_in_range,Enumval5}}})
end;
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_RequestedInformationValue'(Tlv) ->
   'dec_RequestedInformationValue'(Tlv, []).

'dec_RequestedInformationValue'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'callAttemptElapsedTimeValue'
    {131072, V1} -> 
        {callAttemptElapsedTimeValue, begin
Val1 = decode_integer(V1, []),
if 0 =< Val1, Val1 =< 255 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'callStopTimeValue'
    {131073, V1} -> 
        {callStopTimeValue, begin
Val2 = decode_octet_string(V1, []),
C1 = byte_size(Val2),
if C1 =:= 6 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'callConnectedElapsedTimeValue'
    {131074, V1} -> 
        {callConnectedElapsedTimeValue, begin
Val3 = decode_integer(V1, []),
if 0 =< Val3, Val3 =< 2147483647 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'calledAddressValue'
    {131075, V1} -> 
        {calledAddressValue, begin
binary_to_list(decode_restricted_string(V1, []))
end
};


%% 'releaseCauseValue'
    {131102, V1} -> 
        {releaseCauseValue, case decode_integer(V1, []) of
0 -> normal;
1 -> originationDenied;
2 -> collectDigits;
3 -> authorisationFailure;
4 -> bPtyAlerted;
5 -> noIndication;
6 -> aPtyAbandon;
7 -> invalidCollectedInformation;
8 -> collectInformationFailure;
9 -> aPtyDisc;
10 -> bPtyDisc;
11 -> routeSelectFailure;
12 -> oNoAnswer;
13 -> terminationDenied;
14 -> notReachable;
15 -> bPtyNoAnswer;
16 -> bPtyBusyUDUB;
17 -> bPtyBusyNDUB;
18 -> ss7Failure;
19 -> calledPartyRejected;
20 -> tException;
21 -> routeFailure1;
22 -> routeFailure2;
23 -> ssActivating;
24 -> conversationTimeout;
25 -> noCircuitAvailable;
26 -> coreNotification;
27 -> unsupportedMedia;
28 -> numberIncomplete;
29 -> invalidNumber;
30 -> unassignedNumber;
31 -> doNotDisturb;
32 -> externalControlled;
33 -> systemFailure;
34 -> applicationNotification;
35 -> referOk;
36 -> referFailure;
37 -> hole;
38 -> hold;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  RequestedUTSI
%%================================
'enc_RequestedUTSI'(Val) ->
    'enc_RequestedUTSI'(Val, [<<48>>]).

'enc_RequestedUTSI'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute uSIServiceIndicator(1)   External INCS3datatypes:USIServiceIndicator
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_USIServiceIndicator'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute uSImonitorMode(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
monitoringActive -> encode_tags([<<129>>], [0], 1);
monitoringInactive -> encode_tags([<<129>>], [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_RequestedUTSI'(Tlv) ->
   'dec_RequestedUTSI'(Tlv, [16]).

'dec_RequestedUTSI'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute uSIServiceIndicator(1)   External INCS3datatypes:USIServiceIndicator
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_USIServiceIndicator'(V1, [131072]),

%%-------------------------------------------------
%% attribute uSImonitorMode(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> monitoringActive;
1 -> monitoringInactive;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'RequestedUTSI', Term1, Term2}.



%%================================
%%  RequestedUTSIList
%%================================
'enc_RequestedUTSIList'(Val) ->
    'enc_RequestedUTSIList'(Val, [<<48>>]).

'enc_RequestedUTSIList'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_RequestedUTSIList_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_RequestedUTSIList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_RequestedUTSIList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_RequestedUTSI'(H, [<<48>>]),
   'enc_RequestedUTSIList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_RequestedUTSIList'(Tlv) ->
   'dec_RequestedUTSIList'(Tlv, [16]).

'dec_RequestedUTSIList'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_RequestedUTSI'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  ResourceID
%%================================
'enc_ResourceID'(Val) ->
    'enc_ResourceID'(Val, []).

'enc_ResourceID'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      lineID ->
         encode_restricted_string(element(2,Val), [<<128>>]);
      facilityGroupID ->
         'enc_FacilityGroup'(element(2,Val), [<<161>>]);
      facilityGroupMemberID ->
         encode_integer(element(2,Val), [<<130>>]);
      trunkGroupID ->
         encode_integer(element(2,Val), [<<131>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_ResourceID'(Tlv) ->
   'dec_ResourceID'(Tlv, []).

'dec_ResourceID'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'lineID'
    {131072, V1} -> 
        {lineID, begin
binary_to_list(decode_restricted_string(V1, []))
end
};


%% 'facilityGroupID'
    {131073, V1} -> 
        {facilityGroupID, 'dec_FacilityGroup'(V1, [])};


%% 'facilityGroupMemberID'
    {131074, V1} -> 
        {facilityGroupMemberID, decode_integer(V1, [])};


%% 'trunkGroupID'
    {131075, V1} -> 
        {trunkGroupID, decode_integer(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  ResourceStatus
%%================================
'enc_ResourceStatus'(Val) ->
    'enc_ResourceStatus'(Val, [<<10>>]).

'enc_ResourceStatus'(Val, TagIn) ->
case Val of
busy -> encode_tags(TagIn, [0], 1);
idle -> encode_tags(TagIn, [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_ResourceStatus'(Tlv) ->
   'dec_ResourceStatus'(Tlv, [10]).

'dec_ResourceStatus'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> busy;
1 -> idle;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  ResponseCondition
%%================================
'enc_ResponseCondition'(Val) ->
    'enc_ResponseCondition'(Val, [<<10>>]).

'enc_ResponseCondition'(Val, TagIn) ->
case Val of
intermediateResponse -> encode_tags(TagIn, [0], 1);
lastResponse -> encode_tags(TagIn, [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_ResponseCondition'(Tlv) ->
   'dec_ResponseCondition'(Tlv, [10]).

'dec_ResponseCondition'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> intermediateResponse;
1 -> lastResponse;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  RouteList
%%================================
'enc_RouteList'(Val) ->
    'enc_RouteList'(Val, [<<48>>]).

'enc_RouteList'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_RouteList_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_RouteList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_RouteList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = encode_restricted_string(H, [<<4>>]),
   'enc_RouteList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_RouteList'(Tlv) ->
   'dec_RouteList'(Tlv, [16]).

'dec_RouteList'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[begin
Val1 = decode_octet_string(V1, [4]),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 27 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end || V1 <- Tlv1].




%%================================
%%  RoutingNumber
%%================================
'enc_RoutingNumber'(Val) ->
    'enc_RoutingNumber'(Val, [<<4>>]).

'enc_RoutingNumber'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_RoutingNumber'(Tlv) ->
   'dec_RoutingNumber'(Tlv, [4]).

'dec_RoutingNumber'(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 27 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  ScfID
%%================================
'enc_ScfID'(Val) ->
    'enc_ScfID'(Val, [<<4>>]).

'enc_ScfID'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_ScfID'(Tlv) ->
   'dec_ScfID'(Tlv, [4]).

'dec_ScfID'(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 27 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  SCIBillingChargingCharacteristics
%%================================
'enc_SCIBillingChargingCharacteristics'(Val) ->
    'enc_SCIBillingChargingCharacteristics'(Val, [<<4>>]).

'enc_SCIBillingChargingCharacteristics'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_SCIBillingChargingCharacteristics'(Tlv) ->
   'dec_SCIBillingChargingCharacteristics'(Tlv, [4]).

'dec_SCIBillingChargingCharacteristics'(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 27 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  SDSSinformation
%%================================
'enc_SDSSinformation'(Val) ->
    'enc_SDSSinformation'(Val, [<<4>>]).

'enc_SDSSinformation'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_SDSSinformation'(Tlv) ->
   'dec_SDSSinformation'(Tlv, [4]).

'dec_SDSSinformation'(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 27 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  ServiceAddressInformation
%%================================
'enc_ServiceAddressInformation'(Val) ->
    'enc_ServiceAddressInformation'(Val, [<<48>>]).

'enc_ServiceAddressInformation'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute serviceKey(1) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex1, [<<128>>])
       end,

%%-------------------------------------------------
%% attribute miscCallInfo(2)   External INCS3datatypes:DTMiscCallInfo
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_DTMiscCallInfo'(Cindex2, [<<161>>]),

%%-------------------------------------------------
%% attribute triggerType(3) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex3 of
featureActivation -> encode_tags([<<130>>], [0], 1);
verticalServiceCode -> encode_tags([<<130>>], [1], 1);
customizedAccess -> encode_tags([<<130>>], [2], 1);
customizedIntercom -> encode_tags([<<130>>], [3], 1);
emergencyService -> encode_tags([<<130>>], [12], 1);
aFR -> encode_tags([<<130>>], [13], 1);
sharedIOTrunk -> encode_tags([<<130>>], [14], 1);
offHookDelay -> encode_tags([<<130>>], [17], 1);
channelSetupPRI -> encode_tags([<<130>>], [18], 1);
tNoAnswer -> encode_tags([<<130>>], [25], 1);
tBusy -> encode_tags([<<130>>], [26], 1);
oCalledPartyBusy -> encode_tags([<<130>>], [27], 1);
oNoAnswer -> encode_tags([<<130>>], [29], 1);
originationAttemptAuthorized -> encode_tags([<<130>>], [30], 1);
oAnswer -> encode_tags([<<130>>], [31], 1);
oDisconnect -> encode_tags([<<130>>], [32], 1);
termAttemptAuthorized -> encode_tags([<<130>>], [33], 1);
tAnswer -> encode_tags([<<130>>], [34], 1);
tDisconnect -> encode_tags([<<130>>], [35], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_ServiceAddressInformation'(Tlv) ->
   'dec_ServiceAddressInformation'(Tlv, [16]).

'dec_ServiceAddressInformation'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute serviceKey(1) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {begin
Val1 = decode_integer(V1, []),
if 0 =< Val1, Val1 =< 2147483647 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute miscCallInfo(2)   External INCS3datatypes:DTMiscCallInfo
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_DTMiscCallInfo'(V2, [131073]),

%%-------------------------------------------------
%% attribute triggerType(3) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {case decode_integer(V3, []) of
0 -> featureActivation;
1 -> verticalServiceCode;
2 -> customizedAccess;
3 -> customizedIntercom;
12 -> emergencyService;
13 -> aFR;
14 -> sharedIOTrunk;
17 -> offHookDelay;
18 -> channelSetupPRI;
25 -> tNoAnswer;
26 -> tBusy;
27 -> oCalledPartyBusy;
29 -> oNoAnswer;
30 -> originationAttemptAuthorized;
31 -> oAnswer;
32 -> oDisconnect;
33 -> termAttemptAuthorized;
34 -> tAnswer;
35 -> tDisconnect;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ServiceAddressInformation', Term1, Term2, Term3}.



%%================================
%%  ServiceInteractionIndicators
%%================================
'enc_ServiceInteractionIndicators'(Val) ->
    'enc_ServiceInteractionIndicators'(Val, [<<4>>]).

'enc_ServiceInteractionIndicators'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_ServiceInteractionIndicators'(Tlv) ->
   'dec_ServiceInteractionIndicators'(Tlv, [4]).

'dec_ServiceInteractionIndicators'(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 5 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  ServiceInteractionIndicatorsTwo
%%================================
'enc_ServiceInteractionIndicatorsTwo'(Val) ->
    'enc_ServiceInteractionIndicatorsTwo'(Val, [<<48>>]).

'enc_ServiceInteractionIndicatorsTwo'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8, Cindex9, Cindex10, Cindex11, Cindex12, Cindex13} = Val,

%%-------------------------------------------------
%% attribute forwardServiceInteractionInd(1)   External INCS3datatypes:ForwardServiceInteractionInd OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_ForwardServiceInteractionInd'(Cindex1, [<<160>>])
       end,

%%-------------------------------------------------
%% attribute backwardServiceInteractionInd(2)   External INCS3datatypes:BackwardServiceInteractionInd OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_BackwardServiceInteractionInd'(Cindex2, [<<161>>])
       end,

%%-------------------------------------------------
%% attribute bothwayThroughConnectionInd(3) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex3 of
bothwayPathRequired -> encode_tags([<<130>>], [0], 1);
bothwayPathNotRequired -> encode_tags([<<130>>], [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end
       end,

%%-------------------------------------------------
%% attribute suspendTimer(4) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex4, [<<131>>])
       end,

%%-------------------------------------------------
%% attribute connectedNumberTreatmentInd(5) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex5 of
noINImpact -> encode_tags([<<132>>], [0], 1);
presentationRestricted -> encode_tags([<<132>>], [1], 1);
presentCalledINNumber -> encode_tags([<<132>>], [2], 1);
presentCalledINNumberRestricted -> encode_tags([<<132>>], [3], 1);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end
       end,

%%-------------------------------------------------
%% attribute suppressCallDiversionNotification(6) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_boolean(Cindex6, [<<133>>])
       end,

%%-------------------------------------------------
%% attribute suppressCallTransferNotification(7) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_boolean(Cindex7, [<<134>>])
       end,

%%-------------------------------------------------
%% attribute allowCdINNoPresentationInd(8) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case Cindex8 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_boolean(Cindex8, [<<135>>])
       end,

%%-------------------------------------------------
%% attribute userDialogueDurationInd(9) with type BOOLEAN DEFAULT = true
%%-------------------------------------------------
   {EncBytes9,EncLen9} =  case Cindex9 of
         asn1_DEFAULT -> {<<>>,0};
         true -> {<<>>,0};
         _ ->
            encode_boolean(Cindex9, [<<136>>])
       end,

%%-------------------------------------------------
%% attribute overrideLineRestrictions(10) with type BOOLEAN DEFAULT = false
%%-------------------------------------------------
   {EncBytes10,EncLen10} =  case Cindex10 of
         asn1_DEFAULT -> {<<>>,0};
         false -> {<<>>,0};
         _ ->
            encode_boolean(Cindex10, [<<137>>])
       end,

%%-------------------------------------------------
%% attribute suppressVPNAPP(11) with type BOOLEAN DEFAULT = false
%%-------------------------------------------------
   {EncBytes11,EncLen11} =  case Cindex11 of
         asn1_DEFAULT -> {<<>>,0};
         false -> {<<>>,0};
         _ ->
            encode_boolean(Cindex11, [<<138>>])
       end,

%%-------------------------------------------------
%% attribute calledINNumberOverriding(12) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
   {EncBytes12,EncLen12} =  case Cindex12 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_boolean(Cindex12, [<<139>>])
       end,

%%-------------------------------------------------
%% attribute redirectServiceTreatmentInd(13) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes13,EncLen13} =  case Cindex13 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_ServiceInteractionIndicatorsTwo_redirectServiceTreatmentInd'(Cindex13, [<<172>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10, EncBytes11, EncBytes12, EncBytes13],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10 + EncLen11 + EncLen12 + EncLen13,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ServiceInteractionIndicatorsTwo_redirectServiceTreatmentInd
%%================================
'enc_ServiceInteractionIndicatorsTwo_redirectServiceTreatmentInd'(Val, TagIn) ->
   {_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute redirectReason(1) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex1, [<<128>>])
       end,

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_ServiceInteractionIndicatorsTwo'(Tlv) ->
   'dec_ServiceInteractionIndicatorsTwo'(Tlv, [16]).

'dec_ServiceInteractionIndicatorsTwo'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute forwardServiceInteractionInd(1)   External INCS3datatypes:ForwardServiceInteractionInd OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {'dec_ForwardServiceInteractionInd'(V1, []), TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute backwardServiceInteractionInd(2)   External INCS3datatypes:BackwardServiceInteractionInd OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_BackwardServiceInteractionInd'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute bothwayThroughConnectionInd(3) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {case decode_integer(V3, []) of
0 -> bothwayPathRequired;
1 -> bothwayPathNotRequired;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute suspendTimer(4) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {begin
Val1 = decode_integer(V4, []),
if 0 =< Val1, Val1 =< 120 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute connectedNumberTreatmentInd(5) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {case decode_integer(V5, []) of
0 -> noINImpact;
1 -> presentationRestricted;
2 -> presentCalledINNumber;
3 -> presentCalledINNumberRestricted;
Default2 -> exit({error,{asn1,{illegal_enumerated,Default2}}})
end, TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute suppressCallDiversionNotification(6) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {decode_boolean(V6, []), TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute suppressCallTransferNotification(7) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {decode_boolean(V7, []), TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

%%-------------------------------------------------
%% attribute allowCdINNoPresentationInd(8) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
{Term8,Tlv9} = case Tlv8 of
[{131079,V8}|TempTlv9] ->
    {decode_boolean(V8, []), TempTlv9};
    _ ->
        { asn1_NOVALUE, Tlv8}
end,

%%-------------------------------------------------
%% attribute userDialogueDurationInd(9) with type BOOLEAN DEFAULT = true
%%-------------------------------------------------
{Term9,Tlv10} = case Tlv9 of
[{131080,V9}|TempTlv10] ->
    {decode_boolean(V9, []), TempTlv10};
    _ ->
        {true,Tlv9}
end,

%%-------------------------------------------------
%% attribute overrideLineRestrictions(10) with type BOOLEAN DEFAULT = false
%%-------------------------------------------------
{Term10,Tlv11} = case Tlv10 of
[{131081,V10}|TempTlv11] ->
    {decode_boolean(V10, []), TempTlv11};
    _ ->
        {false,Tlv10}
end,

%%-------------------------------------------------
%% attribute suppressVPNAPP(11) with type BOOLEAN DEFAULT = false
%%-------------------------------------------------
{Term11,Tlv12} = case Tlv11 of
[{131082,V11}|TempTlv12] ->
    {decode_boolean(V11, []), TempTlv12};
    _ ->
        {false,Tlv11}
end,

%%-------------------------------------------------
%% attribute calledINNumberOverriding(12) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
{Term12,Tlv13} = case Tlv12 of
[{131083,V12}|TempTlv13] ->
    {decode_boolean(V12, []), TempTlv13};
    _ ->
        { asn1_NOVALUE, Tlv12}
end,

%%-------------------------------------------------
%% attribute redirectServiceTreatmentInd(13) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
{Term13,Tlv14} = case Tlv13 of
[{131084,V13}|TempTlv14] ->
    {'dec_ServiceInteractionIndicatorsTwo_redirectServiceTreatmentInd'(V13, []), TempTlv14};
    _ ->
        { asn1_NOVALUE, Tlv13}
end,

case Tlv14 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv14}}}) % extra fields not allowed
end,
   {'ServiceInteractionIndicatorsTwo', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9, Term10, Term11, Term12, Term13}.

'dec_ServiceInteractionIndicatorsTwo_redirectServiceTreatmentInd'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute redirectReason(1) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {begin
Val1 = decode_octet_string(V1, []),
C1 = byte_size(Val1),
if C1 =:= 1 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'ServiceInteractionIndicatorsTwo_redirectServiceTreatmentInd', Term1}.



%%================================
%%  ServiceKey
%%================================
'enc_ServiceKey'(Val) ->
    'enc_ServiceKey'(Val, [<<2>>]).

'enc_ServiceKey'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_ServiceKey'(Tlv) ->
   'dec_ServiceKey'(Tlv, [2]).

'dec_ServiceKey'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 2147483647 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  ServiceProfileIdentifier
%%================================
'enc_ServiceProfileIdentifier'(Val) ->
    'enc_ServiceProfileIdentifier'(Val, [<<4>>]).

'enc_ServiceProfileIdentifier'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_ServiceProfileIdentifier'(Tlv) ->
   'dec_ServiceProfileIdentifier'(Tlv, [4]).

'dec_ServiceProfileIdentifier'(Tlv, TagIn) ->
decode_octet_string(Tlv, TagIn).



%%================================
%%  ServingAreaID
%%================================
'enc_ServingAreaID'(Val) ->
    'enc_ServingAreaID'(Val, [<<4>>]).

'enc_ServingAreaID'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_ServingAreaID'(Tlv) ->
   'dec_ServingAreaID'(Tlv, [4]).

'dec_ServingAreaID'(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 27 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  SFBillingChargingCharacteristics
%%================================
'enc_SFBillingChargingCharacteristics'(Val) ->
    'enc_SFBillingChargingCharacteristics'(Val, [<<4>>]).

'enc_SFBillingChargingCharacteristics'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_SFBillingChargingCharacteristics'(Tlv) ->
   'dec_SFBillingChargingCharacteristics'(Tlv, [4]).

'dec_SFBillingChargingCharacteristics'(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 27 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  SuspendTimer
%%================================
'enc_SuspendTimer'(Val) ->
    'enc_SuspendTimer'(Val, [<<2>>]).

'enc_SuspendTimer'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_SuspendTimer'(Tlv) ->
   'dec_SuspendTimer'(Tlv, [2]).

'dec_SuspendTimer'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 120 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  TDPIdentifier
%%================================
'enc_TDPIdentifier'(Val) ->
    'enc_TDPIdentifier'(Val, []).

'enc_TDPIdentifier'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      oneTrigger ->
         encode_integer(element(2,Val), [<<2>>]);
      triggers ->
         'enc_Triggers'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_TDPIdentifier'(Tlv) ->
   'dec_TDPIdentifier'(Tlv, []).

'dec_TDPIdentifier'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'oneTrigger'
    {2, V1} -> 
        {oneTrigger, decode_integer(V1, [])};


%% 'triggers'
    {131073, V1} -> 
        {triggers, 'dec_Triggers'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  TerminalType
%%================================
'enc_TerminalType'(Val) ->
    'enc_TerminalType'(Val, [<<10>>]).

'enc_TerminalType'(Val, TagIn) ->
case Val of
unknown -> encode_tags(TagIn, [0], 1);
dialPulse -> encode_tags(TagIn, [1], 1);
dtmf -> encode_tags(TagIn, [2], 1);
isdn -> encode_tags(TagIn, [3], 1);
isdnNoDtmf -> encode_tags(TagIn, [4], 1);
spare -> encode_tags(TagIn, [16], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_TerminalType'(Tlv) ->
   'dec_TerminalType'(Tlv, [10]).

'dec_TerminalType'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> unknown;
1 -> dialPulse;
2 -> dtmf;
3 -> isdn;
4 -> isdnNoDtmf;
16 -> spare;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  XTimerID
%%================================
'enc_XTimerID'(Val) ->
    'enc_XTimerID'(Val, [<<10>>]).

'enc_XTimerID'(Val, TagIn) ->
case Val of
tssf -> encode_tags(TagIn, [0], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_XTimerID'(Tlv) ->
   'dec_XTimerID'(Tlv, [10]).

'dec_XTimerID'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> tssf;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  TimerValue
%%================================
'enc_TimerValue'(Val) ->
    'enc_TimerValue'(Val, [<<2>>]).

'enc_TimerValue'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_TimerValue'(Tlv) ->
   'dec_TimerValue'(Tlv, [2]).

'dec_TimerValue'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 2147483647 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  TraceInformation
%%================================
'enc_TraceInformation'(Val) ->
    'enc_TraceInformation'(Val, [<<48>>]).

'enc_TraceInformation'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_TraceInformation_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_TraceInformation_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_TraceInformation_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_TraceItem'(H, [<<49>>]),
   'enc_TraceInformation_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_TraceInformation'(Tlv) ->
   'dec_TraceInformation'(Tlv, [16]).

'dec_TraceInformation'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_TraceItem'(V1, [17]) || V1 <- Tlv1].




%%================================
%%  TraceItem
%%================================
'enc_TraceItem'(Val) ->
    'enc_TraceItem'(Val, [<<49>>]).

'enc_TraceItem'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute scf(1) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_TraceItem'(Tlv) ->
   'dec_TraceItem'(Tlv, [17]).

'dec_TraceItem'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
SetFun = fun(FunTlv) ->
case FunTlv of 
      %scf
TTlv = {131072,_} ->
    {1, TTlv};
      Else -> 
         {2, Else}
   end
   end,
PositionList = [SetFun(TempTlv)|| TempTlv <- Tlv1],
Tlv2 = [Stlv || {_,Stlv} <- lists:sort(PositionList)],

%%-------------------------------------------------
%% attribute scf(1) with type OCTET STRING
%%-------------------------------------------------
[V1|Tlv3] = Tlv2, 
Term1 = begin
Val1 = decode_octet_string(V1, [131072]),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 27 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'TraceItem', Term1}.


%%================================
%%  TravellingClassMark
%%================================
'enc_TravellingClassMark'(Val) ->
    'enc_TravellingClassMark'(Val, [<<4>>]).

'enc_TravellingClassMark'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_TravellingClassMark'(Tlv) ->
   'dec_TravellingClassMark'(Tlv, [4]).

'dec_TravellingClassMark'(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 27 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  TriggerDataIdentifier
%%================================
'enc_TriggerDataIdentifier'(Val) ->
    'enc_TriggerDataIdentifier'(Val, [<<48>>]).

'enc_TriggerDataIdentifier'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute triggerID(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
origAttemptAuthorized -> encode_tags([<<128>>], [1], 1);
collectedInfo -> encode_tags([<<128>>], [2], 1);
analysedInformation -> encode_tags([<<128>>], [3], 1);
routeSelectFailure -> encode_tags([<<128>>], [4], 1);
oCalledPartyBusy -> encode_tags([<<128>>], [5], 1);
oNoAnswer -> encode_tags([<<128>>], [6], 1);
oAnswer -> encode_tags([<<128>>], [7], 1);
oMidCall -> encode_tags([<<128>>], [8], 1);
oDisconnect -> encode_tags([<<128>>], [9], 1);
oAbandon -> encode_tags([<<128>>], [10], 1);
termAttemptAuthorized -> encode_tags([<<128>>], [12], 1);
tBusy -> encode_tags([<<128>>], [13], 1);
tNoAnswer -> encode_tags([<<128>>], [14], 1);
tAnswer -> encode_tags([<<128>>], [15], 1);
tMidCall -> encode_tags([<<128>>], [16], 1);
tDisconnect -> encode_tags([<<128>>], [17], 1);
tAbandon -> encode_tags([<<128>>], [18], 1);
oTermSeized -> encode_tags([<<128>>], [19], 1);
oSuspend -> encode_tags([<<128>>], [20], 1);
tSuspend -> encode_tags([<<128>>], [21], 1);
origAttempt -> encode_tags([<<128>>], [22], 1);
termAttempt -> encode_tags([<<128>>], [23], 1);
oReAnswer -> encode_tags([<<128>>], [24], 1);
tReAnswer -> encode_tags([<<128>>], [25], 1);
facilitySelectedAndAvailable -> encode_tags([<<128>>], [26], 1);
callAccepted -> encode_tags([<<128>>], [27], 1);
authorizeRouteFailure -> encode_tags([<<128>>], [28], 1);
originationDenied -> encode_tags([<<128>>], [29], 1);
terminationDenied -> encode_tags([<<128>>], [30], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute profileIdentifier(2)   External INCS3datatypes:ProfileIdentifier
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_ProfileIdentifier'(Cindex2, [<<161>>]),

%%-------------------------------------------------
%% attribute extensions(3)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_Extensions'(Cindex3, [<<162>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_TriggerDataIdentifier'(Tlv) ->
   'dec_TriggerDataIdentifier'(Tlv, [16]).

'dec_TriggerDataIdentifier'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute triggerID(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
1 -> origAttemptAuthorized;
2 -> collectedInfo;
3 -> analysedInformation;
4 -> routeSelectFailure;
5 -> oCalledPartyBusy;
6 -> oNoAnswer;
7 -> oAnswer;
8 -> oMidCall;
9 -> oDisconnect;
10 -> oAbandon;
12 -> termAttemptAuthorized;
13 -> tBusy;
14 -> tNoAnswer;
15 -> tAnswer;
16 -> tMidCall;
17 -> tDisconnect;
18 -> tAbandon;
19 -> oTermSeized;
20 -> oSuspend;
21 -> tSuspend;
22 -> origAttempt;
23 -> termAttempt;
24 -> oReAnswer;
25 -> tReAnswer;
26 -> facilitySelectedAndAvailable;
27 -> callAccepted;
28 -> authorizeRouteFailure;
29 -> originationDenied;
30 -> terminationDenied;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute profileIdentifier(2)   External INCS3datatypes:ProfileIdentifier
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_ProfileIdentifier'(V2, [131073]),

%%-------------------------------------------------
%% attribute extensions(3)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_Extensions'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'TriggerDataIdentifier', Term1, Term2, Term3}.



%%================================
%%  TriggerDPType
%%================================
'enc_TriggerDPType'(Val) ->
    'enc_TriggerDPType'(Val, [<<10>>]).

'enc_TriggerDPType'(Val, TagIn) ->
case Val of
'tdp-r' -> encode_tags(TagIn, [0], 1);
'tdp-n' -> encode_tags(TagIn, [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_TriggerDPType'(Tlv) ->
   'dec_TriggerDPType'(Tlv, [10]).

'dec_TriggerDPType'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> 'tdp-r';
1 -> 'tdp-n';
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  TriggerResults
%%================================
'enc_TriggerResults'(Val) ->
    'enc_TriggerResults'(Val, [<<48>>]).

'enc_TriggerResults'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_TriggerResults_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_TriggerResults_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_TriggerResults_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_TriggerResult'(H, [<<48>>]),
   'enc_TriggerResults_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_TriggerResults'(Tlv) ->
   'dec_TriggerResults'(Tlv, [16]).

'dec_TriggerResults'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_TriggerResult'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  TriggerResult
%%================================
'enc_TriggerResult'(Val) ->
    'enc_TriggerResult'(Val, [<<48>>]).

'enc_TriggerResult'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute tDPIdentifer(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute actionPerformed(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
activated -> encode_tags([<<129>>], [1], 1);
deactivated -> encode_tags([<<129>>], [2], 1);
alreadyActive -> encode_tags([<<129>>], [3], 1);
alreadyInactive -> encode_tags([<<129>>], [4], 1);
isActive -> encode_tags([<<129>>], [5], 1);
isInactive -> encode_tags([<<129>>], [6], 1);
tDPunknown -> encode_tags([<<129>>], [7], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute dpName(3) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex3 of
origAttemptAuthorized -> encode_tags([<<130>>], [1], 1);
collectedInfo -> encode_tags([<<130>>], [2], 1);
analysedInformation -> encode_tags([<<130>>], [3], 1);
routeSelectFailure -> encode_tags([<<130>>], [4], 1);
oCalledPartyBusy -> encode_tags([<<130>>], [5], 1);
oNoAnswer -> encode_tags([<<130>>], [6], 1);
oAnswer -> encode_tags([<<130>>], [7], 1);
oMidCall -> encode_tags([<<130>>], [8], 1);
oDisconnect -> encode_tags([<<130>>], [9], 1);
oAbandon -> encode_tags([<<130>>], [10], 1);
termAttemptAuthorized -> encode_tags([<<130>>], [12], 1);
tBusy -> encode_tags([<<130>>], [13], 1);
tNoAnswer -> encode_tags([<<130>>], [14], 1);
tAnswer -> encode_tags([<<130>>], [15], 1);
tMidCall -> encode_tags([<<130>>], [16], 1);
tDisconnect -> encode_tags([<<130>>], [17], 1);
tAbandon -> encode_tags([<<130>>], [18], 1);
oTermSeized -> encode_tags([<<130>>], [19], 1);
oSuspend -> encode_tags([<<130>>], [20], 1);
tSuspend -> encode_tags([<<130>>], [21], 1);
origAttempt -> encode_tags([<<130>>], [22], 1);
termAttempt -> encode_tags([<<130>>], [23], 1);
oReAnswer -> encode_tags([<<130>>], [24], 1);
tReAnswer -> encode_tags([<<130>>], [25], 1);
facilitySelectedAndAvailable -> encode_tags([<<130>>], [26], 1);
callAccepted -> encode_tags([<<130>>], [27], 1);
authorizeRouteFailure -> encode_tags([<<130>>], [28], 1);
originationDenied -> encode_tags([<<130>>], [29], 1);
terminationDenied -> encode_tags([<<130>>], [30], 1);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_TriggerResult'(Tlv) ->
   'dec_TriggerResult'(Tlv, [16]).

'dec_TriggerResult'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute tDPIdentifer(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1, [131072]),

%%-------------------------------------------------
%% attribute actionPerformed(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
1 -> activated;
2 -> deactivated;
3 -> alreadyActive;
4 -> alreadyInactive;
5 -> isActive;
6 -> isInactive;
7 -> tDPunknown;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute dpName(3) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {case decode_integer(V3, []) of
1 -> origAttemptAuthorized;
2 -> collectedInfo;
3 -> analysedInformation;
4 -> routeSelectFailure;
5 -> oCalledPartyBusy;
6 -> oNoAnswer;
7 -> oAnswer;
8 -> oMidCall;
9 -> oDisconnect;
10 -> oAbandon;
12 -> termAttemptAuthorized;
13 -> tBusy;
14 -> tNoAnswer;
15 -> tAnswer;
16 -> tMidCall;
17 -> tDisconnect;
18 -> tAbandon;
19 -> oTermSeized;
20 -> oSuspend;
21 -> tSuspend;
22 -> origAttempt;
23 -> termAttempt;
24 -> oReAnswer;
25 -> tReAnswer;
26 -> facilitySelectedAndAvailable;
27 -> callAccepted;
28 -> authorizeRouteFailure;
29 -> originationDenied;
30 -> terminationDenied;
Default2 -> exit({error,{asn1,{illegal_enumerated,Default2}}})
end, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'TriggerResult', Term1, Term2, Term3}.



%%================================
%%  Triggers
%%================================
'enc_Triggers'(Val) ->
    'enc_Triggers'(Val, [<<48>>]).

'enc_Triggers'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_Triggers_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_Triggers_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_Triggers_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_Trigger'(H, [<<48>>]),
   'enc_Triggers_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_Triggers'(Tlv) ->
   'dec_Triggers'(Tlv, [16]).

'dec_Triggers'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_Trigger'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  Trigger
%%================================
'enc_Trigger'(Val) ->
    'enc_Trigger'(Val, [<<48>>]).

'enc_Trigger'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute tDPIdentifier(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute dpName(2) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex2 of
origAttemptAuthorized -> encode_tags([<<129>>], [1], 1);
collectedInfo -> encode_tags([<<129>>], [2], 1);
analysedInformation -> encode_tags([<<129>>], [3], 1);
routeSelectFailure -> encode_tags([<<129>>], [4], 1);
oCalledPartyBusy -> encode_tags([<<129>>], [5], 1);
oNoAnswer -> encode_tags([<<129>>], [6], 1);
oAnswer -> encode_tags([<<129>>], [7], 1);
oMidCall -> encode_tags([<<129>>], [8], 1);
oDisconnect -> encode_tags([<<129>>], [9], 1);
oAbandon -> encode_tags([<<129>>], [10], 1);
termAttemptAuthorized -> encode_tags([<<129>>], [12], 1);
tBusy -> encode_tags([<<129>>], [13], 1);
tNoAnswer -> encode_tags([<<129>>], [14], 1);
tAnswer -> encode_tags([<<129>>], [15], 1);
tMidCall -> encode_tags([<<129>>], [16], 1);
tDisconnect -> encode_tags([<<129>>], [17], 1);
tAbandon -> encode_tags([<<129>>], [18], 1);
oTermSeized -> encode_tags([<<129>>], [19], 1);
oSuspend -> encode_tags([<<129>>], [20], 1);
tSuspend -> encode_tags([<<129>>], [21], 1);
origAttempt -> encode_tags([<<129>>], [22], 1);
termAttempt -> encode_tags([<<129>>], [23], 1);
oReAnswer -> encode_tags([<<129>>], [24], 1);
tReAnswer -> encode_tags([<<129>>], [25], 1);
facilitySelectedAndAvailable -> encode_tags([<<129>>], [26], 1);
callAccepted -> encode_tags([<<129>>], [27], 1);
authorizeRouteFailure -> encode_tags([<<129>>], [28], 1);
originationDenied -> encode_tags([<<129>>], [29], 1);
terminationDenied -> encode_tags([<<129>>], [30], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_Trigger'(Tlv) ->
   'dec_Trigger'(Tlv, [16]).

'dec_Trigger'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute tDPIdentifier(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1, [131072]),

%%-------------------------------------------------
%% attribute dpName(2) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {case decode_integer(V2, []) of
1 -> origAttemptAuthorized;
2 -> collectedInfo;
3 -> analysedInformation;
4 -> routeSelectFailure;
5 -> oCalledPartyBusy;
6 -> oNoAnswer;
7 -> oAnswer;
8 -> oMidCall;
9 -> oDisconnect;
10 -> oAbandon;
12 -> termAttemptAuthorized;
13 -> tBusy;
14 -> tNoAnswer;
15 -> tAnswer;
16 -> tMidCall;
17 -> tDisconnect;
18 -> tAbandon;
19 -> oTermSeized;
20 -> oSuspend;
21 -> tSuspend;
22 -> origAttempt;
23 -> termAttempt;
24 -> oReAnswer;
25 -> tReAnswer;
26 -> facilitySelectedAndAvailable;
27 -> callAccepted;
28 -> authorizeRouteFailure;
29 -> originationDenied;
30 -> terminationDenied;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'Trigger', Term1, Term2}.



%%================================
%%  TriggerStatus
%%================================
'enc_TriggerStatus'(Val) ->
    'enc_TriggerStatus'(Val, [<<10>>]).

'enc_TriggerStatus'(Val, TagIn) ->
case Val of
created -> encode_tags(TagIn, [0], 1);
alreadyExist -> encode_tags(TagIn, [1], 1);
deleted -> encode_tags(TagIn, [2], 1);
unknownTrigger -> encode_tags(TagIn, [3], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_TriggerStatus'(Tlv) ->
   'dec_TriggerStatus'(Tlv, [10]).

'dec_TriggerStatus'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> created;
1 -> alreadyExist;
2 -> deleted;
3 -> unknownTrigger;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  TriggerType
%%================================
'enc_TriggerType'(Val) ->
    'enc_TriggerType'(Val, [<<10>>]).

'enc_TriggerType'(Val, TagIn) ->
case Val of
featureActivation -> encode_tags(TagIn, [0], 1);
verticalServiceCode -> encode_tags(TagIn, [1], 1);
customizedAccess -> encode_tags(TagIn, [2], 1);
customizedIntercom -> encode_tags(TagIn, [3], 1);
emergencyService -> encode_tags(TagIn, [12], 1);
aFR -> encode_tags(TagIn, [13], 1);
sharedIOTrunk -> encode_tags(TagIn, [14], 1);
offHookDelay -> encode_tags(TagIn, [17], 1);
channelSetupPRI -> encode_tags(TagIn, [18], 1);
tNoAnswer -> encode_tags(TagIn, [25], 1);
tBusy -> encode_tags(TagIn, [26], 1);
oCalledPartyBusy -> encode_tags(TagIn, [27], 1);
oNoAnswer -> encode_tags(TagIn, [29], 1);
originationAttemptAuthorized -> encode_tags(TagIn, [30], 1);
oAnswer -> encode_tags(TagIn, [31], 1);
oDisconnect -> encode_tags(TagIn, [32], 1);
termAttemptAuthorized -> encode_tags(TagIn, [33], 1);
tAnswer -> encode_tags(TagIn, [34], 1);
tDisconnect -> encode_tags(TagIn, [35], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_TriggerType'(Tlv) ->
   'dec_TriggerType'(Tlv, [10]).

'dec_TriggerType'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> featureActivation;
1 -> verticalServiceCode;
2 -> customizedAccess;
3 -> customizedIntercom;
12 -> emergencyService;
13 -> aFR;
14 -> sharedIOTrunk;
17 -> offHookDelay;
18 -> channelSetupPRI;
25 -> tNoAnswer;
26 -> tBusy;
27 -> oCalledPartyBusy;
29 -> oNoAnswer;
30 -> originationAttemptAuthorized;
31 -> oAnswer;
32 -> oDisconnect;
33 -> termAttemptAuthorized;
34 -> tAnswer;
35 -> tDisconnect;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  USIInformation
%%================================
'enc_USIInformation'(Val) ->
    'enc_USIInformation'(Val, [<<4>>]).

'enc_USIInformation'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_USIInformation'(Tlv) ->
   'dec_USIInformation'(Tlv, [4]).

'dec_USIInformation'(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 5 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  USIMonitorMode
%%================================
'enc_USIMonitorMode'(Val) ->
    'enc_USIMonitorMode'(Val, [<<10>>]).

'enc_USIMonitorMode'(Val, TagIn) ->
case Val of
monitoringActive -> encode_tags(TagIn, [0], 1);
monitoringInactive -> encode_tags(TagIn, [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_USIMonitorMode'(Tlv) ->
   'dec_USIMonitorMode'(Tlv, [10]).

'dec_USIMonitorMode'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> monitoringActive;
1 -> monitoringInactive;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  USIServiceIndicator
%%================================
'enc_USIServiceIndicator'(Val) ->
    'enc_USIServiceIndicator'(Val, []).

'enc_USIServiceIndicator'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      global ->
         encode_object_identifier(element(2,Val), [<<6>>]);
      local ->
         encode_restricted_string(element(2,Val), [<<4>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_USIServiceIndicator'(Tlv) ->
   'dec_USIServiceIndicator'(Tlv, []).

'dec_USIServiceIndicator'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'global'
    {6, V1} -> 
        {global, decode_object_identifier(V1, [])};


%% 'local'
    {4, V1} -> 
        {local, begin
Val1 = decode_octet_string(V1, []),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 27 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  VPNIndicator
%%================================
'enc_VPNIndicator'(Val) ->
    'enc_VPNIndicator'(Val, [<<1>>]).

'enc_VPNIndicator'(Val, TagIn) ->
encode_boolean(Val, TagIn).


'dec_VPNIndicator'(Tlv) ->
   'dec_VPNIndicator'(Tlv, [1]).

'dec_VPNIndicator'(Tlv, TagIn) ->
decode_boolean(Tlv, TagIn).

'initialCallSegment'() ->
1.

'dtleg1'() ->
<<1>>.

'dtleg2'() ->
<<2>>.

'highLayerCompatibilityLength'() ->
2.

'minCauseLength'() ->
1.

'numOfCounters'() ->
100.

'numOfInfoItems'() ->
5.

'minAChBillingChargingLength'() ->
1.

'maxAChBillingChargingLength'() ->
27.

'minATMTrafficDescriptorLength'() ->
1.

'maxATMTrafficDescriptorLength'() ->
27.

'minBackwardGVNSLength'() ->
1.

'maxBackwardGVNSLength'() ->
27.

'maxBearerCapabilityLength'() ->
27.

'minBroadbandBearerCapabilityLength'() ->
1.

'maxBroadbandBearerCapabilityLength'() ->
27.

'minCalledDirectoryNumberLength'() ->
1.

'maxCalledDirectoryNumberLength'() ->
27.

'minCalledPartyNumberLength'() ->
0.

'maxCalledPartyNumberLength'() ->
15.

'minCalledPartySubaddressLength'() ->
1.

'maxCalledPartySubaddressLength'() ->
27.

'minCallingGeodeticLocationLength'() ->
1.

'maxCallingGeodeticLocationLength'() ->
10.

'minCallingPartyNumberLength'() ->
1.

'maxCallingPartyNumberLength'() ->
27.

'minCallingPartySubaddressLength'() ->
1.

'maxCallingPartySubaddressLength'() ->
27.

'minCallResultLength'() ->
1.

'maxCallResultLength'() ->
27.

'minCarrierLength'() ->
3.

'maxCarrierLength'() ->
10.

'maxCauseLength'() ->
16.

'minDigitsLength'() ->
1.

'maxDigitsLength'() ->
27.

'minDisplayInformationLength'() ->
1.

'maxDisplayInformationLength'() ->
27.

'minEventSpecificInformationChargingLength'() ->
1.

'maxEventSpecificInformationChargingLength'() ->
27.

'minEventTypeChargingLength'() ->
1.

'maxEventTypeChargingLength'() ->
27.

'minFCIBillingChargingLength'() ->
1.

'maxFCIBillingChargingLength'() ->
27.

'minForwardGVNSLength'() ->
1.

'maxForwardGVNSLength'() ->
27.

'minGenericNameLength'() ->
1.

'maxGenericNameLength'() ->
27.

'minGenericNumberLength'() ->
1.

'maxGenericNumberLength'() ->
27.

'maxInitialTimeInterval'() ->
27.

'maxINServiceCompatibilityIndLength'() ->
27.

'minIPAvailableLength'() ->
1.

'maxIPAvailableLength'() ->
27.

'minIPSSPCapabilitiesLength'() ->
1.

'maxIPSSPCapabilitiesLength'() ->
27.

'minISDNAccessRelatedInfoLength'() ->
1.

'maxISDNAccessRelatedInfoLength'() ->
10.

'minISUPParameterLength'() ->
1.

'maxISUPParameterLength'() ->
255.

'maxISUPParameterType'() ->
255.

'minLocationNumberLength'() ->
1.

'maxLocationNumberLength'() ->
27.

'minMidCallControlInfoNum'() ->
1.

'maxMidCallControlInfoNum'() ->
27.

'minOriginalCalledPartyIDLength'() ->
1.

'maxOriginalCalledPartyIDLength'() ->
15.

'minQoSParameterLength'() ->
1.

'maxQoSParameterLength'() ->
5.

'minReasonLength'() ->
1.

'maxReasonLength'() ->
5.

'minRedirectingPartyIDLength'() ->
1.

'maxRedirectingPartyIDLength'() ->
27.

'minRequestedUTSINum'() ->
1.

'maxRequestedUTSINum'() ->
27.

'minRouteListLength'() ->
1.

'maxRouteListLength'() ->
27.

'minRoutingNumberLength'() ->
1.

'maxRoutingNumberLength'() ->
27.

'minScfIDLength'() ->
1.

'maxScfIDLength'() ->
27.

'minSCIBillingChargingLength'() ->
1.

'maxSCIBillingChargingLength'() ->
27.

'minSDSSinformationLength'() ->
1.

'maxSDSSinformationLength'() ->
27.

'minServiceInteractionIndicatorsLength'() ->
1.

'maxServiceInteractionIndicatorsLength'() ->
5.

'minSFBillingChargingLength'() ->
1.

'maxSFBillingChargingLength'() ->
27.

'minUSIInformationLength'() ->
1.

'maxUSIInformationLength'() ->
5.

'minUSIServiceIndicatorLength'() ->
1.

'maxUSIServiceIndicatorLength'() ->
27.

'numOfBCSMEvents'() ->
4.

'numOfBCUSMEvents'() ->
4.

'numOfChargingEvents'() ->
4.

'numOfCSAs'() ->
10.

'numOfCSs'() ->
10.

'numOfGenericNumbers'() ->
2.

'numOfINProfile'() ->
1.

'numOfTriggers'() ->
27.

'numOfInServiceCompatibilityIndLength'() ->
2.

'numOfLegs'() ->
10.

'maxAmount'() ->
10000.

'maxCallReferenceLength'() ->
27.

'maxInitialUnitIncrement'() ->
2.

'maxScalingFactor'() ->
2.

'maxSegmentsPerDataInterval'() ->
27.

'ub-nbCall'() ->
27.

'numOfAddresses'() ->
27.

'numOfServiceKeys'() ->
3.

'minAttributesLength'() ->
1.

'maxAttributesLength'() ->
27.

'minMailBoxIDLength'() ->
1.

'maxMailBoxIDLength'() ->
27.

'minMessageContentLength'() ->
1.

'maxMessageContentLength'() ->
27.

'minReceivedInformationLength'() ->
1.

'maxReceivedInformationLength'() ->
27.

'maxRecordingTime'() ->
27.

'numOfMessageIDs'() ->
2.

'numOfExtensions'() ->
1.

'maxRecordedMessageUnits'() ->
27.


%%%
%%% Run-time functions.
%%%

'dialyzer-suppressions'(Arg) ->
    ok.

ber_decode_nif(B) ->
    asn1rt_nif:decode_ber_tlv(B).

ber_encode([Tlv]) ->
    ber_encode(Tlv);
ber_encode(Tlv) when is_binary(Tlv) ->
    Tlv;
ber_encode(Tlv) ->
    asn1rt_nif:encode_ber_tlv(Tlv).

collect_parts(TlvList) ->
    collect_parts(TlvList, []).

collect_parts([{_,L}|Rest], Acc) when is_list(L) ->
    collect_parts(Rest, [collect_parts(L)|Acc]);
collect_parts([{3,<<Unused,Bits/binary>>}|Rest], _Acc) ->
    collect_parts_bit(Rest, [Bits], Unused);
collect_parts([{_T,V}|Rest], Acc) ->
    collect_parts(Rest, [V|Acc]);
collect_parts([], Acc) ->
    list_to_binary(lists:reverse(Acc)).

collect_parts_bit([{3,<<Unused,Bits/binary>>}|Rest], Acc, Uacc) ->
    collect_parts_bit(Rest, [Bits|Acc], Unused + Uacc);
collect_parts_bit([], Acc, Uacc) ->
    list_to_binary([Uacc|lists:reverse(Acc)]).

dec_subidentifiers(<<>>, _Av, Al) ->
    lists:reverse(Al);
dec_subidentifiers(<<1:1,H:7,T/binary>>, Av, Al) ->
    dec_subidentifiers(T, Av bsl 7 + H, Al);
dec_subidentifiers(<<H,T/binary>>, Av, Al) ->
    dec_subidentifiers(T, 0, [Av bsl 7 + H|Al]).

decode_bitstring2(1,
                  Unused,
                  <<B7:1,B6:1,B5:1,B4:1,B3:1,B2:1,B1:1,B0:1,_/binary>>) ->
    lists:sublist([B7,B6,B5,B4,B3,B2,B1,B0], 8 - Unused);
decode_bitstring2(Len,
                  Unused,
                  <<B7:1,
                    B6:1,
                    B5:1,
                    B4:1,
                    B3:1,
                    B2:1,
                    B1:1,
                    B0:1,
                    Buffer/binary>>) ->
    [B7,B6,B5,B4,B3,B2,B1,B0|decode_bitstring2(Len - 1, Unused, Buffer)].

decode_bitstring_NNL(BitList, NamedNumberList) ->
    decode_bitstring_NNL(BitList, NamedNumberList, 0, []).

decode_bitstring_NNL([], _, _No, Result) ->
    lists:reverse(Result);
decode_bitstring_NNL([B|BitList],
                     [{Name,No}|NamedNumberList],
                     No,
                     Result) ->
    if
        B =:= 0 ->
            decode_bitstring_NNL(BitList,
                                 NamedNumberList,
                                 No + 1,
                                 Result);
        true ->
            decode_bitstring_NNL(BitList,
                                 NamedNumberList,
                                 No + 1,
                                 [Name|Result])
    end;
decode_bitstring_NNL([1|BitList], NamedNumberList, No, Result) ->
    decode_bitstring_NNL(BitList,
                         NamedNumberList,
                         No + 1,
                         [{bit,No}|Result]);
decode_bitstring_NNL([0|BitList], NamedNumberList, No, Result) ->
    decode_bitstring_NNL(BitList, NamedNumberList, No + 1, Result).

decode_boolean(Tlv, TagIn) ->
    Val = match_tags(Tlv, TagIn),
    case Val of
        <<0:8>> ->
            false;
        <<_:8>> ->
            true;
        _ ->
            exit({error,{asn1,{decode_boolean,Val}}})
    end.

decode_integer(Tlv, TagIn) ->
    Bin = match_tags(Tlv, TagIn),
    Len = byte_size(Bin),
    <<Int:Len/signed-unit:8>> = Bin,
    Int.

decode_named_bit_string(Buffer, NamedNumberList, Tags) ->
    case match_and_collect(Buffer, Tags) of
        <<0>> ->
            [];
        <<Unused,Bits/binary>> ->
            BitString = decode_bitstring2(byte_size(Bits), Unused, Bits),
            decode_bitstring_NNL(BitString, NamedNumberList)
    end.

decode_null(Tlv, Tags) ->
    Val = match_tags(Tlv, Tags),
    case Val of
        <<>> ->
            'NULL';
        _ ->
            exit({error,{asn1,{decode_null,Val}}})
    end.

decode_object_identifier(Tlv, Tags) ->
    Val = match_tags(Tlv, Tags),
    [AddedObjVal|ObjVals] = dec_subidentifiers(Val, 0, []),
    {Val1,Val2} =
        if
            AddedObjVal < 40 ->
                {0,AddedObjVal};
            AddedObjVal < 80 ->
                {1,AddedObjVal - 40};
            true ->
                {2,AddedObjVal - 80}
        end,
    list_to_tuple([Val1,Val2|ObjVals]).

decode_octet_string(Tlv, TagsIn) ->
    Bin = match_and_collect(Tlv, TagsIn),
    binary:copy(Bin).

decode_open_type_as_binary(Tlv, TagIn) ->
    ber_encode(match_tags(Tlv, TagIn)).

decode_restricted_string(Tlv, TagsIn) ->
    match_and_collect(Tlv, TagsIn).

do_encode_named_bit_string([FirstVal|RestVal], NamedBitList, TagIn) ->
    ToSetPos = get_all_bitposes([FirstVal|RestVal], NamedBitList, []),
    Size = lists:max(ToSetPos) + 1,
    BitList = make_and_set_list(Size, ToSetPos, 0),
    {Len,Unused,OctetList} = encode_bitstring(BitList),
    encode_tags(TagIn, [Unused|OctetList], Len + 1).

e_object_identifier({'OBJECT IDENTIFIER',V}) ->
    e_object_identifier(V);
e_object_identifier(V) when is_tuple(V) ->
    e_object_identifier(tuple_to_list(V));
e_object_identifier([E1,E2|Tail]) ->
    Head = 40 * E1 + E2,
    {H,Lh} = mk_object_val(Head),
    {R,Lr} = lists:mapfoldl(fun enc_obj_id_tail/2, 0, Tail),
    {[H|R],Lh + Lr}.

enc_obj_id_tail(H, Len) ->
    {B,L} = mk_object_val(H),
    {B,Len + L}.

encode_bitstring([B8,B7,B6,B5,B4,B3,B2,B1|Rest]) ->
    Val =
        B8 bsl 7 bor (B7 bsl 6) bor (B6 bsl 5) bor (B5 bsl 4)
        bor
        (B4 bsl 3)
        bor
        (B3 bsl 2)
        bor
        (B2 bsl 1)
        bor
        B1,
    encode_bitstring(Rest, [Val], 1);
encode_bitstring(Val) ->
    {Unused,Octet} = unused_bitlist(Val, 7, 0),
    {1,Unused,[Octet]}.

encode_bitstring([B8,B7,B6,B5,B4,B3,B2,B1|Rest], Ack, Len) ->
    Val =
        B8 bsl 7 bor (B7 bsl 6) bor (B6 bsl 5) bor (B5 bsl 4)
        bor
        (B4 bsl 3)
        bor
        (B3 bsl 2)
        bor
        (B2 bsl 1)
        bor
        B1,
    encode_bitstring(Rest, [Ack,Val], Len + 1);
encode_bitstring([], Ack, Len) ->
    {Len,0,Ack};
encode_bitstring(Rest, Ack, Len) ->
    {Unused,Val} = unused_bitlist(Rest, 7, 0),
    {Len + 1,Unused,[Ack,Val]}.

encode_boolean(true, TagIn) ->
    encode_tags(TagIn, [255], 1);
encode_boolean(false, TagIn) ->
    encode_tags(TagIn, [0], 1);
encode_boolean(X, _) ->
    exit({error,{asn1,{encode_boolean,X}}}).

encode_integer(Val) ->
    Bytes =
        if
            Val >= 0 ->
                encode_integer_pos(Val, []);
            true ->
                encode_integer_neg(Val, [])
        end,
    {Bytes,length(Bytes)}.

encode_integer(Val, Tag) when is_integer(Val) ->
    encode_tags(Tag, encode_integer(Val));
encode_integer(Val, _Tag) ->
    exit({error,{asn1,{encode_integer,Val}}}).

encode_integer_neg(- 1, [B1|_T] = L) when B1 > 127 ->
    L;
encode_integer_neg(N, Acc) ->
    encode_integer_neg(N bsr 8, [N band 255|Acc]).

encode_integer_pos(0, [B|_Acc] = L) when B < 128 ->
    L;
encode_integer_pos(N, Acc) ->
    encode_integer_pos(N bsr 8, [N band 255|Acc]).

encode_length(L) when L =< 127 ->
    {[L],1};
encode_length(L) ->
    Oct = minimum_octets(L),
    Len = length(Oct),
    if
        Len =< 126 ->
            {[128 bor Len|Oct],Len + 1};
        true ->
            exit({error,{asn1,too_long_length_oct,Len}})
    end.

encode_named_bit_string([H|_] = Bits, NamedBitList, TagIn)
    when is_atom(H) ->
    do_encode_named_bit_string(Bits, NamedBitList, TagIn);
encode_named_bit_string([{bit,_}|_] = Bits, NamedBitList, TagIn) ->
    do_encode_named_bit_string(Bits, NamedBitList, TagIn);
encode_named_bit_string([], _NamedBitList, TagIn) ->
    encode_unnamed_bit_string(<<>>, TagIn);
encode_named_bit_string(Bits, _NamedBitList, TagIn)
    when is_bitstring(Bits) ->
    encode_unnamed_bit_string(Bits, TagIn).

encode_null(_Val, TagIn) ->
    encode_tags(TagIn, [], 0).

encode_object_identifier(Val, TagIn) ->
    encode_tags(TagIn, e_object_identifier(Val)).

encode_open_type(Val, T) when is_list(Val) ->
    encode_open_type(list_to_binary(Val), T);
encode_open_type(Val, Tag) ->
    encode_tags(Tag, Val, byte_size(Val)).

encode_restricted_string(OctetList, TagIn) when is_binary(OctetList) ->
    encode_tags(TagIn, OctetList, byte_size(OctetList));
encode_restricted_string(OctetList, TagIn) when is_list(OctetList) ->
    encode_tags(TagIn, OctetList, length(OctetList)).

encode_tags(TagIn, {BytesSoFar,LenSoFar}) ->
    encode_tags(TagIn, BytesSoFar, LenSoFar).

encode_tags([Tag|Trest], BytesSoFar, LenSoFar) ->
    {Bytes2,L2} = encode_length(LenSoFar),
    encode_tags(Trest,
                [Tag,Bytes2|BytesSoFar],
                LenSoFar + byte_size(Tag) + L2);
encode_tags([], BytesSoFar, LenSoFar) ->
    {BytesSoFar,LenSoFar}.

encode_unnamed_bit_string(Bits, TagIn) ->
    Unused = (8 - bit_size(Bits) band 7) band 7,
    Bin = <<Unused,Bits/bitstring,0:Unused>>,
    encode_tags(TagIn, Bin, byte_size(Bin)).

get_all_bitposes([{bit,ValPos}|Rest], NamedBitList, Ack) ->
    get_all_bitposes(Rest, NamedBitList, [ValPos|Ack]);
get_all_bitposes([Val|Rest], NamedBitList, Ack) when is_atom(Val) ->
    case lists:keyfind(Val, 1, NamedBitList) of
        {_ValName,ValPos} ->
            get_all_bitposes(Rest, NamedBitList, [ValPos|Ack]);
        _ ->
            exit({error,{asn1,{bitstring_namedbit,Val}}})
    end;
get_all_bitposes([], _NamedBitList, Ack) ->
    lists:sort(Ack).

make_and_set_list(0, [], _) ->
    [];
make_and_set_list(0, _, _) ->
    exit({error,{asn1,bitstring_sizeconstraint}});
make_and_set_list(Len, [XPos|SetPos], XPos) ->
    [1|make_and_set_list(Len - 1, SetPos, XPos + 1)];
make_and_set_list(Len, [Pos|SetPos], XPos) ->
    [0|make_and_set_list(Len - 1, [Pos|SetPos], XPos + 1)];
make_and_set_list(Len, [], XPos) ->
    [0|make_and_set_list(Len - 1, [], XPos + 1)].

match_and_collect(Tlv, TagsIn) ->
    Val = match_tags(Tlv, TagsIn),
    case Val of
        [_|_] = PartList ->
            collect_parts(PartList);
        Bin when is_binary(Bin) ->
            Bin
    end.

match_tags({T,V}, [T]) ->
    V;
match_tags({T,V}, [T|Tt]) ->
    match_tags(V, Tt);
match_tags([{T,V}], [T|Tt]) ->
    match_tags(V, Tt);
match_tags([{T,_V}|_] = Vlist, [T]) ->
    Vlist;
match_tags(Tlv, []) ->
    Tlv;
match_tags({Tag,_V} = Tlv, [T|_Tt]) ->
    exit({error,{asn1,{wrong_tag,{{expected,T},{got,Tag,Tlv}}}}}).

minimum_octets(0, Acc) ->
    Acc;
minimum_octets(Val, Acc) ->
    minimum_octets(Val bsr 8, [Val band 255|Acc]).

minimum_octets(Val) ->
    minimum_octets(Val, []).

mk_object_val(0, Ack, Len) ->
    {Ack,Len};
mk_object_val(Val, Ack, Len) ->
    mk_object_val(Val bsr 7, [Val band 127 bor 128|Ack], Len + 1).

mk_object_val(Val) when Val =< 127 ->
    {[255 band Val],1};
mk_object_val(Val) ->
    mk_object_val(Val bsr 7, [Val band 127], 1).

unused_bitlist([], Trail, Ack) ->
    {Trail + 1,Ack};
unused_bitlist([Bit|Rest], Trail, Ack) ->
    unused_bitlist(Rest, Trail - 1, Bit bsl Trail bor Ack).
