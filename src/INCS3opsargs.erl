%% Generated by the Erlang ASN.1 BER_V2-compiler version, utilizing bit-syntax:4.0.3
%% Purpose: encoder and decoder to the types in mod INCS3opsargs

-module('INCS3opsargs').
-compile(nowarn_unused_vars).
-dialyzer(no_improper_lists).
-include("INCS3opsargs.hrl").
-asn1_info([{vsn,'4.0.3'},
            {module,'INCS3opsargs'},
            {options,[{i,"src"},{outdir,"src"},noobj,{i,"."},{i,"asn1"}]}]).

-export([encoding_rule/0,bit_string_format/0,
         legacy_erlang_types/0]).
-export(['dialyzer-suppressions'/1]).
-export([
'enc_CallReferenceNumber'/2,
'enc_ChargingMessageType'/2,
'enc_Ext-BasicServiceCode'/2,
'enc_ISDNAddressString'/2,
'enc_OCSIApplicable'/2,
'enc_SubscriberState'/2,
'enc_SuppressionOfAnnouncement'/2,
'enc_CancelFailed'/2,
'enc_RequestedInfoError'/2,
'enc_SystemFailure'/2,
'enc_TaskRefused'/2,
'enc_UnavailableNetworkResource'/2,
'enc_CallSegmentID'/2,
'enc_LegID'/2,
'enc_LegType'/2,
'enc_MiscCallInfo'/2,
'enc_TimerID'/2,
'enc_ActivateServiceFilteringArg'/2,
'enc_AnalysedInformationArg'/2,
'enc_AnalyseInformationArg'/2,
'enc_ApplyChargingArg'/2,
'enc_ApplyChargingReportArg'/2,
'enc_AssistRequestInstructionsArg'/2,
'enc_AuthorizeTerminationArg'/2,
'enc_CallGapArg'/2,
'enc_CallInformationReportArg'/2,
'enc_CallInformationRequestArg'/2,
'enc_CancelArg'/2,
'enc_CancelStatusReportRequestArg'/2,
'enc_CollectedInformationArg'/2,
'enc_CollectInformationArg'/2,
'enc_ConnectArg'/2,
'enc_ConnectToResourceArg'/2,
'enc_ContinueWithArgumentArg'/2,
'enc_CreateCallSegmentAssociationArg'/2,
'enc_CreateCallSegmentAssociationResultArg'/2,
'enc_CreateOrRemoveTriggerDataArg'/2,
'enc_CreateOrRemoveTriggerDataResultArg'/2,
'enc_DisconnectForwardConnectionWithArgumentArg'/2,
'enc_DisconnectLegArg'/2,
'enc_EntityReleasedArg'/2,
'enc_EstablishTemporaryConnectionArg'/2,
'enc_EventNotificationChargingArg'/2,
'enc_EventReportBCSMArg'/2,
'enc_EventReportFacilityArg'/2,
'enc_FacilitySelectedAndAvailableArg'/2,
'enc_FurnishChargingInformationArg'/2,
'enc_HoldCallInNetworkArg'/2,
'enc_InitialDPArg'/2,
'enc_InitiateCallAttemptArg'/2,
'enc_ManageTriggerDataArg'/2,
'enc_ManageTriggerDataResultArg'/2,
'enc_MergeCallSegmentsArg'/2,
'enc_MoveCallSegmentsArg'/2,
'enc_MoveLegArg'/2,
'enc_OAbandonArg'/2,
'enc_OAnswerArg'/2,
'enc_OCalledPartyBusyArg'/2,
'enc_ODisconnectArg'/2,
'enc_MidCallArg'/2,
'enc_ONoAnswerArg'/2,
'enc_OriginationAttemptArg'/2,
'enc_OriginationAttemptAuthorizedArg'/2,
'enc_OSuspendedArg'/2,
'enc_ReconnectArg'/2,
'enc_ReleaseCallArg'/2,
'enc_ReportUTSIArg'/2,
'enc_RequestCurrentStatusReportArg'/2,
'enc_RequestCurrentStatusReportResultArg'/2,
'enc_RequestEveryStatusChangeReportArg'/2,
'enc_RequestFirstStatusMatchReportArg'/2,
'enc_RequestNotificationChargingEventArg'/2,
'enc_RequestReportBCSMEventArg'/2,
'enc_RequestReportFacilityEventArg'/2,
'enc_RequestReportUTSIArg'/2,
'enc_ResetTimerArg'/2,
'enc_RouteSelectFailureArg'/2,
'enc_SelectFacilityArg'/2,
'enc_SelectRouteArg'/2,
'enc_SendChargingInformationArg'/2,
'enc_SendFacilityInformationArg'/2,
'enc_SendSTUIArg'/2,
'enc_ServiceFilteringResponseArg'/2,
'enc_SetServiceProfileArg'/2,
'enc_SplitLegArg'/2,
'enc_StatusReportArg'/2,
'enc_TAnswerArg'/2,
'enc_TBusyArg'/2,
'enc_TDisconnectArg'/2,
'enc_TermAttemptAuthorizedArg'/2,
'enc_TerminationAttemptArg'/2,
'enc_TNoAnswerArg'/2,
'enc_TSuspendedArg'/2,
'enc_PlayAnnouncementArg'/2,
'enc_PromptAndCollectUserInformationArg'/2,
'enc_ReceivedInformationArg'/2,
'enc_PromptAndReceiveMessageArg'/2,
'enc_MessageReceivedArg'/2,
'enc_ScriptCloseArg'/2,
'enc_ScriptEventArg'/2,
'enc_ScriptInformationArg'/2,
'enc_ScriptRunArg'/2,
'enc_SpecializedResourceReportArg'/2,
'enc_SRFCallGapArg'/2
]).

-export([
'dec_CallReferenceNumber'/2,
'dec_ChargingMessageType'/2,
'dec_Ext-BasicServiceCode'/2,
'dec_ISDNAddressString'/2,
'dec_OCSIApplicable'/2,
'dec_SubscriberState'/2,
'dec_SuppressionOfAnnouncement'/2,
'dec_CancelFailed'/2,
'dec_RequestedInfoError'/2,
'dec_SystemFailure'/2,
'dec_TaskRefused'/2,
'dec_UnavailableNetworkResource'/2,
'dec_CallSegmentID'/2,
'dec_LegID'/2,
'dec_LegType'/2,
'dec_MiscCallInfo'/2,
'dec_TimerID'/2,
'dec_ActivateServiceFilteringArg'/2,
'dec_AnalysedInformationArg'/2,
'dec_AnalyseInformationArg'/2,
'dec_ApplyChargingArg'/2,
'dec_ApplyChargingReportArg'/2,
'dec_AssistRequestInstructionsArg'/2,
'dec_AuthorizeTerminationArg'/2,
'dec_CallGapArg'/2,
'dec_CallInformationReportArg'/2,
'dec_CallInformationRequestArg'/2,
'dec_CancelArg'/2,
'dec_CancelStatusReportRequestArg'/2,
'dec_CollectedInformationArg'/2,
'dec_CollectInformationArg'/2,
'dec_ConnectArg'/2,
'dec_ConnectToResourceArg'/2,
'dec_ContinueWithArgumentArg'/2,
'dec_CreateCallSegmentAssociationArg'/2,
'dec_CreateCallSegmentAssociationResultArg'/2,
'dec_CreateOrRemoveTriggerDataArg'/2,
'dec_CreateOrRemoveTriggerDataResultArg'/2,
'dec_DisconnectForwardConnectionWithArgumentArg'/2,
'dec_DisconnectLegArg'/2,
'dec_EntityReleasedArg'/2,
'dec_EstablishTemporaryConnectionArg'/2,
'dec_EventNotificationChargingArg'/2,
'dec_EventReportBCSMArg'/2,
'dec_EventReportFacilityArg'/2,
'dec_FacilitySelectedAndAvailableArg'/2,
'dec_FurnishChargingInformationArg'/2,
'dec_HoldCallInNetworkArg'/2,
'dec_InitialDPArg'/2,
'dec_InitiateCallAttemptArg'/2,
'dec_ManageTriggerDataArg'/2,
'dec_ManageTriggerDataResultArg'/2,
'dec_MergeCallSegmentsArg'/2,
'dec_MoveCallSegmentsArg'/2,
'dec_MoveLegArg'/2,
'dec_OAbandonArg'/2,
'dec_OAnswerArg'/2,
'dec_OCalledPartyBusyArg'/2,
'dec_ODisconnectArg'/2,
'dec_MidCallArg'/2,
'dec_ONoAnswerArg'/2,
'dec_OriginationAttemptArg'/2,
'dec_OriginationAttemptAuthorizedArg'/2,
'dec_OSuspendedArg'/2,
'dec_ReconnectArg'/2,
'dec_ReleaseCallArg'/2,
'dec_ReportUTSIArg'/2,
'dec_RequestCurrentStatusReportArg'/2,
'dec_RequestCurrentStatusReportResultArg'/2,
'dec_RequestEveryStatusChangeReportArg'/2,
'dec_RequestFirstStatusMatchReportArg'/2,
'dec_RequestNotificationChargingEventArg'/2,
'dec_RequestReportBCSMEventArg'/2,
'dec_RequestReportFacilityEventArg'/2,
'dec_RequestReportUTSIArg'/2,
'dec_ResetTimerArg'/2,
'dec_RouteSelectFailureArg'/2,
'dec_SelectFacilityArg'/2,
'dec_SelectRouteArg'/2,
'dec_SendChargingInformationArg'/2,
'dec_SendFacilityInformationArg'/2,
'dec_SendSTUIArg'/2,
'dec_ServiceFilteringResponseArg'/2,
'dec_SetServiceProfileArg'/2,
'dec_SplitLegArg'/2,
'dec_StatusReportArg'/2,
'dec_TAnswerArg'/2,
'dec_TBusyArg'/2,
'dec_TDisconnectArg'/2,
'dec_TermAttemptAuthorizedArg'/2,
'dec_TerminationAttemptArg'/2,
'dec_TNoAnswerArg'/2,
'dec_TSuspendedArg'/2,
'dec_PlayAnnouncementArg'/2,
'dec_PromptAndCollectUserInformationArg'/2,
'dec_ReceivedInformationArg'/2,
'dec_PromptAndReceiveMessageArg'/2,
'dec_MessageReceivedArg'/2,
'dec_ScriptCloseArg'/2,
'dec_ScriptEventArg'/2,
'dec_ScriptInformationArg'/2,
'dec_ScriptRunArg'/2,
'dec_SpecializedResourceReportArg'/2,
'dec_SRFCallGapArg'/2
]).

-export([
'leg1'/0,
'leg2'/0
]).

-export([info/0]).


-export([encode/2,decode/2]).

encoding_rule() -> ber.

bit_string_format() -> bitstring.

legacy_erlang_types() -> false.

encode(Type, Data) ->
try iolist_to_binary(element(1, encode_disp(Type, Data))) of
  Bytes ->
    {ok,Bytes}
  catch
    Class:Exception when Class =:= error; Class =:= exit ->
      case Exception of
        {error,Reason}=Error ->
          Error;
        Reason ->
         {error,{asn1,Reason}}
      end
end.

decode(Type,Data) ->
try decode_disp(Type, element(1, ber_decode_nif(Data))) of
  Result ->
    {ok,Result}
  catch
    Class:Exception when Class =:= error; Class =:= exit ->
      case Exception of
        {error,Reason}=Error ->
          Error;
        Reason ->
         {error,{asn1,Reason}}
      end
end.

encode_disp('CallReferenceNumber',Data) -> 'enc_CallReferenceNumber'(Data);
encode_disp('ChargingMessageType',Data) -> 'enc_ChargingMessageType'(Data);
encode_disp('Ext-BasicServiceCode',Data) -> 'enc_Ext-BasicServiceCode'(Data);
encode_disp('ISDNAddressString',Data) -> 'enc_ISDNAddressString'(Data);
encode_disp('OCSIApplicable',Data) -> 'enc_OCSIApplicable'(Data);
encode_disp('SubscriberState',Data) -> 'enc_SubscriberState'(Data);
encode_disp('SuppressionOfAnnouncement',Data) -> 'enc_SuppressionOfAnnouncement'(Data);
encode_disp('CancelFailed',Data) -> 'enc_CancelFailed'(Data);
encode_disp('RequestedInfoError',Data) -> 'enc_RequestedInfoError'(Data);
encode_disp('SystemFailure',Data) -> 'enc_SystemFailure'(Data);
encode_disp('TaskRefused',Data) -> 'enc_TaskRefused'(Data);
encode_disp('UnavailableNetworkResource',Data) -> 'enc_UnavailableNetworkResource'(Data);
encode_disp('CallSegmentID',Data) -> 'enc_CallSegmentID'(Data);
encode_disp('LegID',Data) -> 'enc_LegID'(Data);
encode_disp('LegType',Data) -> 'enc_LegType'(Data);
encode_disp('MiscCallInfo',Data) -> 'enc_MiscCallInfo'(Data);
encode_disp('TimerID',Data) -> 'enc_TimerID'(Data);
encode_disp('ActivateServiceFilteringArg',Data) -> 'enc_ActivateServiceFilteringArg'(Data);
encode_disp('AnalysedInformationArg',Data) -> 'enc_AnalysedInformationArg'(Data);
encode_disp('AnalyseInformationArg',Data) -> 'enc_AnalyseInformationArg'(Data);
encode_disp('ApplyChargingArg',Data) -> 'enc_ApplyChargingArg'(Data);
encode_disp('ApplyChargingReportArg',Data) -> 'enc_ApplyChargingReportArg'(Data);
encode_disp('AssistRequestInstructionsArg',Data) -> 'enc_AssistRequestInstructionsArg'(Data);
encode_disp('AuthorizeTerminationArg',Data) -> 'enc_AuthorizeTerminationArg'(Data);
encode_disp('CallGapArg',Data) -> 'enc_CallGapArg'(Data);
encode_disp('CallInformationReportArg',Data) -> 'enc_CallInformationReportArg'(Data);
encode_disp('CallInformationRequestArg',Data) -> 'enc_CallInformationRequestArg'(Data);
encode_disp('CancelArg',Data) -> 'enc_CancelArg'(Data);
encode_disp('CancelStatusReportRequestArg',Data) -> 'enc_CancelStatusReportRequestArg'(Data);
encode_disp('CollectedInformationArg',Data) -> 'enc_CollectedInformationArg'(Data);
encode_disp('CollectInformationArg',Data) -> 'enc_CollectInformationArg'(Data);
encode_disp('ConnectArg',Data) -> 'enc_ConnectArg'(Data);
encode_disp('ConnectToResourceArg',Data) -> 'enc_ConnectToResourceArg'(Data);
encode_disp('ContinueWithArgumentArg',Data) -> 'enc_ContinueWithArgumentArg'(Data);
encode_disp('CreateCallSegmentAssociationArg',Data) -> 'enc_CreateCallSegmentAssociationArg'(Data);
encode_disp('CreateCallSegmentAssociationResultArg',Data) -> 'enc_CreateCallSegmentAssociationResultArg'(Data);
encode_disp('CreateOrRemoveTriggerDataArg',Data) -> 'enc_CreateOrRemoveTriggerDataArg'(Data);
encode_disp('CreateOrRemoveTriggerDataResultArg',Data) -> 'enc_CreateOrRemoveTriggerDataResultArg'(Data);
encode_disp('DisconnectForwardConnectionWithArgumentArg',Data) -> 'enc_DisconnectForwardConnectionWithArgumentArg'(Data);
encode_disp('DisconnectLegArg',Data) -> 'enc_DisconnectLegArg'(Data);
encode_disp('EntityReleasedArg',Data) -> 'enc_EntityReleasedArg'(Data);
encode_disp('EstablishTemporaryConnectionArg',Data) -> 'enc_EstablishTemporaryConnectionArg'(Data);
encode_disp('EventNotificationChargingArg',Data) -> 'enc_EventNotificationChargingArg'(Data);
encode_disp('EventReportBCSMArg',Data) -> 'enc_EventReportBCSMArg'(Data);
encode_disp('EventReportFacilityArg',Data) -> 'enc_EventReportFacilityArg'(Data);
encode_disp('FacilitySelectedAndAvailableArg',Data) -> 'enc_FacilitySelectedAndAvailableArg'(Data);
encode_disp('FurnishChargingInformationArg',Data) -> 'enc_FurnishChargingInformationArg'(Data);
encode_disp('HoldCallInNetworkArg',Data) -> 'enc_HoldCallInNetworkArg'(Data);
encode_disp('InitialDPArg',Data) -> 'enc_InitialDPArg'(Data);
encode_disp('InitiateCallAttemptArg',Data) -> 'enc_InitiateCallAttemptArg'(Data);
encode_disp('ManageTriggerDataArg',Data) -> 'enc_ManageTriggerDataArg'(Data);
encode_disp('ManageTriggerDataResultArg',Data) -> 'enc_ManageTriggerDataResultArg'(Data);
encode_disp('MergeCallSegmentsArg',Data) -> 'enc_MergeCallSegmentsArg'(Data);
encode_disp('MoveCallSegmentsArg',Data) -> 'enc_MoveCallSegmentsArg'(Data);
encode_disp('MoveLegArg',Data) -> 'enc_MoveLegArg'(Data);
encode_disp('OAbandonArg',Data) -> 'enc_OAbandonArg'(Data);
encode_disp('OAnswerArg',Data) -> 'enc_OAnswerArg'(Data);
encode_disp('OCalledPartyBusyArg',Data) -> 'enc_OCalledPartyBusyArg'(Data);
encode_disp('ODisconnectArg',Data) -> 'enc_ODisconnectArg'(Data);
encode_disp('MidCallArg',Data) -> 'enc_MidCallArg'(Data);
encode_disp('ONoAnswerArg',Data) -> 'enc_ONoAnswerArg'(Data);
encode_disp('OriginationAttemptArg',Data) -> 'enc_OriginationAttemptArg'(Data);
encode_disp('OriginationAttemptAuthorizedArg',Data) -> 'enc_OriginationAttemptAuthorizedArg'(Data);
encode_disp('OSuspendedArg',Data) -> 'enc_OSuspendedArg'(Data);
encode_disp('ReconnectArg',Data) -> 'enc_ReconnectArg'(Data);
encode_disp('ReleaseCallArg',Data) -> 'enc_ReleaseCallArg'(Data);
encode_disp('ReportUTSIArg',Data) -> 'enc_ReportUTSIArg'(Data);
encode_disp('RequestCurrentStatusReportArg',Data) -> 'enc_RequestCurrentStatusReportArg'(Data);
encode_disp('RequestCurrentStatusReportResultArg',Data) -> 'enc_RequestCurrentStatusReportResultArg'(Data);
encode_disp('RequestEveryStatusChangeReportArg',Data) -> 'enc_RequestEveryStatusChangeReportArg'(Data);
encode_disp('RequestFirstStatusMatchReportArg',Data) -> 'enc_RequestFirstStatusMatchReportArg'(Data);
encode_disp('RequestNotificationChargingEventArg',Data) -> 'enc_RequestNotificationChargingEventArg'(Data);
encode_disp('RequestReportBCSMEventArg',Data) -> 'enc_RequestReportBCSMEventArg'(Data);
encode_disp('RequestReportFacilityEventArg',Data) -> 'enc_RequestReportFacilityEventArg'(Data);
encode_disp('RequestReportUTSIArg',Data) -> 'enc_RequestReportUTSIArg'(Data);
encode_disp('ResetTimerArg',Data) -> 'enc_ResetTimerArg'(Data);
encode_disp('RouteSelectFailureArg',Data) -> 'enc_RouteSelectFailureArg'(Data);
encode_disp('SelectFacilityArg',Data) -> 'enc_SelectFacilityArg'(Data);
encode_disp('SelectRouteArg',Data) -> 'enc_SelectRouteArg'(Data);
encode_disp('SendChargingInformationArg',Data) -> 'enc_SendChargingInformationArg'(Data);
encode_disp('SendFacilityInformationArg',Data) -> 'enc_SendFacilityInformationArg'(Data);
encode_disp('SendSTUIArg',Data) -> 'enc_SendSTUIArg'(Data);
encode_disp('ServiceFilteringResponseArg',Data) -> 'enc_ServiceFilteringResponseArg'(Data);
encode_disp('SetServiceProfileArg',Data) -> 'enc_SetServiceProfileArg'(Data);
encode_disp('SplitLegArg',Data) -> 'enc_SplitLegArg'(Data);
encode_disp('StatusReportArg',Data) -> 'enc_StatusReportArg'(Data);
encode_disp('TAnswerArg',Data) -> 'enc_TAnswerArg'(Data);
encode_disp('TBusyArg',Data) -> 'enc_TBusyArg'(Data);
encode_disp('TDisconnectArg',Data) -> 'enc_TDisconnectArg'(Data);
encode_disp('TermAttemptAuthorizedArg',Data) -> 'enc_TermAttemptAuthorizedArg'(Data);
encode_disp('TerminationAttemptArg',Data) -> 'enc_TerminationAttemptArg'(Data);
encode_disp('TNoAnswerArg',Data) -> 'enc_TNoAnswerArg'(Data);
encode_disp('TSuspendedArg',Data) -> 'enc_TSuspendedArg'(Data);
encode_disp('PlayAnnouncementArg',Data) -> 'enc_PlayAnnouncementArg'(Data);
encode_disp('PromptAndCollectUserInformationArg',Data) -> 'enc_PromptAndCollectUserInformationArg'(Data);
encode_disp('ReceivedInformationArg',Data) -> 'enc_ReceivedInformationArg'(Data);
encode_disp('PromptAndReceiveMessageArg',Data) -> 'enc_PromptAndReceiveMessageArg'(Data);
encode_disp('MessageReceivedArg',Data) -> 'enc_MessageReceivedArg'(Data);
encode_disp('ScriptCloseArg',Data) -> 'enc_ScriptCloseArg'(Data);
encode_disp('ScriptEventArg',Data) -> 'enc_ScriptEventArg'(Data);
encode_disp('ScriptInformationArg',Data) -> 'enc_ScriptInformationArg'(Data);
encode_disp('ScriptRunArg',Data) -> 'enc_ScriptRunArg'(Data);
encode_disp('SpecializedResourceReportArg',Data) -> 'enc_SpecializedResourceReportArg'(Data);
encode_disp('SRFCallGapArg',Data) -> 'enc_SRFCallGapArg'(Data);
encode_disp(Type,_Data) -> exit({error,{asn1,{undefined_type,Type}}}).


decode_disp('CallReferenceNumber',Data) -> 'dec_CallReferenceNumber'(Data);
decode_disp('ChargingMessageType',Data) -> 'dec_ChargingMessageType'(Data);
decode_disp('Ext-BasicServiceCode',Data) -> 'dec_Ext-BasicServiceCode'(Data);
decode_disp('ISDNAddressString',Data) -> 'dec_ISDNAddressString'(Data);
decode_disp('OCSIApplicable',Data) -> 'dec_OCSIApplicable'(Data);
decode_disp('SubscriberState',Data) -> 'dec_SubscriberState'(Data);
decode_disp('SuppressionOfAnnouncement',Data) -> 'dec_SuppressionOfAnnouncement'(Data);
decode_disp('CancelFailed',Data) -> 'dec_CancelFailed'(Data);
decode_disp('RequestedInfoError',Data) -> 'dec_RequestedInfoError'(Data);
decode_disp('SystemFailure',Data) -> 'dec_SystemFailure'(Data);
decode_disp('TaskRefused',Data) -> 'dec_TaskRefused'(Data);
decode_disp('UnavailableNetworkResource',Data) -> 'dec_UnavailableNetworkResource'(Data);
decode_disp('CallSegmentID',Data) -> 'dec_CallSegmentID'(Data);
decode_disp('LegID',Data) -> 'dec_LegID'(Data);
decode_disp('LegType',Data) -> 'dec_LegType'(Data);
decode_disp('MiscCallInfo',Data) -> 'dec_MiscCallInfo'(Data);
decode_disp('TimerID',Data) -> 'dec_TimerID'(Data);
decode_disp('ActivateServiceFilteringArg',Data) -> 'dec_ActivateServiceFilteringArg'(Data);
decode_disp('AnalysedInformationArg',Data) -> 'dec_AnalysedInformationArg'(Data);
decode_disp('AnalyseInformationArg',Data) -> 'dec_AnalyseInformationArg'(Data);
decode_disp('ApplyChargingArg',Data) -> 'dec_ApplyChargingArg'(Data);
decode_disp('ApplyChargingReportArg',Data) -> 'dec_ApplyChargingReportArg'(Data);
decode_disp('AssistRequestInstructionsArg',Data) -> 'dec_AssistRequestInstructionsArg'(Data);
decode_disp('AuthorizeTerminationArg',Data) -> 'dec_AuthorizeTerminationArg'(Data);
decode_disp('CallGapArg',Data) -> 'dec_CallGapArg'(Data);
decode_disp('CallInformationReportArg',Data) -> 'dec_CallInformationReportArg'(Data);
decode_disp('CallInformationRequestArg',Data) -> 'dec_CallInformationRequestArg'(Data);
decode_disp('CancelArg',Data) -> 'dec_CancelArg'(Data);
decode_disp('CancelStatusReportRequestArg',Data) -> 'dec_CancelStatusReportRequestArg'(Data);
decode_disp('CollectedInformationArg',Data) -> 'dec_CollectedInformationArg'(Data);
decode_disp('CollectInformationArg',Data) -> 'dec_CollectInformationArg'(Data);
decode_disp('ConnectArg',Data) -> 'dec_ConnectArg'(Data);
decode_disp('ConnectToResourceArg',Data) -> 'dec_ConnectToResourceArg'(Data);
decode_disp('ContinueWithArgumentArg',Data) -> 'dec_ContinueWithArgumentArg'(Data);
decode_disp('CreateCallSegmentAssociationArg',Data) -> 'dec_CreateCallSegmentAssociationArg'(Data);
decode_disp('CreateCallSegmentAssociationResultArg',Data) -> 'dec_CreateCallSegmentAssociationResultArg'(Data);
decode_disp('CreateOrRemoveTriggerDataArg',Data) -> 'dec_CreateOrRemoveTriggerDataArg'(Data);
decode_disp('CreateOrRemoveTriggerDataResultArg',Data) -> 'dec_CreateOrRemoveTriggerDataResultArg'(Data);
decode_disp('DisconnectForwardConnectionWithArgumentArg',Data) -> 'dec_DisconnectForwardConnectionWithArgumentArg'(Data);
decode_disp('DisconnectLegArg',Data) -> 'dec_DisconnectLegArg'(Data);
decode_disp('EntityReleasedArg',Data) -> 'dec_EntityReleasedArg'(Data);
decode_disp('EstablishTemporaryConnectionArg',Data) -> 'dec_EstablishTemporaryConnectionArg'(Data);
decode_disp('EventNotificationChargingArg',Data) -> 'dec_EventNotificationChargingArg'(Data);
decode_disp('EventReportBCSMArg',Data) -> 'dec_EventReportBCSMArg'(Data);
decode_disp('EventReportFacilityArg',Data) -> 'dec_EventReportFacilityArg'(Data);
decode_disp('FacilitySelectedAndAvailableArg',Data) -> 'dec_FacilitySelectedAndAvailableArg'(Data);
decode_disp('FurnishChargingInformationArg',Data) -> 'dec_FurnishChargingInformationArg'(Data);
decode_disp('HoldCallInNetworkArg',Data) -> 'dec_HoldCallInNetworkArg'(Data);
decode_disp('InitialDPArg',Data) -> 'dec_InitialDPArg'(Data);
decode_disp('InitiateCallAttemptArg',Data) -> 'dec_InitiateCallAttemptArg'(Data);
decode_disp('ManageTriggerDataArg',Data) -> 'dec_ManageTriggerDataArg'(Data);
decode_disp('ManageTriggerDataResultArg',Data) -> 'dec_ManageTriggerDataResultArg'(Data);
decode_disp('MergeCallSegmentsArg',Data) -> 'dec_MergeCallSegmentsArg'(Data);
decode_disp('MoveCallSegmentsArg',Data) -> 'dec_MoveCallSegmentsArg'(Data);
decode_disp('MoveLegArg',Data) -> 'dec_MoveLegArg'(Data);
decode_disp('OAbandonArg',Data) -> 'dec_OAbandonArg'(Data);
decode_disp('OAnswerArg',Data) -> 'dec_OAnswerArg'(Data);
decode_disp('OCalledPartyBusyArg',Data) -> 'dec_OCalledPartyBusyArg'(Data);
decode_disp('ODisconnectArg',Data) -> 'dec_ODisconnectArg'(Data);
decode_disp('MidCallArg',Data) -> 'dec_MidCallArg'(Data);
decode_disp('ONoAnswerArg',Data) -> 'dec_ONoAnswerArg'(Data);
decode_disp('OriginationAttemptArg',Data) -> 'dec_OriginationAttemptArg'(Data);
decode_disp('OriginationAttemptAuthorizedArg',Data) -> 'dec_OriginationAttemptAuthorizedArg'(Data);
decode_disp('OSuspendedArg',Data) -> 'dec_OSuspendedArg'(Data);
decode_disp('ReconnectArg',Data) -> 'dec_ReconnectArg'(Data);
decode_disp('ReleaseCallArg',Data) -> 'dec_ReleaseCallArg'(Data);
decode_disp('ReportUTSIArg',Data) -> 'dec_ReportUTSIArg'(Data);
decode_disp('RequestCurrentStatusReportArg',Data) -> 'dec_RequestCurrentStatusReportArg'(Data);
decode_disp('RequestCurrentStatusReportResultArg',Data) -> 'dec_RequestCurrentStatusReportResultArg'(Data);
decode_disp('RequestEveryStatusChangeReportArg',Data) -> 'dec_RequestEveryStatusChangeReportArg'(Data);
decode_disp('RequestFirstStatusMatchReportArg',Data) -> 'dec_RequestFirstStatusMatchReportArg'(Data);
decode_disp('RequestNotificationChargingEventArg',Data) -> 'dec_RequestNotificationChargingEventArg'(Data);
decode_disp('RequestReportBCSMEventArg',Data) -> 'dec_RequestReportBCSMEventArg'(Data);
decode_disp('RequestReportFacilityEventArg',Data) -> 'dec_RequestReportFacilityEventArg'(Data);
decode_disp('RequestReportUTSIArg',Data) -> 'dec_RequestReportUTSIArg'(Data);
decode_disp('ResetTimerArg',Data) -> 'dec_ResetTimerArg'(Data);
decode_disp('RouteSelectFailureArg',Data) -> 'dec_RouteSelectFailureArg'(Data);
decode_disp('SelectFacilityArg',Data) -> 'dec_SelectFacilityArg'(Data);
decode_disp('SelectRouteArg',Data) -> 'dec_SelectRouteArg'(Data);
decode_disp('SendChargingInformationArg',Data) -> 'dec_SendChargingInformationArg'(Data);
decode_disp('SendFacilityInformationArg',Data) -> 'dec_SendFacilityInformationArg'(Data);
decode_disp('SendSTUIArg',Data) -> 'dec_SendSTUIArg'(Data);
decode_disp('ServiceFilteringResponseArg',Data) -> 'dec_ServiceFilteringResponseArg'(Data);
decode_disp('SetServiceProfileArg',Data) -> 'dec_SetServiceProfileArg'(Data);
decode_disp('SplitLegArg',Data) -> 'dec_SplitLegArg'(Data);
decode_disp('StatusReportArg',Data) -> 'dec_StatusReportArg'(Data);
decode_disp('TAnswerArg',Data) -> 'dec_TAnswerArg'(Data);
decode_disp('TBusyArg',Data) -> 'dec_TBusyArg'(Data);
decode_disp('TDisconnectArg',Data) -> 'dec_TDisconnectArg'(Data);
decode_disp('TermAttemptAuthorizedArg',Data) -> 'dec_TermAttemptAuthorizedArg'(Data);
decode_disp('TerminationAttemptArg',Data) -> 'dec_TerminationAttemptArg'(Data);
decode_disp('TNoAnswerArg',Data) -> 'dec_TNoAnswerArg'(Data);
decode_disp('TSuspendedArg',Data) -> 'dec_TSuspendedArg'(Data);
decode_disp('PlayAnnouncementArg',Data) -> 'dec_PlayAnnouncementArg'(Data);
decode_disp('PromptAndCollectUserInformationArg',Data) -> 'dec_PromptAndCollectUserInformationArg'(Data);
decode_disp('ReceivedInformationArg',Data) -> 'dec_ReceivedInformationArg'(Data);
decode_disp('PromptAndReceiveMessageArg',Data) -> 'dec_PromptAndReceiveMessageArg'(Data);
decode_disp('MessageReceivedArg',Data) -> 'dec_MessageReceivedArg'(Data);
decode_disp('ScriptCloseArg',Data) -> 'dec_ScriptCloseArg'(Data);
decode_disp('ScriptEventArg',Data) -> 'dec_ScriptEventArg'(Data);
decode_disp('ScriptInformationArg',Data) -> 'dec_ScriptInformationArg'(Data);
decode_disp('ScriptRunArg',Data) -> 'dec_ScriptRunArg'(Data);
decode_disp('SpecializedResourceReportArg',Data) -> 'dec_SpecializedResourceReportArg'(Data);
decode_disp('SRFCallGapArg',Data) -> 'dec_SRFCallGapArg'(Data);
decode_disp(Type,_Data) -> exit({error,{asn1,{undefined_type,Type}}}).




info() ->
   case ?MODULE:module_info(attributes) of
     Attributes when is_list(Attributes) ->
       case lists:keyfind(asn1_info, 1, Attributes) of
         {_,Info} when is_list(Info) ->
           Info;
         _ ->
           []
       end;
     _ ->
       []
   end.


%%================================
%%  CallReferenceNumber
%%================================
'enc_CallReferenceNumber'(Val) ->
    'enc_CallReferenceNumber'(Val, [<<2>>]).

'enc_CallReferenceNumber'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_CallReferenceNumber'(Tlv) ->
   'dec_CallReferenceNumber'(Tlv, [2]).

'dec_CallReferenceNumber'(Tlv, TagIn) ->
decode_integer(Tlv, TagIn).



%%================================
%%  ChargingMessageType
%%================================
'enc_ChargingMessageType'(Val) ->
    'enc_ChargingMessageType'(Val, [<<2>>]).

'enc_ChargingMessageType'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_ChargingMessageType'(Tlv) ->
   'dec_ChargingMessageType'(Tlv, [2]).

'dec_ChargingMessageType'(Tlv, TagIn) ->
decode_integer(Tlv, TagIn).



%%================================
%%  Ext-BasicServiceCode
%%================================
'enc_Ext-BasicServiceCode'(Val) ->
    'enc_Ext-BasicServiceCode'(Val, []).

'enc_Ext-BasicServiceCode'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      bearerService ->
         encode_restricted_string(element(2,Val), [<<130>>]);
      teleService ->
         encode_restricted_string(element(2,Val), [<<131>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_Ext-BasicServiceCode'(Tlv) ->
   'dec_Ext-BasicServiceCode'(Tlv, []).

'dec_Ext-BasicServiceCode'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'bearerService'
    {131074, V1} -> 
        {bearerService, begin
Val1 = decode_octet_string(V1, []),
C1 = byte_size(Val1),
if C1 =:= 1 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'teleService'
    {131075, V1} -> 
        {teleService, decode_octet_string(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  ISDNAddressString
%%================================
'enc_ISDNAddressString'(Val) ->
    'enc_ISDNAddressString'(Val, [<<4>>]).

'enc_ISDNAddressString'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_ISDNAddressString'(Tlv) ->
   'dec_ISDNAddressString'(Tlv, [4]).

'dec_ISDNAddressString'(Tlv, TagIn) ->
decode_octet_string(Tlv, TagIn).



%%================================
%%  OCSIApplicable
%%================================
'enc_OCSIApplicable'(Val) ->
    'enc_OCSIApplicable'(Val, [<<1>>]).

'enc_OCSIApplicable'(Val, TagIn) ->
encode_boolean(Val, TagIn).


'dec_OCSIApplicable'(Tlv) ->
   'dec_OCSIApplicable'(Tlv, [1]).

'dec_OCSIApplicable'(Tlv, TagIn) ->
decode_boolean(Tlv, TagIn).



%%================================
%%  SubscriberState
%%================================
'enc_SubscriberState'(Val) ->
    'enc_SubscriberState'(Val, [<<2>>]).

'enc_SubscriberState'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_SubscriberState'(Tlv) ->
   'dec_SubscriberState'(Tlv, [2]).

'dec_SubscriberState'(Tlv, TagIn) ->
decode_integer(Tlv, TagIn).



%%================================
%%  SuppressionOfAnnouncement
%%================================
'enc_SuppressionOfAnnouncement'(Val) ->
    'enc_SuppressionOfAnnouncement'(Val, [<<1>>]).

'enc_SuppressionOfAnnouncement'(Val, TagIn) ->
encode_boolean(Val, TagIn).


'dec_SuppressionOfAnnouncement'(Tlv) ->
   'dec_SuppressionOfAnnouncement'(Tlv, [1]).

'dec_SuppressionOfAnnouncement'(Tlv, TagIn) ->
decode_boolean(Tlv, TagIn).



%%================================
%%  CancelFailed
%%================================
'enc_CancelFailed'(Val) ->
    'enc_CancelFailed'(Val, [<<48>>]).

'enc_CancelFailed'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute problem(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
unknownOperation -> encode_tags([<<128>>], [0], 1);
tooLate -> encode_tags([<<128>>], [1], 1);
operationNotCancellable -> encode_tags([<<128>>], [2], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute operation(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_CancelFailed'(Tlv) ->
   'dec_CancelFailed'(Tlv, [16]).

'dec_CancelFailed'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute problem(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> unknownOperation;
1 -> tooLate;
2 -> operationNotCancellable;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute operation(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val1 = decode_integer(V2, [131073]),
if -128 =< Val1, Val1 =< 127 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'CancelFailed', Term1, Term2}.



%%================================
%%  RequestedInfoError
%%================================
'enc_RequestedInfoError'(Val) ->
    'enc_RequestedInfoError'(Val, [<<10>>]).

'enc_RequestedInfoError'(Val, TagIn) ->
case Val of
unknownRequestedInfo -> encode_tags(TagIn, [1], 1);
requestedInfoNotAvailable -> encode_tags(TagIn, [2], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_RequestedInfoError'(Tlv) ->
   'dec_RequestedInfoError'(Tlv, [10]).

'dec_RequestedInfoError'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
1 -> unknownRequestedInfo;
2 -> requestedInfoNotAvailable;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  SystemFailure
%%================================
'enc_SystemFailure'(Val) ->
    'enc_SystemFailure'(Val, [<<10>>]).

'enc_SystemFailure'(Val, TagIn) ->
case Val of
unavailableResources -> encode_tags(TagIn, [0], 1);
componentFailure -> encode_tags(TagIn, [1], 1);
basicCallProcessingException -> encode_tags(TagIn, [2], 1);
resourceStatusFailure -> encode_tags(TagIn, [3], 1);
endUserFailure -> encode_tags(TagIn, [4], 1);
screening -> encode_tags(TagIn, [5], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_SystemFailure'(Tlv) ->
   'dec_SystemFailure'(Tlv, [10]).

'dec_SystemFailure'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> unavailableResources;
1 -> componentFailure;
2 -> basicCallProcessingException;
3 -> resourceStatusFailure;
4 -> endUserFailure;
5 -> screening;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  TaskRefused
%%================================
'enc_TaskRefused'(Val) ->
    'enc_TaskRefused'(Val, [<<10>>]).

'enc_TaskRefused'(Val, TagIn) ->
case Val of
generic -> encode_tags(TagIn, [0], 1);
unobtainable -> encode_tags(TagIn, [1], 1);
congestion -> encode_tags(TagIn, [2], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_TaskRefused'(Tlv) ->
   'dec_TaskRefused'(Tlv, [10]).

'dec_TaskRefused'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> generic;
1 -> unobtainable;
2 -> congestion;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  UnavailableNetworkResource
%%================================
'enc_UnavailableNetworkResource'(Val) ->
    'enc_UnavailableNetworkResource'(Val, [<<10>>]).

'enc_UnavailableNetworkResource'(Val, TagIn) ->
case Val of
unavailableResources -> encode_tags(TagIn, [0], 1);
componentFailure -> encode_tags(TagIn, [1], 1);
basicCallProcessingException -> encode_tags(TagIn, [2], 1);
resourceStatusFailure -> encode_tags(TagIn, [3], 1);
endUserFailure -> encode_tags(TagIn, [4], 1);
screening -> encode_tags(TagIn, [5], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_UnavailableNetworkResource'(Tlv) ->
   'dec_UnavailableNetworkResource'(Tlv, [10]).

'dec_UnavailableNetworkResource'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> unavailableResources;
1 -> componentFailure;
2 -> basicCallProcessingException;
3 -> resourceStatusFailure;
4 -> endUserFailure;
5 -> screening;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  CallSegmentID
%%================================
'enc_CallSegmentID'(Val) ->
    'enc_CallSegmentID'(Val, [<<2>>]).

'enc_CallSegmentID'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_CallSegmentID'(Tlv) ->
   'dec_CallSegmentID'(Tlv, [2]).

'dec_CallSegmentID'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 1 =< Val1, Val1 =< 10 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  LegID
%%================================
'enc_LegID'(Val) ->
    'enc_LegID'(Val, []).

'enc_LegID'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      sendingSideID ->
         encode_restricted_string(element(2,Val), [<<128>>]);
      receivingSideID ->
         encode_restricted_string(element(2,Val), [<<129>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_LegID'(Tlv) ->
   'dec_LegID'(Tlv, []).

'dec_LegID'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'sendingSideID'
    {131072, V1} -> 
        {sendingSideID, begin
Val1 = decode_octet_string(V1, []),
C1 = byte_size(Val1),
if C1 =:= 1 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'receivingSideID'
    {131073, V1} -> 
        {receivingSideID, begin
Val2 = decode_octet_string(V1, []),
C2 = byte_size(Val2),
if C2 =:= 1 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  LegType
%%================================
'enc_LegType'(Val) ->
    'enc_LegType'(Val, [<<4>>]).

'enc_LegType'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_LegType'(Tlv) ->
   'dec_LegType'(Tlv, [4]).

'dec_LegType'(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if C1 =:= 1 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  MiscCallInfo
%%================================
'enc_MiscCallInfo'(Val) ->
    'enc_MiscCallInfo'(Val, [<<48>>]).

'enc_MiscCallInfo'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute messageType(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
request -> encode_tags([<<128>>], [0], 1);
notification -> encode_tags([<<128>>], [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute dpAssignment(2) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex2 of
individualLine -> encode_tags([<<129>>], [0], 1);
groupBased -> encode_tags([<<129>>], [1], 1);
switchBased -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_MiscCallInfo'(Tlv) ->
   'dec_MiscCallInfo'(Tlv, [16]).

'dec_MiscCallInfo'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute messageType(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> request;
1 -> notification;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute dpAssignment(2) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {case decode_integer(V2, []) of
0 -> individualLine;
1 -> groupBased;
2 -> switchBased;
Default2 -> exit({error,{asn1,{illegal_enumerated,Default2}}})
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'MiscCallInfo', Term1, Term2}.



%%================================
%%  TimerID
%%================================
'enc_TimerID'(Val) ->
    'enc_TimerID'(Val, [<<10>>]).

'enc_TimerID'(Val, TagIn) ->
case Val of
tssf -> encode_tags(TagIn, [0], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_TimerID'(Tlv) ->
   'dec_TimerID'(Tlv, [10]).

'dec_TimerID'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> tssf;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  ActivateServiceFilteringArg
%%================================
'enc_ActivateServiceFilteringArg'(Val) ->
    'enc_ActivateServiceFilteringArg'(Val, [<<48>>]).

'enc_ActivateServiceFilteringArg'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6} = Val,

%%-------------------------------------------------
%% attribute filteredCallTreatment(1)   External INCS3datatypes:FilteredCallTreatment
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'INCS3datatypes':'enc_FilteredCallTreatment'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute filteringCharacteristics(2)   External INCS3datatypes:FilteringCharacteristics
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'INCS3datatypes':'enc_FilteringCharacteristics'(Cindex2, [<<161>>]),

%%-------------------------------------------------
%% attribute filteringTimeOut(3)   External INCS3datatypes:FilteringTimeOut
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'INCS3datatypes':'enc_FilteringTimeOut'(Cindex3, [<<162>>]),

%%-------------------------------------------------
%% attribute filteringCriteria(4)   External INCS3datatypes:FilteringCriteria
%%-------------------------------------------------
   {EncBytes4,EncLen4} = 'INCS3datatypes':'enc_FilteringCriteria'(Cindex4, [<<163>>]),

%%-------------------------------------------------
%% attribute startTime(5) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex5, [<<132>>])
       end,

%%-------------------------------------------------
%% attribute extensions(6)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Extensions'(Cindex6, [<<165>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_ActivateServiceFilteringArg'(Tlv) ->
   'dec_ActivateServiceFilteringArg'(Tlv, [16]).

'dec_ActivateServiceFilteringArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute filteredCallTreatment(1)   External INCS3datatypes:FilteredCallTreatment
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'INCS3datatypes':'dec_FilteredCallTreatment'(V1, [131072]),

%%-------------------------------------------------
%% attribute filteringCharacteristics(2)   External INCS3datatypes:FilteringCharacteristics
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'INCS3datatypes':'dec_FilteringCharacteristics'(V2, [131073]),

%%-------------------------------------------------
%% attribute filteringTimeOut(3)   External INCS3datatypes:FilteringTimeOut
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = 'INCS3datatypes':'dec_FilteringTimeOut'(V3, [131074]),

%%-------------------------------------------------
%% attribute filteringCriteria(4)   External INCS3datatypes:FilteringCriteria
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = 'INCS3datatypes':'dec_FilteringCriteria'(V4, [131075]),

%%-------------------------------------------------
%% attribute startTime(5) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {begin
Val1 = decode_octet_string(V5, []),
C1 = byte_size(Val1),
if C1 =:= 6 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute extensions(6)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {'INCS3datatypes':'dec_Extensions'(V6, []), TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

case Tlv7 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv7}}}) % extra fields not allowed
end,
   {'ActivateServiceFilteringArg', Term1, Term2, Term3, Term4, Term5, Term6}.



%%================================
%%  AnalysedInformationArg
%%================================
'enc_AnalysedInformationArg'(Val) ->
    'enc_AnalysedInformationArg'(Val, [<<48>>]).

'enc_AnalysedInformationArg'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8, Cindex9, Cindex10, Cindex11, Cindex12, Cindex13, Cindex14, Cindex15, Cindex16, Cindex17, Cindex18, Cindex19} = Val,

%%-------------------------------------------------
%% attribute dpSpecificCommonParameters(1)   External INCS3datatypes:DpSpecificCommonParameters
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'INCS3datatypes':'enc_DpSpecificCommonParameters'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute dialledDigits(2)   External ACPdatatypes:CalledPartyNumber OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'ACPdatatypes':'enc_CalledPartyNumber'(Cindex2, [<<161>>])
       end,

%%-------------------------------------------------
%% attribute callingPartyBusinessGroupID(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute callingPartySubaddress(4) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex4, [<<131>>])
       end,

%%-------------------------------------------------
%% attribute callingFacilityGroup(5)   External INCS3datatypes:FacilityGroup OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_FacilityGroup'(Cindex5, [<<164>>])
       end,

%%-------------------------------------------------
%% attribute callingFacilityGroupMember(6) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex6, [<<133>>])
       end,

%%-------------------------------------------------
%% attribute originalCalledPartyID(7) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex7, [<<134>>])
       end,

%%-------------------------------------------------
%% attribute prefix(8) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case Cindex8 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex8, [<<135>>])
       end,

%%-------------------------------------------------
%% attribute redirectingPartyID(9) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes9,EncLen9} =  case Cindex9 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex9, [<<136>>])
       end,

%%-------------------------------------------------
%% attribute redirectionInformation(10) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes10,EncLen10} =  case Cindex10 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex10, [<<137>>])
       end,

%%-------------------------------------------------
%% attribute routeList(11)   External INCS3datatypes:RouteList OPTIONAL
%%-------------------------------------------------
   {EncBytes11,EncLen11} =  case Cindex11 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_RouteList'(Cindex11, [<<170>>])
       end,

%%-------------------------------------------------
%% attribute travellingClassMark(12) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes12,EncLen12} =  case Cindex12 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex12, [<<139>>])
       end,

%%-------------------------------------------------
%% attribute extensions(13)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes13,EncLen13} =  case Cindex13 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Extensions'(Cindex13, [<<172>>])
       end,

%%-------------------------------------------------
%% attribute featureCode(14) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes14,EncLen14} =  case Cindex14 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex14, [<<141>>])
       end,

%%-------------------------------------------------
%% attribute accessCode(15) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes15,EncLen15} =  case Cindex15 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex15, [<<142>>])
       end,

%%-------------------------------------------------
%% attribute carrier(16) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes16,EncLen16} =  case Cindex16 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex16, [<<143>>])
       end,

%%-------------------------------------------------
%% attribute componentType(17) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes17,EncLen17} =  case Cindex17 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex17 of
anny -> encode_tags([<<144>>], [0], 1);
invoke -> encode_tags([<<144>>], [1], 1);
rResult -> encode_tags([<<144>>], [2], 1);
rError -> encode_tags([<<144>>], [3], 1);
rReject -> encode_tags([<<144>>], [4], 1);
Enumval12 -> exit({error,{asn1, {enumerated_not_in_range,Enumval12}}})
end
       end,

%%-------------------------------------------------
%% attribute component(18)   External INCS3datatypes:Component OPTIONAL
%%-------------------------------------------------
   {EncBytes18,EncLen18} =  case Cindex18 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Component'(Cindex18, [<<177>>])
       end,

%%-------------------------------------------------
%% attribute componentCorrelationID(19) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes19,EncLen19} =  case Cindex19 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex19, [<<146>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10, EncBytes11, EncBytes12, EncBytes13, EncBytes14, EncBytes15, EncBytes16, EncBytes17, EncBytes18, EncBytes19],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10 + EncLen11 + EncLen12 + EncLen13 + EncLen14 + EncLen15 + EncLen16 + EncLen17 + EncLen18 + EncLen19,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_AnalysedInformationArg'(Tlv) ->
   'dec_AnalysedInformationArg'(Tlv, [16]).

'dec_AnalysedInformationArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute dpSpecificCommonParameters(1)   External INCS3datatypes:DpSpecificCommonParameters
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'INCS3datatypes':'dec_DpSpecificCommonParameters'(V1, [131072]),

%%-------------------------------------------------
%% attribute dialledDigits(2)   External ACPdatatypes:CalledPartyNumber OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'ACPdatatypes':'dec_CalledPartyNumber'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute callingPartyBusinessGroupID(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {decode_octet_string(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute callingPartySubaddress(4) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {begin
Val1 = decode_octet_string(V4, []),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 27 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute callingFacilityGroup(5)   External INCS3datatypes:FacilityGroup OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {'INCS3datatypes':'dec_FacilityGroup'(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute callingFacilityGroupMember(6) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {decode_integer(V6, []), TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute originalCalledPartyID(7) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {begin
Val2 = decode_octet_string(V7, []),
C2 = byte_size(Val2),
if 1 =< C2, C2 =< 15 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

%%-------------------------------------------------
%% attribute prefix(8) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term8,Tlv9} = case Tlv8 of
[{131079,V8}|TempTlv9] ->
    {begin
Val3 = decode_octet_string(V8, []),
C3 = byte_size(Val3),
if 1 =< C3, C3 =< 27 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv9};
    _ ->
        { asn1_NOVALUE, Tlv8}
end,

%%-------------------------------------------------
%% attribute redirectingPartyID(9) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term9,Tlv10} = case Tlv9 of
[{131080,V9}|TempTlv10] ->
    {begin
Val4 = decode_octet_string(V9, []),
C4 = byte_size(Val4),
if 1 =< C4, C4 =< 27 ->
Val4;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv10};
    _ ->
        { asn1_NOVALUE, Tlv9}
end,

%%-------------------------------------------------
%% attribute redirectionInformation(10) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term10,Tlv11} = case Tlv10 of
[{131081,V10}|TempTlv11] ->
    {begin
Val5 = decode_octet_string(V10, []),
C5 = byte_size(Val5),
if C5 =:= 2 ->
Val5;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv11};
    _ ->
        { asn1_NOVALUE, Tlv10}
end,

%%-------------------------------------------------
%% attribute routeList(11)   External INCS3datatypes:RouteList OPTIONAL
%%-------------------------------------------------
{Term11,Tlv12} = case Tlv11 of
[{131082,V11}|TempTlv12] ->
    {'INCS3datatypes':'dec_RouteList'(V11, []), TempTlv12};
    _ ->
        { asn1_NOVALUE, Tlv11}
end,

%%-------------------------------------------------
%% attribute travellingClassMark(12) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term12,Tlv13} = case Tlv12 of
[{131083,V12}|TempTlv13] ->
    {begin
Val6 = decode_octet_string(V12, []),
C6 = byte_size(Val6),
if 1 =< C6, C6 =< 27 ->
Val6;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv13};
    _ ->
        { asn1_NOVALUE, Tlv12}
end,

%%-------------------------------------------------
%% attribute extensions(13)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term13,Tlv14} = case Tlv13 of
[{131084,V13}|TempTlv14] ->
    {'INCS3datatypes':'dec_Extensions'(V13, []), TempTlv14};
    _ ->
        { asn1_NOVALUE, Tlv13}
end,

%%-------------------------------------------------
%% attribute featureCode(14) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term14,Tlv15} = case Tlv14 of
[{131085,V14}|TempTlv15] ->
    {begin
Val7 = decode_octet_string(V14, []),
C7 = byte_size(Val7),
if 1 =< C7, C7 =< 27 ->
Val7;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv15};
    _ ->
        { asn1_NOVALUE, Tlv14}
end,

%%-------------------------------------------------
%% attribute accessCode(15) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term15,Tlv16} = case Tlv15 of
[{131086,V15}|TempTlv16] ->
    {begin
Val8 = decode_octet_string(V15, []),
C8 = byte_size(Val8),
if 1 =< C8, C8 =< 27 ->
Val8;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv16};
    _ ->
        { asn1_NOVALUE, Tlv15}
end,

%%-------------------------------------------------
%% attribute carrier(16) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term16,Tlv17} = case Tlv16 of
[{131087,V16}|TempTlv17] ->
    {begin
Val9 = decode_octet_string(V16, []),
C9 = byte_size(Val9),
if 3 =< C9, C9 =< 10 ->
Val9;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv17};
    _ ->
        { asn1_NOVALUE, Tlv16}
end,

%%-------------------------------------------------
%% attribute componentType(17) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term17,Tlv18} = case Tlv17 of
[{131088,V17}|TempTlv18] ->
    {case decode_integer(V17, []) of
0 -> anny;
1 -> invoke;
2 -> rResult;
3 -> rError;
4 -> rReject;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end, TempTlv18};
    _ ->
        { asn1_NOVALUE, Tlv17}
end,

%%-------------------------------------------------
%% attribute component(18)   External INCS3datatypes:Component OPTIONAL
%%-------------------------------------------------
{Term18,Tlv19} = case Tlv18 of
[{131089,V18}|TempTlv19] ->
    {'INCS3datatypes':'dec_Component'(V18, []), TempTlv19};
    _ ->
        { asn1_NOVALUE, Tlv18}
end,

%%-------------------------------------------------
%% attribute componentCorrelationID(19) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term19,Tlv20} = case Tlv19 of
[{131090,V19}|TempTlv20] ->
    {decode_integer(V19, []), TempTlv20};
    _ ->
        { asn1_NOVALUE, Tlv19}
end,

case Tlv20 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv20}}}) % extra fields not allowed
end,
   {'AnalysedInformationArg', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9, Term10, Term11, Term12, Term13, Term14, Term15, Term16, Term17, Term18, Term19}.



%%================================
%%  AnalyseInformationArg
%%================================
'enc_AnalyseInformationArg'(Val) ->
    'enc_AnalyseInformationArg'(Val, [<<48>>]).

'enc_AnalyseInformationArg'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8, Cindex9, Cindex10, Cindex11, Cindex12, Cindex13, Cindex14, Cindex15, Cindex16, Cindex17, Cindex18, Cindex19, Cindex20} = Val,

%%-------------------------------------------------
%% attribute destinationRoutingAddress(1)   External INCS3datatypes:DestinationRoutingAddress
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'INCS3datatypes':'enc_DestinationRoutingAddress'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute alertingPattern(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute iSDNAccessRelatedInformation(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute originalCalledPartyID(4) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex4, [<<131>>])
       end,

%%-------------------------------------------------
%% attribute extensions(5)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Extensions'(Cindex5, [<<164>>])
       end,

%%-------------------------------------------------
%% attribute callingPartyNumber(6)   External ACPdatatypes:CallingPartyNumber OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'ACPdatatypes':'enc_CallingPartyNumber'(Cindex6, [<<165>>])
       end,

%%-------------------------------------------------
%% attribute callingPartysCategory(7) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex7, [<<134>>])
       end,

%%-------------------------------------------------
%% attribute calledPartyNumber(8)   External ACPdatatypes:CalledPartyNumber OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case Cindex8 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'ACPdatatypes':'enc_CalledPartyNumber'(Cindex8, [<<167>>])
       end,

%%-------------------------------------------------
%% attribute chargeNumber(9) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes9,EncLen9} =  case Cindex9 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex9, [<<136>>])
       end,

%%-------------------------------------------------
%% attribute travellingClassMark(10) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes10,EncLen10} =  case Cindex10 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex10, [<<137>>])
       end,

%%-------------------------------------------------
%% attribute carrier(11) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes11,EncLen11} =  case Cindex11 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex11, [<<138>>])
       end,

%%-------------------------------------------------
%% attribute serviceInteractionIndicators(12) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes12,EncLen12} =  case Cindex12 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex12, [<<139>>])
       end,

%%-------------------------------------------------
%% attribute iNServiceCompatibilityResponse(13)   External INCS3datatypes:INServiceCompatibilityResponse OPTIONAL
%%-------------------------------------------------
   {EncBytes13,EncLen13} =  case Cindex13 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_INServiceCompatibilityResponse'(Cindex13, [<<172>>])
       end,

%%-------------------------------------------------
%% attribute forwardGVNS(14) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes14,EncLen14} =  case Cindex14 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex14, [<<141>>])
       end,

%%-------------------------------------------------
%% attribute backwardGVNS(15) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes15,EncLen15} =  case Cindex15 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex15, [<<142>>])
       end,

%%-------------------------------------------------
%% attribute serviceInteractionIndicatorsTwo(16)   External INCS3datatypes:ServiceInteractionIndicatorsTwo OPTIONAL
%%-------------------------------------------------
   {EncBytes16,EncLen16} =  case Cindex16 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_ServiceInteractionIndicatorsTwo'(Cindex16, [<<175>>])
       end,

%%-------------------------------------------------
%% attribute correlationID(17) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes17,EncLen17} =  case Cindex17 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex17, [<<144>>])
       end,

%%-------------------------------------------------
%% attribute scfID(18) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes18,EncLen18} =  case Cindex18 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex18, [<<145>>])
       end,

%%-------------------------------------------------
%% attribute callSegmentID(19) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes19,EncLen19} =  case Cindex19 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex19, [<<146>>])
       end,

%%-------------------------------------------------
%% attribute legToBeCreated(20)   External INCS3opsargs:LegID OPTIONAL
%%-------------------------------------------------
   {EncBytes20,EncLen20} =  case Cindex20 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_LegID'(Cindex20, [<<179>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10, EncBytes11, EncBytes12, EncBytes13, EncBytes14, EncBytes15, EncBytes16, EncBytes17, EncBytes18, EncBytes19, EncBytes20],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10 + EncLen11 + EncLen12 + EncLen13 + EncLen14 + EncLen15 + EncLen16 + EncLen17 + EncLen18 + EncLen19 + EncLen20,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_AnalyseInformationArg'(Tlv) ->
   'dec_AnalyseInformationArg'(Tlv, [16]).

'dec_AnalyseInformationArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute destinationRoutingAddress(1)   External INCS3datatypes:DestinationRoutingAddress
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'INCS3datatypes':'dec_DestinationRoutingAddress'(V1, [131072]),

%%-------------------------------------------------
%% attribute alertingPattern(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
Val1 = decode_octet_string(V2, []),
C1 = byte_size(Val1),
if C1 =:= 3 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute iSDNAccessRelatedInformation(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {begin
Val2 = decode_octet_string(V3, []),
C2 = byte_size(Val2),
if 1 =< C2, C2 =< 10 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute originalCalledPartyID(4) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {begin
Val3 = decode_octet_string(V4, []),
C3 = byte_size(Val3),
if 1 =< C3, C3 =< 15 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute extensions(5)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {'INCS3datatypes':'dec_Extensions'(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute callingPartyNumber(6)   External ACPdatatypes:CallingPartyNumber OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {'ACPdatatypes':'dec_CallingPartyNumber'(V6, []), TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute callingPartysCategory(7) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {begin
Val4 = decode_octet_string(V7, []),
C4 = byte_size(Val4),
if C4 =:= 1 ->
Val4;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

%%-------------------------------------------------
%% attribute calledPartyNumber(8)   External ACPdatatypes:CalledPartyNumber OPTIONAL
%%-------------------------------------------------
{Term8,Tlv9} = case Tlv8 of
[{131079,V8}|TempTlv9] ->
    {'ACPdatatypes':'dec_CalledPartyNumber'(V8, []), TempTlv9};
    _ ->
        { asn1_NOVALUE, Tlv8}
end,

%%-------------------------------------------------
%% attribute chargeNumber(9) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term9,Tlv10} = case Tlv9 of
[{131080,V9}|TempTlv10] ->
    {begin
Val5 = decode_octet_string(V9, []),
C5 = byte_size(Val5),
if 1 =< C5, C5 =< 27 ->
Val5;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv10};
    _ ->
        { asn1_NOVALUE, Tlv9}
end,

%%-------------------------------------------------
%% attribute travellingClassMark(10) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term10,Tlv11} = case Tlv10 of
[{131081,V10}|TempTlv11] ->
    {begin
Val6 = decode_octet_string(V10, []),
C6 = byte_size(Val6),
if 1 =< C6, C6 =< 27 ->
Val6;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv11};
    _ ->
        { asn1_NOVALUE, Tlv10}
end,

%%-------------------------------------------------
%% attribute carrier(11) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term11,Tlv12} = case Tlv11 of
[{131082,V11}|TempTlv12] ->
    {begin
Val7 = decode_octet_string(V11, []),
C7 = byte_size(Val7),
if 3 =< C7, C7 =< 10 ->
Val7;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv12};
    _ ->
        { asn1_NOVALUE, Tlv11}
end,

%%-------------------------------------------------
%% attribute serviceInteractionIndicators(12) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term12,Tlv13} = case Tlv12 of
[{131083,V12}|TempTlv13] ->
    {begin
Val8 = decode_octet_string(V12, []),
C8 = byte_size(Val8),
if 1 =< C8, C8 =< 5 ->
Val8;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv13};
    _ ->
        { asn1_NOVALUE, Tlv12}
end,

%%-------------------------------------------------
%% attribute iNServiceCompatibilityResponse(13)   External INCS3datatypes:INServiceCompatibilityResponse OPTIONAL
%%-------------------------------------------------
{Term13,Tlv14} = case Tlv13 of
[{131084,V13}|TempTlv14] ->
    {'INCS3datatypes':'dec_INServiceCompatibilityResponse'(V13, []), TempTlv14};
    _ ->
        { asn1_NOVALUE, Tlv13}
end,

%%-------------------------------------------------
%% attribute forwardGVNS(14) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term14,Tlv15} = case Tlv14 of
[{131085,V14}|TempTlv15] ->
    {begin
Val9 = decode_octet_string(V14, []),
C9 = byte_size(Val9),
if 1 =< C9, C9 =< 27 ->
Val9;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv15};
    _ ->
        { asn1_NOVALUE, Tlv14}
end,

%%-------------------------------------------------
%% attribute backwardGVNS(15) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term15,Tlv16} = case Tlv15 of
[{131086,V15}|TempTlv16] ->
    {begin
Val10 = decode_octet_string(V15, []),
C10 = byte_size(Val10),
if 1 =< C10, C10 =< 27 ->
Val10;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv16};
    _ ->
        { asn1_NOVALUE, Tlv15}
end,

%%-------------------------------------------------
%% attribute serviceInteractionIndicatorsTwo(16)   External INCS3datatypes:ServiceInteractionIndicatorsTwo OPTIONAL
%%-------------------------------------------------
{Term16,Tlv17} = case Tlv16 of
[{131087,V16}|TempTlv17] ->
    {'INCS3datatypes':'dec_ServiceInteractionIndicatorsTwo'(V16, []), TempTlv17};
    _ ->
        { asn1_NOVALUE, Tlv16}
end,

%%-------------------------------------------------
%% attribute correlationID(17) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term17,Tlv18} = case Tlv17 of
[{131088,V17}|TempTlv18] ->
    {begin
Val11 = decode_octet_string(V17, []),
C11 = byte_size(Val11),
if 1 =< C11, C11 =< 27 ->
Val11;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv18};
    _ ->
        { asn1_NOVALUE, Tlv17}
end,

%%-------------------------------------------------
%% attribute scfID(18) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term18,Tlv19} = case Tlv18 of
[{131089,V18}|TempTlv19] ->
    {begin
Val12 = decode_octet_string(V18, []),
C12 = byte_size(Val12),
if 1 =< C12, C12 =< 27 ->
Val12;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv19};
    _ ->
        { asn1_NOVALUE, Tlv18}
end,

%%-------------------------------------------------
%% attribute callSegmentID(19) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term19,Tlv20} = case Tlv19 of
[{131090,V19}|TempTlv20] ->
    {begin
Val13 = decode_integer(V19, []),
if 1 =< Val13, Val13 =< 10 ->
Val13;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv20};
    _ ->
        { asn1_NOVALUE, Tlv19}
end,

%%-------------------------------------------------
%% attribute legToBeCreated(20)   External INCS3opsargs:LegID OPTIONAL
%%-------------------------------------------------
{Term20,Tlv21} = case Tlv20 of
[{131091,V20}|TempTlv21] ->
    {'dec_LegID'(V20, []), TempTlv21};
    _ ->
        { asn1_NOVALUE, Tlv20}
end,

case Tlv21 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv21}}}) % extra fields not allowed
end,
   {'AnalyseInformationArg', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9, Term10, Term11, Term12, Term13, Term14, Term15, Term16, Term17, Term18, Term19, Term20}.



%%================================
%%  ApplyChargingArg
%%================================
'enc_ApplyChargingArg'(Val) ->
    'enc_ApplyChargingArg'(Val, [<<48>>]).

'enc_ApplyChargingArg'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5} = Val,

%%-------------------------------------------------
%% attribute aChBillingChargingCharacteristics(1) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute partyToCharge(2)   External INCS3opsargs:LegID OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_LegID'(Cindex2, [<<162>>])
       end,

%%-------------------------------------------------
%% attribute extensions(3)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Extensions'(Cindex3, [<<163>>])
       end,

%%-------------------------------------------------
%% attribute releaseIndication(4) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_boolean(Cindex4, [<<132>>])
       end,

%%-------------------------------------------------
%% attribute releaseCause(5) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex5 of
normal -> encode_tags([<<133>>], [0], 1);
originationDenied -> encode_tags([<<133>>], [1], 1);
collectDigits -> encode_tags([<<133>>], [2], 1);
authorisationFailure -> encode_tags([<<133>>], [3], 1);
bPtyAlerted -> encode_tags([<<133>>], [4], 1);
noIndication -> encode_tags([<<133>>], [5], 1);
aPtyAbandon -> encode_tags([<<133>>], [6], 1);
invalidCollectedInformation -> encode_tags([<<133>>], [7], 1);
collectInformationFailure -> encode_tags([<<133>>], [8], 1);
aPtyDisc -> encode_tags([<<133>>], [9], 1);
bPtyDisc -> encode_tags([<<133>>], [10], 1);
routeSelectFailure -> encode_tags([<<133>>], [11], 1);
oNoAnswer -> encode_tags([<<133>>], [12], 1);
terminationDenied -> encode_tags([<<133>>], [13], 1);
notReachable -> encode_tags([<<133>>], [14], 1);
bPtyNoAnswer -> encode_tags([<<133>>], [15], 1);
bPtyBusyUDUB -> encode_tags([<<133>>], [16], 1);
bPtyBusyNDUB -> encode_tags([<<133>>], [17], 1);
ss7Failure -> encode_tags([<<133>>], [18], 1);
calledPartyRejected -> encode_tags([<<133>>], [19], 1);
tException -> encode_tags([<<133>>], [20], 1);
routeFailure1 -> encode_tags([<<133>>], [21], 1);
routeFailure2 -> encode_tags([<<133>>], [22], 1);
ssActivating -> encode_tags([<<133>>], [23], 1);
conversationTimeout -> encode_tags([<<133>>], [24], 1);
noCircuitAvailable -> encode_tags([<<133>>], [25], 1);
coreNotification -> encode_tags([<<133>>], [26], 1);
unsupportedMedia -> encode_tags([<<133>>], [27], 1);
numberIncomplete -> encode_tags([<<133>>], [28], 1);
invalidNumber -> encode_tags([<<133>>], [29], 1);
unassignedNumber -> encode_tags([<<133>>], [30], 1);
doNotDisturb -> encode_tags([<<133>>], [31], 1);
externalControlled -> encode_tags([<<133>>], [32], 1);
systemFailure -> encode_tags([<<133>>], [33], 1);
applicationNotification -> encode_tags([<<133>>], [34], 1);
referOk -> encode_tags([<<133>>], [35], 1);
referFailure -> encode_tags([<<133>>], [36], 1);
hole -> encode_tags([<<133>>], [37], 1);
hold -> encode_tags([<<133>>], [38], 1);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_ApplyChargingArg'(Tlv) ->
   'dec_ApplyChargingArg'(Tlv, [16]).

'dec_ApplyChargingArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute aChBillingChargingCharacteristics(1) with type OCTET STRING
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_octet_string(V1, [131072]),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 27 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute partyToCharge(2)   External INCS3opsargs:LegID OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131074,V2}|TempTlv3] ->
    {'dec_LegID'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute extensions(3)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131075,V3}|TempTlv4] ->
    {'INCS3datatypes':'dec_Extensions'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute releaseIndication(4) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131076,V4}|TempTlv5] ->
    {decode_boolean(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute releaseCause(5) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131077,V5}|TempTlv6] ->
    {case decode_integer(V5, []) of
0 -> normal;
1 -> originationDenied;
2 -> collectDigits;
3 -> authorisationFailure;
4 -> bPtyAlerted;
5 -> noIndication;
6 -> aPtyAbandon;
7 -> invalidCollectedInformation;
8 -> collectInformationFailure;
9 -> aPtyDisc;
10 -> bPtyDisc;
11 -> routeSelectFailure;
12 -> oNoAnswer;
13 -> terminationDenied;
14 -> notReachable;
15 -> bPtyNoAnswer;
16 -> bPtyBusyUDUB;
17 -> bPtyBusyNDUB;
18 -> ss7Failure;
19 -> calledPartyRejected;
20 -> tException;
21 -> routeFailure1;
22 -> routeFailure2;
23 -> ssActivating;
24 -> conversationTimeout;
25 -> noCircuitAvailable;
26 -> coreNotification;
27 -> unsupportedMedia;
28 -> numberIncomplete;
29 -> invalidNumber;
30 -> unassignedNumber;
31 -> doNotDisturb;
32 -> externalControlled;
33 -> systemFailure;
34 -> applicationNotification;
35 -> referOk;
36 -> referFailure;
37 -> hole;
38 -> hold;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end, TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

case Tlv6 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv6}}}) % extra fields not allowed
end,
   {'ApplyChargingArg', Term1, Term2, Term3, Term4, Term5}.



%%================================
%%  ApplyChargingReportArg
%%================================
'enc_ApplyChargingReportArg'(Val) ->
    'enc_ApplyChargingReportArg'(Val, [<<4>>]).

'enc_ApplyChargingReportArg'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_ApplyChargingReportArg'(Tlv) ->
   'dec_ApplyChargingReportArg'(Tlv, [4]).

'dec_ApplyChargingReportArg'(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 27 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  AssistRequestInstructionsArg
%%================================
'enc_AssistRequestInstructionsArg'(Val) ->
    'enc_AssistRequestInstructionsArg'(Val, [<<48>>]).

'enc_AssistRequestInstructionsArg'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute correlationID(1) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute iPAvailable(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute iPSSPCapabilities(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute extensions(4)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Extensions'(Cindex4, [<<163>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_AssistRequestInstructionsArg'(Tlv) ->
   'dec_AssistRequestInstructionsArg'(Tlv, [16]).

'dec_AssistRequestInstructionsArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute correlationID(1) with type OCTET STRING
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_octet_string(V1, [131072]),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 27 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute iPAvailable(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
Val2 = decode_octet_string(V2, []),
C2 = byte_size(Val2),
if 1 =< C2, C2 =< 27 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute iPSSPCapabilities(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {begin
Val3 = decode_octet_string(V3, []),
C3 = byte_size(Val3),
if 1 =< C3, C3 =< 27 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute extensions(4)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'INCS3datatypes':'dec_Extensions'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

case Tlv5 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed
end,
   {'AssistRequestInstructionsArg', Term1, Term2, Term3, Term4}.



%%================================
%%  AuthorizeTerminationArg
%%================================
'enc_AuthorizeTerminationArg'(Val) ->
    'enc_AuthorizeTerminationArg'(Val, [<<48>>]).

'enc_AuthorizeTerminationArg'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8, Cindex9, Cindex10, Cindex11, Cindex12} = Val,

%%-------------------------------------------------
%% attribute alertingPattern(1) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex1, [<<128>>])
       end,

%%-------------------------------------------------
%% attribute callingPartyNumber(2)   External ACPdatatypes:CallingPartyNumber OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'ACPdatatypes':'enc_CallingPartyNumber'(Cindex2, [<<161>>])
       end,

%%-------------------------------------------------
%% attribute destinationNumberRoutingAddress(3)   External ACPdatatypes:CalledPartyNumber OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'ACPdatatypes':'enc_CalledPartyNumber'(Cindex3, [<<162>>])
       end,

%%-------------------------------------------------
%% attribute displayInformation(4) with type IA5String OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex4, [<<131>>])
       end,

%%-------------------------------------------------
%% attribute iSDNAccessRelatedInformation(5) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex5, [<<132>>])
       end,

%%-------------------------------------------------
%% attribute originalCalledPartyID(6) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex6, [<<133>>])
       end,

%%-------------------------------------------------
%% attribute travellingClassMark(7) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex7, [<<134>>])
       end,

%%-------------------------------------------------
%% attribute extensions(8)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case Cindex8 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Extensions'(Cindex8, [<<167>>])
       end,

%%-------------------------------------------------
%% attribute iNServiceCompatibilityResponse(9)   External INCS3datatypes:INServiceCompatibilityResponse OPTIONAL
%%-------------------------------------------------
   {EncBytes9,EncLen9} =  case Cindex9 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_INServiceCompatibilityResponse'(Cindex9, [<<168>>])
       end,

%%-------------------------------------------------
%% attribute forwardGVNS(10) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes10,EncLen10} =  case Cindex10 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex10, [<<137>>])
       end,

%%-------------------------------------------------
%% attribute backwardGVNS(11) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes11,EncLen11} =  case Cindex11 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex11, [<<138>>])
       end,

%%-------------------------------------------------
%% attribute legID(12)   External INCS3opsargs:LegID OPTIONAL
%%-------------------------------------------------
   {EncBytes12,EncLen12} =  case Cindex12 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_LegID'(Cindex12, [<<171>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10, EncBytes11, EncBytes12],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10 + EncLen11 + EncLen12,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_AuthorizeTerminationArg'(Tlv) ->
   'dec_AuthorizeTerminationArg'(Tlv, [16]).

'dec_AuthorizeTerminationArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute alertingPattern(1) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {begin
Val1 = decode_octet_string(V1, []),
C1 = byte_size(Val1),
if C1 =:= 3 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute callingPartyNumber(2)   External ACPdatatypes:CallingPartyNumber OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'ACPdatatypes':'dec_CallingPartyNumber'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute destinationNumberRoutingAddress(3)   External ACPdatatypes:CalledPartyNumber OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'ACPdatatypes':'dec_CalledPartyNumber'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute displayInformation(4) with type IA5String OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {begin
Val2 = decode_restricted_string(V4, []),
C2 = byte_size(Val2),
if 1 =< C2, C2 =< 27 ->
binary_to_list(Val2);
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute iSDNAccessRelatedInformation(5) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {begin
Val3 = decode_octet_string(V5, []),
C3 = byte_size(Val3),
if 1 =< C3, C3 =< 10 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute originalCalledPartyID(6) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {begin
Val4 = decode_octet_string(V6, []),
C4 = byte_size(Val4),
if 1 =< C4, C4 =< 15 ->
Val4;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute travellingClassMark(7) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {begin
Val5 = decode_octet_string(V7, []),
C5 = byte_size(Val5),
if 1 =< C5, C5 =< 27 ->
Val5;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

%%-------------------------------------------------
%% attribute extensions(8)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term8,Tlv9} = case Tlv8 of
[{131079,V8}|TempTlv9] ->
    {'INCS3datatypes':'dec_Extensions'(V8, []), TempTlv9};
    _ ->
        { asn1_NOVALUE, Tlv8}
end,

%%-------------------------------------------------
%% attribute iNServiceCompatibilityResponse(9)   External INCS3datatypes:INServiceCompatibilityResponse OPTIONAL
%%-------------------------------------------------
{Term9,Tlv10} = case Tlv9 of
[{131080,V9}|TempTlv10] ->
    {'INCS3datatypes':'dec_INServiceCompatibilityResponse'(V9, []), TempTlv10};
    _ ->
        { asn1_NOVALUE, Tlv9}
end,

%%-------------------------------------------------
%% attribute forwardGVNS(10) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term10,Tlv11} = case Tlv10 of
[{131081,V10}|TempTlv11] ->
    {begin
Val6 = decode_octet_string(V10, []),
C6 = byte_size(Val6),
if 1 =< C6, C6 =< 27 ->
Val6;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv11};
    _ ->
        { asn1_NOVALUE, Tlv10}
end,

%%-------------------------------------------------
%% attribute backwardGVNS(11) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term11,Tlv12} = case Tlv11 of
[{131082,V11}|TempTlv12] ->
    {begin
Val7 = decode_octet_string(V11, []),
C7 = byte_size(Val7),
if 1 =< C7, C7 =< 27 ->
Val7;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv12};
    _ ->
        { asn1_NOVALUE, Tlv11}
end,

%%-------------------------------------------------
%% attribute legID(12)   External INCS3opsargs:LegID OPTIONAL
%%-------------------------------------------------
{Term12,Tlv13} = case Tlv12 of
[{131083,V12}|TempTlv13] ->
    {'dec_LegID'(V12, []), TempTlv13};
    _ ->
        { asn1_NOVALUE, Tlv12}
end,

case Tlv13 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv13}}}) % extra fields not allowed
end,
   {'AuthorizeTerminationArg', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9, Term10, Term11, Term12}.



%%================================
%%  CallGapArg
%%================================
'enc_CallGapArg'(Val) ->
    'enc_CallGapArg'(Val, [<<48>>]).

'enc_CallGapArg'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5} = Val,

%%-------------------------------------------------
%% attribute gapCriteria(1)   External INCS3datatypes:GapCriteria
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'INCS3datatypes':'enc_GapCriteria'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute gapIndicators(2)   External INCS3datatypes:GapIndicators
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'INCS3datatypes':'enc_GapIndicators'(Cindex2, [<<161>>]),

%%-------------------------------------------------
%% attribute controlType(3) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex3 of
sCPOverloaded -> encode_tags([<<130>>], [0], 1);
manuallyInitiated -> encode_tags([<<130>>], [1], 1);
destinationOverload -> encode_tags([<<130>>], [2], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end
       end,

%%-------------------------------------------------
%% attribute gapTreatment(4)   External INCS3datatypes:GapTreatment OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_GapTreatment'(Cindex4, [<<163>>])
       end,

%%-------------------------------------------------
%% attribute extensions(5)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Extensions'(Cindex5, [<<164>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_CallGapArg'(Tlv) ->
   'dec_CallGapArg'(Tlv, [16]).

'dec_CallGapArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute gapCriteria(1)   External INCS3datatypes:GapCriteria
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'INCS3datatypes':'dec_GapCriteria'(V1, [131072]),

%%-------------------------------------------------
%% attribute gapIndicators(2)   External INCS3datatypes:GapIndicators
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'INCS3datatypes':'dec_GapIndicators'(V2, [131073]),

%%-------------------------------------------------
%% attribute controlType(3) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {case decode_integer(V3, []) of
0 -> sCPOverloaded;
1 -> manuallyInitiated;
2 -> destinationOverload;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute gapTreatment(4)   External INCS3datatypes:GapTreatment OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'INCS3datatypes':'dec_GapTreatment'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute extensions(5)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {'INCS3datatypes':'dec_Extensions'(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

case Tlv6 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv6}}}) % extra fields not allowed
end,
   {'CallGapArg', Term1, Term2, Term3, Term4, Term5}.



%%================================
%%  CallInformationReportArg
%%================================
'enc_CallInformationReportArg'(Val) ->
    'enc_CallInformationReportArg'(Val, [<<48>>]).

'enc_CallInformationReportArg'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5} = Val,

%%-------------------------------------------------
%% attribute requestedInformationList(1)   External INCS3datatypes:RequestedInformationList
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'INCS3datatypes':'enc_RequestedInformationList'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute correlationID(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute extensions(3)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Extensions'(Cindex3, [<<162>>])
       end,

%%-------------------------------------------------
%% attribute legID(4)   External INCS3opsargs:LegID OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_LegID'(Cindex4, [<<163>>])
       end,

%%-------------------------------------------------
%% attribute lastEventIndicator(5) with type BOOLEAN DEFAULT = false
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_DEFAULT -> {<<>>,0};
         false -> {<<>>,0};
         _ ->
            encode_boolean(Cindex5, [<<132>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_CallInformationReportArg'(Tlv) ->
   'dec_CallInformationReportArg'(Tlv, [16]).

'dec_CallInformationReportArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute requestedInformationList(1)   External INCS3datatypes:RequestedInformationList
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'INCS3datatypes':'dec_RequestedInformationList'(V1, [131072]),

%%-------------------------------------------------
%% attribute correlationID(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
Val1 = decode_octet_string(V2, []),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 27 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute extensions(3)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'INCS3datatypes':'dec_Extensions'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute legID(4)   External INCS3opsargs:LegID OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'dec_LegID'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute lastEventIndicator(5) with type BOOLEAN DEFAULT = false
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {decode_boolean(V5, []), TempTlv6};
    _ ->
        {false,Tlv5}
end,

case Tlv6 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv6}}}) % extra fields not allowed
end,
   {'CallInformationReportArg', Term1, Term2, Term3, Term4, Term5}.



%%================================
%%  CallInformationRequestArg
%%================================
'enc_CallInformationRequestArg'(Val) ->
    'enc_CallInformationRequestArg'(Val, [<<48>>]).

'enc_CallInformationRequestArg'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute requestedInformationTypeList(1)   External INCS3datatypes:RequestedInformationTypeList
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'INCS3datatypes':'enc_RequestedInformationTypeList'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute correlationID(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute extensions(3)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Extensions'(Cindex3, [<<162>>])
       end,

%%-------------------------------------------------
%% attribute legID(4)   External INCS3opsargs:LegID OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_LegID'(Cindex4, [<<163>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_CallInformationRequestArg'(Tlv) ->
   'dec_CallInformationRequestArg'(Tlv, [16]).

'dec_CallInformationRequestArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute requestedInformationTypeList(1)   External INCS3datatypes:RequestedInformationTypeList
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'INCS3datatypes':'dec_RequestedInformationTypeList'(V1, [131072]),

%%-------------------------------------------------
%% attribute correlationID(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
Val1 = decode_octet_string(V2, []),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 27 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute extensions(3)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'INCS3datatypes':'dec_Extensions'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute legID(4)   External INCS3opsargs:LegID OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'dec_LegID'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

case Tlv5 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed
end,
   {'CallInformationRequestArg', Term1, Term2, Term3, Term4}.



%%================================
%%  CancelArg
%%================================
'enc_CancelArg'(Val) ->
    'enc_CancelArg'(Val, []).

'enc_CancelArg'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      invokeID ->
         encode_integer(element(2,Val), [<<128>>]);
      allRequests ->
         encode_null(element(2,Val), [<<129>>]);
      callSegmentToCancel ->
         'enc_CancelArg_callSegmentToCancel'(element(2,Val), [<<162>>]);
      allRequestsForCallSegment ->
         encode_integer(element(2,Val), [<<131>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  CancelArg_callSegmentToCancel
%%================================
'enc_CancelArg_callSegmentToCancel'(Val, TagIn) ->
   {_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute invokeID(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute callSegmentID(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_CancelArg'(Tlv) ->
   'dec_CancelArg'(Tlv, []).

'dec_CancelArg'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'invokeID'
    {131072, V1} -> 
        {invokeID, begin
Val1 = decode_integer(V1, []),
if -128 =< Val1, Val1 =< 127 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'allRequests'
    {131073, V1} -> 
        {allRequests, decode_null(V1, [])};


%% 'callSegmentToCancel'
    {131074, V1} -> 
        {callSegmentToCancel, 'dec_CancelArg_callSegmentToCancel'(V1, [])};


%% 'allRequestsForCallSegment'
    {131075, V1} -> 
        {allRequestsForCallSegment, begin
Val2 = decode_integer(V1, []),
if 1 =< Val2, Val2 =< 10 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.
'dec_CancelArg_callSegmentToCancel'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute invokeID(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if -128 =< Val1, Val1 =< 127 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute callSegmentID(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [131073]),
if 1 =< Val2, Val2 =< 10 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'CancelArg_callSegmentToCancel', Term1, Term2}.



%%================================
%%  CancelStatusReportRequestArg
%%================================
'enc_CancelStatusReportRequestArg'(Val) ->
    'enc_CancelStatusReportRequestArg'(Val, [<<48>>]).

'enc_CancelStatusReportRequestArg'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute resourceID(1)   External INCS3datatypes:ResourceID OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_ResourceID'(Cindex1, [<<160>>])
       end,

%%-------------------------------------------------
%% attribute extensions(2)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Extensions'(Cindex2, [<<161>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_CancelStatusReportRequestArg'(Tlv) ->
   'dec_CancelStatusReportRequestArg'(Tlv, [16]).

'dec_CancelStatusReportRequestArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute resourceID(1)   External INCS3datatypes:ResourceID OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {'INCS3datatypes':'dec_ResourceID'(V1, []), TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute extensions(2)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'INCS3datatypes':'dec_Extensions'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'CancelStatusReportRequestArg', Term1, Term2}.



%%================================
%%  CollectedInformationArg
%%================================
'enc_CollectedInformationArg'(Val) ->
    'enc_CollectedInformationArg'(Val, [<<48>>]).

'enc_CollectedInformationArg'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8, Cindex9, Cindex10, Cindex11, Cindex12, Cindex13, Cindex14, Cindex15, Cindex16, Cindex17, Cindex18} = Val,

%%-------------------------------------------------
%% attribute dpSpecificCommonParameters(1)   External INCS3datatypes:DpSpecificCommonParameters
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'INCS3datatypes':'enc_DpSpecificCommonParameters'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute dialledDigits(2)   External ACPdatatypes:CalledPartyNumber OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'ACPdatatypes':'enc_CalledPartyNumber'(Cindex2, [<<161>>])
       end,

%%-------------------------------------------------
%% attribute callingPartyBusinessGroupID(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute callingPartySubaddress(4) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex4, [<<131>>])
       end,

%%-------------------------------------------------
%% attribute callingFacilityGroup(5)   External INCS3datatypes:FacilityGroup OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_FacilityGroup'(Cindex5, [<<164>>])
       end,

%%-------------------------------------------------
%% attribute callingFacilityGroupMember(6) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex6, [<<133>>])
       end,

%%-------------------------------------------------
%% attribute originalCalledPartyID(7) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex7, [<<134>>])
       end,

%%-------------------------------------------------
%% attribute prefix(8) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case Cindex8 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex8, [<<135>>])
       end,

%%-------------------------------------------------
%% attribute redirectingPartyID(9) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes9,EncLen9} =  case Cindex9 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex9, [<<136>>])
       end,

%%-------------------------------------------------
%% attribute redirectionInformation(10) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes10,EncLen10} =  case Cindex10 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex10, [<<137>>])
       end,

%%-------------------------------------------------
%% attribute travellingClassMark(11) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes11,EncLen11} =  case Cindex11 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex11, [<<138>>])
       end,

%%-------------------------------------------------
%% attribute extensions(12)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes12,EncLen12} =  case Cindex12 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Extensions'(Cindex12, [<<171>>])
       end,

%%-------------------------------------------------
%% attribute featureCode(13) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes13,EncLen13} =  case Cindex13 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex13, [<<140>>])
       end,

%%-------------------------------------------------
%% attribute accessCode(14) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes14,EncLen14} =  case Cindex14 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex14, [<<141>>])
       end,

%%-------------------------------------------------
%% attribute carrier(15) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes15,EncLen15} =  case Cindex15 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex15, [<<142>>])
       end,

%%-------------------------------------------------
%% attribute componentType(16) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes16,EncLen16} =  case Cindex16 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex16 of
anny -> encode_tags([<<143>>], [0], 1);
invoke -> encode_tags([<<143>>], [1], 1);
rResult -> encode_tags([<<143>>], [2], 1);
rError -> encode_tags([<<143>>], [3], 1);
rReject -> encode_tags([<<143>>], [4], 1);
Enumval12 -> exit({error,{asn1, {enumerated_not_in_range,Enumval12}}})
end
       end,

%%-------------------------------------------------
%% attribute component(17)   External INCS3datatypes:Component OPTIONAL
%%-------------------------------------------------
   {EncBytes17,EncLen17} =  case Cindex17 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Component'(Cindex17, [<<176>>])
       end,

%%-------------------------------------------------
%% attribute componentCorrelationID(18) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes18,EncLen18} =  case Cindex18 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex18, [<<145>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10, EncBytes11, EncBytes12, EncBytes13, EncBytes14, EncBytes15, EncBytes16, EncBytes17, EncBytes18],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10 + EncLen11 + EncLen12 + EncLen13 + EncLen14 + EncLen15 + EncLen16 + EncLen17 + EncLen18,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_CollectedInformationArg'(Tlv) ->
   'dec_CollectedInformationArg'(Tlv, [16]).

'dec_CollectedInformationArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute dpSpecificCommonParameters(1)   External INCS3datatypes:DpSpecificCommonParameters
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'INCS3datatypes':'dec_DpSpecificCommonParameters'(V1, [131072]),

%%-------------------------------------------------
%% attribute dialledDigits(2)   External ACPdatatypes:CalledPartyNumber OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'ACPdatatypes':'dec_CalledPartyNumber'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute callingPartyBusinessGroupID(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {decode_octet_string(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute callingPartySubaddress(4) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {begin
Val1 = decode_octet_string(V4, []),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 27 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute callingFacilityGroup(5)   External INCS3datatypes:FacilityGroup OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {'INCS3datatypes':'dec_FacilityGroup'(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute callingFacilityGroupMember(6) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {decode_integer(V6, []), TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute originalCalledPartyID(7) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {begin
Val2 = decode_octet_string(V7, []),
C2 = byte_size(Val2),
if 1 =< C2, C2 =< 15 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

%%-------------------------------------------------
%% attribute prefix(8) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term8,Tlv9} = case Tlv8 of
[{131079,V8}|TempTlv9] ->
    {begin
Val3 = decode_octet_string(V8, []),
C3 = byte_size(Val3),
if 1 =< C3, C3 =< 27 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv9};
    _ ->
        { asn1_NOVALUE, Tlv8}
end,

%%-------------------------------------------------
%% attribute redirectingPartyID(9) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term9,Tlv10} = case Tlv9 of
[{131080,V9}|TempTlv10] ->
    {begin
Val4 = decode_octet_string(V9, []),
C4 = byte_size(Val4),
if 1 =< C4, C4 =< 27 ->
Val4;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv10};
    _ ->
        { asn1_NOVALUE, Tlv9}
end,

%%-------------------------------------------------
%% attribute redirectionInformation(10) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term10,Tlv11} = case Tlv10 of
[{131081,V10}|TempTlv11] ->
    {begin
Val5 = decode_octet_string(V10, []),
C5 = byte_size(Val5),
if C5 =:= 2 ->
Val5;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv11};
    _ ->
        { asn1_NOVALUE, Tlv10}
end,

%%-------------------------------------------------
%% attribute travellingClassMark(11) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term11,Tlv12} = case Tlv11 of
[{131082,V11}|TempTlv12] ->
    {begin
Val6 = decode_octet_string(V11, []),
C6 = byte_size(Val6),
if 1 =< C6, C6 =< 27 ->
Val6;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv12};
    _ ->
        { asn1_NOVALUE, Tlv11}
end,

%%-------------------------------------------------
%% attribute extensions(12)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term12,Tlv13} = case Tlv12 of
[{131083,V12}|TempTlv13] ->
    {'INCS3datatypes':'dec_Extensions'(V12, []), TempTlv13};
    _ ->
        { asn1_NOVALUE, Tlv12}
end,

%%-------------------------------------------------
%% attribute featureCode(13) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term13,Tlv14} = case Tlv13 of
[{131084,V13}|TempTlv14] ->
    {begin
Val7 = decode_octet_string(V13, []),
C7 = byte_size(Val7),
if 1 =< C7, C7 =< 27 ->
Val7;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv14};
    _ ->
        { asn1_NOVALUE, Tlv13}
end,

%%-------------------------------------------------
%% attribute accessCode(14) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term14,Tlv15} = case Tlv14 of
[{131085,V14}|TempTlv15] ->
    {begin
Val8 = decode_octet_string(V14, []),
C8 = byte_size(Val8),
if 1 =< C8, C8 =< 27 ->
Val8;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv15};
    _ ->
        { asn1_NOVALUE, Tlv14}
end,

%%-------------------------------------------------
%% attribute carrier(15) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term15,Tlv16} = case Tlv15 of
[{131086,V15}|TempTlv16] ->
    {begin
Val9 = decode_octet_string(V15, []),
C9 = byte_size(Val9),
if 3 =< C9, C9 =< 10 ->
Val9;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv16};
    _ ->
        { asn1_NOVALUE, Tlv15}
end,

%%-------------------------------------------------
%% attribute componentType(16) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term16,Tlv17} = case Tlv16 of
[{131087,V16}|TempTlv17] ->
    {case decode_integer(V16, []) of
0 -> anny;
1 -> invoke;
2 -> rResult;
3 -> rError;
4 -> rReject;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end, TempTlv17};
    _ ->
        { asn1_NOVALUE, Tlv16}
end,

%%-------------------------------------------------
%% attribute component(17)   External INCS3datatypes:Component OPTIONAL
%%-------------------------------------------------
{Term17,Tlv18} = case Tlv17 of
[{131088,V17}|TempTlv18] ->
    {'INCS3datatypes':'dec_Component'(V17, []), TempTlv18};
    _ ->
        { asn1_NOVALUE, Tlv17}
end,

%%-------------------------------------------------
%% attribute componentCorrelationID(18) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term18,Tlv19} = case Tlv18 of
[{131089,V18}|TempTlv19] ->
    {decode_integer(V18, []), TempTlv19};
    _ ->
        { asn1_NOVALUE, Tlv18}
end,

case Tlv19 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv19}}}) % extra fields not allowed
end,
   {'CollectedInformationArg', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9, Term10, Term11, Term12, Term13, Term14, Term15, Term16, Term17, Term18}.



%%================================
%%  CollectInformationArg
%%================================
'enc_CollectInformationArg'(Val) ->
    'enc_CollectInformationArg'(Val, [<<48>>]).

'enc_CollectInformationArg'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8, Cindex9, Cindex10, Cindex11, Cindex12, Cindex13, Cindex14} = Val,

%%-------------------------------------------------
%% attribute alertingPattern(1) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex1, [<<128>>])
       end,

%%-------------------------------------------------
%% attribute numberingPlan(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute originalCalledPartyID(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute travellingClassMark(4) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex4, [<<131>>])
       end,

%%-------------------------------------------------
%% attribute extensions(5)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Extensions'(Cindex5, [<<164>>])
       end,

%%-------------------------------------------------
%% attribute callingPartyNumber(6)   External ACPdatatypes:CallingPartyNumber OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'ACPdatatypes':'enc_CallingPartyNumber'(Cindex6, [<<165>>])
       end,

%%-------------------------------------------------
%% attribute dialledDigits(7)   External ACPdatatypes:CalledPartyNumber OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'ACPdatatypes':'enc_CalledPartyNumber'(Cindex7, [<<166>>])
       end,

%%-------------------------------------------------
%% attribute serviceInteractionIndicators(8) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case Cindex8 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex8, [<<135>>])
       end,

%%-------------------------------------------------
%% attribute iNServiceCompatibilityResponse(9)   External INCS3datatypes:INServiceCompatibilityResponse OPTIONAL
%%-------------------------------------------------
   {EncBytes9,EncLen9} =  case Cindex9 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_INServiceCompatibilityResponse'(Cindex9, [<<168>>])
       end,

%%-------------------------------------------------
%% attribute forwardGVNS(10) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes10,EncLen10} =  case Cindex10 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex10, [<<137>>])
       end,

%%-------------------------------------------------
%% attribute backwardGVNS(11) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes11,EncLen11} =  case Cindex11 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex11, [<<138>>])
       end,

%%-------------------------------------------------
%% attribute serviceInteractionIndicatorsTwo(12)   External INCS3datatypes:ServiceInteractionIndicatorsTwo OPTIONAL
%%-------------------------------------------------
   {EncBytes12,EncLen12} =  case Cindex12 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_ServiceInteractionIndicatorsTwo'(Cindex12, [<<171>>])
       end,

%%-------------------------------------------------
%% attribute callSegmentID(13) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes13,EncLen13} =  case Cindex13 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex13, [<<140>>])
       end,

%%-------------------------------------------------
%% attribute legToBeCreated(14)   External INCS3opsargs:LegID OPTIONAL
%%-------------------------------------------------
   {EncBytes14,EncLen14} =  case Cindex14 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_LegID'(Cindex14, [<<173>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10, EncBytes11, EncBytes12, EncBytes13, EncBytes14],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10 + EncLen11 + EncLen12 + EncLen13 + EncLen14,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_CollectInformationArg'(Tlv) ->
   'dec_CollectInformationArg'(Tlv, [16]).

'dec_CollectInformationArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute alertingPattern(1) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {begin
Val1 = decode_octet_string(V1, []),
C1 = byte_size(Val1),
if C1 =:= 3 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute numberingPlan(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
Val2 = decode_octet_string(V2, []),
C2 = byte_size(Val2),
if C2 =:= 1 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute originalCalledPartyID(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {begin
Val3 = decode_octet_string(V3, []),
C3 = byte_size(Val3),
if 1 =< C3, C3 =< 15 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute travellingClassMark(4) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {begin
Val4 = decode_octet_string(V4, []),
C4 = byte_size(Val4),
if 1 =< C4, C4 =< 27 ->
Val4;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute extensions(5)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {'INCS3datatypes':'dec_Extensions'(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute callingPartyNumber(6)   External ACPdatatypes:CallingPartyNumber OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {'ACPdatatypes':'dec_CallingPartyNumber'(V6, []), TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute dialledDigits(7)   External ACPdatatypes:CalledPartyNumber OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {'ACPdatatypes':'dec_CalledPartyNumber'(V7, []), TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

%%-------------------------------------------------
%% attribute serviceInteractionIndicators(8) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term8,Tlv9} = case Tlv8 of
[{131079,V8}|TempTlv9] ->
    {begin
Val5 = decode_octet_string(V8, []),
C5 = byte_size(Val5),
if 1 =< C5, C5 =< 5 ->
Val5;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv9};
    _ ->
        { asn1_NOVALUE, Tlv8}
end,

%%-------------------------------------------------
%% attribute iNServiceCompatibilityResponse(9)   External INCS3datatypes:INServiceCompatibilityResponse OPTIONAL
%%-------------------------------------------------
{Term9,Tlv10} = case Tlv9 of
[{131080,V9}|TempTlv10] ->
    {'INCS3datatypes':'dec_INServiceCompatibilityResponse'(V9, []), TempTlv10};
    _ ->
        { asn1_NOVALUE, Tlv9}
end,

%%-------------------------------------------------
%% attribute forwardGVNS(10) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term10,Tlv11} = case Tlv10 of
[{131081,V10}|TempTlv11] ->
    {begin
Val6 = decode_octet_string(V10, []),
C6 = byte_size(Val6),
if 1 =< C6, C6 =< 27 ->
Val6;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv11};
    _ ->
        { asn1_NOVALUE, Tlv10}
end,

%%-------------------------------------------------
%% attribute backwardGVNS(11) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term11,Tlv12} = case Tlv11 of
[{131082,V11}|TempTlv12] ->
    {begin
Val7 = decode_octet_string(V11, []),
C7 = byte_size(Val7),
if 1 =< C7, C7 =< 27 ->
Val7;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv12};
    _ ->
        { asn1_NOVALUE, Tlv11}
end,

%%-------------------------------------------------
%% attribute serviceInteractionIndicatorsTwo(12)   External INCS3datatypes:ServiceInteractionIndicatorsTwo OPTIONAL
%%-------------------------------------------------
{Term12,Tlv13} = case Tlv12 of
[{131083,V12}|TempTlv13] ->
    {'INCS3datatypes':'dec_ServiceInteractionIndicatorsTwo'(V12, []), TempTlv13};
    _ ->
        { asn1_NOVALUE, Tlv12}
end,

%%-------------------------------------------------
%% attribute callSegmentID(13) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term13,Tlv14} = case Tlv13 of
[{131084,V13}|TempTlv14] ->
    {begin
Val8 = decode_integer(V13, []),
if 1 =< Val8, Val8 =< 10 ->
Val8;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv14};
    _ ->
        { asn1_NOVALUE, Tlv13}
end,

%%-------------------------------------------------
%% attribute legToBeCreated(14)   External INCS3opsargs:LegID OPTIONAL
%%-------------------------------------------------
{Term14,Tlv15} = case Tlv14 of
[{131085,V14}|TempTlv15] ->
    {'dec_LegID'(V14, []), TempTlv15};
    _ ->
        { asn1_NOVALUE, Tlv14}
end,

case Tlv15 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv15}}}) % extra fields not allowed
end,
   {'CollectInformationArg', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9, Term10, Term11, Term12, Term13, Term14}.



%%================================
%%  ConnectArg
%%================================
'enc_ConnectArg'(Val) ->
    'enc_ConnectArg'(Val, [<<48>>]).

'enc_ConnectArg'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8, Cindex9, Cindex10, Cindex11, Cindex12, Cindex13, Cindex14, Cindex15, Cindex16, Cindex17, Cindex18, Cindex19, Cindex20, Cindex21, Cindex22, Cindex23, Cindex24, Cindex25, Cindex26, Cindex27, Cindex28, Cindex29, Cindex30, Cindex31, Cindex32} = Val,

%%-------------------------------------------------
%% attribute destinationRoutingAddress(1)   External INCS3datatypes:DestinationRoutingAddress
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'INCS3datatypes':'enc_DestinationRoutingAddress'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute alertingPattern(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute correlationID(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute cutAndPaste(4) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex4, [<<131>>])
       end,

%%-------------------------------------------------
%% attribute forwardingCondition(5) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex5 of
busy -> encode_tags([<<132>>], [0], 1);
noanswer -> encode_tags([<<132>>], [1], 1);
anny -> encode_tags([<<132>>], [2], 1);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end
       end,

%%-------------------------------------------------
%% attribute iSDNAccessRelatedInformation(6) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex6, [<<133>>])
       end,

%%-------------------------------------------------
%% attribute originalCalledPartyID(7) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex7, [<<134>>])
       end,

%%-------------------------------------------------
%% attribute routeList(8)   External INCS3datatypes:RouteList OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case Cindex8 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_RouteList'(Cindex8, [<<167>>])
       end,

%%-------------------------------------------------
%% attribute scfID(9) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes9,EncLen9} =  case Cindex9 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex9, [<<136>>])
       end,

%%-------------------------------------------------
%% attribute travellingClassMark(10) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes10,EncLen10} =  case Cindex10 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex10, [<<137>>])
       end,

%%-------------------------------------------------
%% attribute extensions(11)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes11,EncLen11} =  case Cindex11 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Extensions'(Cindex11, [<<170>>])
       end,

%%-------------------------------------------------
%% attribute carrier(12) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes12,EncLen12} =  case Cindex12 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex12, [<<139>>])
       end,

%%-------------------------------------------------
%% attribute serviceInteractionIndicators(13) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes13,EncLen13} =  case Cindex13 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex13, [<<154>>])
       end,

%%-------------------------------------------------
%% attribute callingPartyNumber(14)   External ACPdatatypes:CallingPartyNumber OPTIONAL
%%-------------------------------------------------
   {EncBytes14,EncLen14} =  case Cindex14 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'ACPdatatypes':'enc_CallingPartyNumber'(Cindex14, [<<187>>])
       end,

%%-------------------------------------------------
%% attribute callingPartysCategory(15) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes15,EncLen15} =  case Cindex15 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex15, [<<156>>])
       end,

%%-------------------------------------------------
%% attribute redirectingPartyID(16) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes16,EncLen16} =  case Cindex16 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex16, [<<157>>])
       end,

%%-------------------------------------------------
%% attribute redirectionInformation(17) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes17,EncLen17} =  case Cindex17 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex17, [<<158>>])
       end,

%%-------------------------------------------------
%% attribute displayInformation(18) with type IA5String OPTIONAL
%%-------------------------------------------------
   {EncBytes18,EncLen18} =  case Cindex18 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex18, [<<140>>])
       end,

%%-------------------------------------------------
%% attribute forwardCallIndicators(19) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes19,EncLen19} =  case Cindex19 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex19, [<<141>>])
       end,

%%-------------------------------------------------
%% attribute genericNumbers(20)   External INCS3datatypes:GenericNumbers OPTIONAL
%%-------------------------------------------------
   {EncBytes20,EncLen20} =  case Cindex20 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_GenericNumbers'(Cindex20, [<<174>>])
       end,

%%-------------------------------------------------
%% attribute serviceInteractionIndicatorsTwo(21)   External INCS3datatypes:ServiceInteractionIndicatorsTwo OPTIONAL
%%-------------------------------------------------
   {EncBytes21,EncLen21} =  case Cindex21 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_ServiceInteractionIndicatorsTwo'(Cindex21, [<<175>>])
       end,

%%-------------------------------------------------
%% attribute iNServiceCompatibilityResponse(22)   External INCS3datatypes:INServiceCompatibilityResponse OPTIONAL
%%-------------------------------------------------
   {EncBytes22,EncLen22} =  case Cindex22 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_INServiceCompatibilityResponse'(Cindex22, [<<176>>])
       end,

%%-------------------------------------------------
%% attribute forwardGVNS(23) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes23,EncLen23} =  case Cindex23 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex23, [<<145>>])
       end,

%%-------------------------------------------------
%% attribute backwardGVNS(24) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes24,EncLen24} =  case Cindex24 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex24, [<<146>>])
       end,

%%-------------------------------------------------
%% attribute chargeNumber(25) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes25,EncLen25} =  case Cindex25 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex25, [<<147>>])
       end,

%%-------------------------------------------------
%% attribute callSegmentID(26) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes26,EncLen26} =  case Cindex26 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex26, [<<148>>])
       end,

%%-------------------------------------------------
%% attribute legToBeCreated(27)   External INCS3opsargs:LegID OPTIONAL
%%-------------------------------------------------
   {EncBytes27,EncLen27} =  case Cindex27 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_LegID'(Cindex27, [<<181>>])
       end,

%%-------------------------------------------------
%% attribute sDSSinformation(28) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes28,EncLen28} =  case Cindex28 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex28, [<<150>>])
       end,

%%-------------------------------------------------
%% attribute calledDirectoryNumber(29) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes29,EncLen29} =  case Cindex29 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex29, [<<151>>])
       end,

%%-------------------------------------------------
%% attribute aTMTrafficDescriptor(30) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes30,EncLen30} =  case Cindex30 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex30, [<<152>>])
       end,

%%-------------------------------------------------
%% attribute bearerCapability(31)   External INCS3datatypes:BearerCapability OPTIONAL
%%-------------------------------------------------
   {EncBytes31,EncLen31} =  case Cindex31 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_BearerCapability'(Cindex31, [<<185>>])
       end,

%%-------------------------------------------------
%% attribute qoSParameter(32) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes32,EncLen32} =  case Cindex32 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex32, [<<159,31>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10, EncBytes11, EncBytes12, EncBytes13, EncBytes14, EncBytes15, EncBytes16, EncBytes17, EncBytes18, EncBytes19, EncBytes20, EncBytes21, EncBytes22, EncBytes23, EncBytes24, EncBytes25, EncBytes26, EncBytes27, EncBytes28, EncBytes29, EncBytes30, EncBytes31, EncBytes32],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10 + EncLen11 + EncLen12 + EncLen13 + EncLen14 + EncLen15 + EncLen16 + EncLen17 + EncLen18 + EncLen19 + EncLen20 + EncLen21 + EncLen22 + EncLen23 + EncLen24 + EncLen25 + EncLen26 + EncLen27 + EncLen28 + EncLen29 + EncLen30 + EncLen31 + EncLen32,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_ConnectArg'(Tlv) ->
   'dec_ConnectArg'(Tlv, [16]).

'dec_ConnectArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute destinationRoutingAddress(1)   External INCS3datatypes:DestinationRoutingAddress
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'INCS3datatypes':'dec_DestinationRoutingAddress'(V1, [131072]),

%%-------------------------------------------------
%% attribute alertingPattern(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
Val1 = decode_octet_string(V2, []),
C1 = byte_size(Val1),
if C1 =:= 3 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute correlationID(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {begin
Val2 = decode_octet_string(V3, []),
C2 = byte_size(Val2),
if 1 =< C2, C2 =< 27 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute cutAndPaste(4) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {begin
Val3 = decode_integer(V4, []),
if 0 =< Val3, Val3 =< 2 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute forwardingCondition(5) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {case decode_integer(V5, []) of
0 -> busy;
1 -> noanswer;
2 -> anny;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end, TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute iSDNAccessRelatedInformation(6) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {begin
Val4 = decode_octet_string(V6, []),
C3 = byte_size(Val4),
if 1 =< C3, C3 =< 10 ->
Val4;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute originalCalledPartyID(7) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {begin
Val5 = decode_octet_string(V7, []),
C4 = byte_size(Val5),
if 1 =< C4, C4 =< 15 ->
Val5;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

%%-------------------------------------------------
%% attribute routeList(8)   External INCS3datatypes:RouteList OPTIONAL
%%-------------------------------------------------
{Term8,Tlv9} = case Tlv8 of
[{131079,V8}|TempTlv9] ->
    {'INCS3datatypes':'dec_RouteList'(V8, []), TempTlv9};
    _ ->
        { asn1_NOVALUE, Tlv8}
end,

%%-------------------------------------------------
%% attribute scfID(9) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term9,Tlv10} = case Tlv9 of
[{131080,V9}|TempTlv10] ->
    {begin
Val6 = decode_octet_string(V9, []),
C5 = byte_size(Val6),
if 1 =< C5, C5 =< 27 ->
Val6;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv10};
    _ ->
        { asn1_NOVALUE, Tlv9}
end,

%%-------------------------------------------------
%% attribute travellingClassMark(10) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term10,Tlv11} = case Tlv10 of
[{131081,V10}|TempTlv11] ->
    {begin
Val7 = decode_octet_string(V10, []),
C6 = byte_size(Val7),
if 1 =< C6, C6 =< 27 ->
Val7;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv11};
    _ ->
        { asn1_NOVALUE, Tlv10}
end,

%%-------------------------------------------------
%% attribute extensions(11)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term11,Tlv12} = case Tlv11 of
[{131082,V11}|TempTlv12] ->
    {'INCS3datatypes':'dec_Extensions'(V11, []), TempTlv12};
    _ ->
        { asn1_NOVALUE, Tlv11}
end,

%%-------------------------------------------------
%% attribute carrier(12) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term12,Tlv13} = case Tlv12 of
[{131083,V12}|TempTlv13] ->
    {begin
Val8 = decode_octet_string(V12, []),
C7 = byte_size(Val8),
if 3 =< C7, C7 =< 10 ->
Val8;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv13};
    _ ->
        { asn1_NOVALUE, Tlv12}
end,

%%-------------------------------------------------
%% attribute serviceInteractionIndicators(13) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term13,Tlv14} = case Tlv13 of
[{131098,V13}|TempTlv14] ->
    {begin
Val9 = decode_octet_string(V13, []),
C8 = byte_size(Val9),
if 1 =< C8, C8 =< 5 ->
Val9;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv14};
    _ ->
        { asn1_NOVALUE, Tlv13}
end,

%%-------------------------------------------------
%% attribute callingPartyNumber(14)   External ACPdatatypes:CallingPartyNumber OPTIONAL
%%-------------------------------------------------
{Term14,Tlv15} = case Tlv14 of
[{131099,V14}|TempTlv15] ->
    {'ACPdatatypes':'dec_CallingPartyNumber'(V14, []), TempTlv15};
    _ ->
        { asn1_NOVALUE, Tlv14}
end,

%%-------------------------------------------------
%% attribute callingPartysCategory(15) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term15,Tlv16} = case Tlv15 of
[{131100,V15}|TempTlv16] ->
    {begin
Val10 = decode_octet_string(V15, []),
C9 = byte_size(Val10),
if C9 =:= 1 ->
Val10;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv16};
    _ ->
        { asn1_NOVALUE, Tlv15}
end,

%%-------------------------------------------------
%% attribute redirectingPartyID(16) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term16,Tlv17} = case Tlv16 of
[{131101,V16}|TempTlv17] ->
    {begin
Val11 = decode_octet_string(V16, []),
C10 = byte_size(Val11),
if 1 =< C10, C10 =< 27 ->
Val11;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv17};
    _ ->
        { asn1_NOVALUE, Tlv16}
end,

%%-------------------------------------------------
%% attribute redirectionInformation(17) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term17,Tlv18} = case Tlv17 of
[{131102,V17}|TempTlv18] ->
    {begin
Val12 = decode_octet_string(V17, []),
C11 = byte_size(Val12),
if C11 =:= 2 ->
Val12;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv18};
    _ ->
        { asn1_NOVALUE, Tlv17}
end,

%%-------------------------------------------------
%% attribute displayInformation(18) with type IA5String OPTIONAL
%%-------------------------------------------------
{Term18,Tlv19} = case Tlv18 of
[{131084,V18}|TempTlv19] ->
    {begin
Val13 = decode_restricted_string(V18, []),
C12 = byte_size(Val13),
if 1 =< C12, C12 =< 27 ->
binary_to_list(Val13);
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv19};
    _ ->
        { asn1_NOVALUE, Tlv18}
end,

%%-------------------------------------------------
%% attribute forwardCallIndicators(19) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term19,Tlv20} = case Tlv19 of
[{131085,V19}|TempTlv20] ->
    {begin
Val14 = decode_octet_string(V19, []),
C13 = byte_size(Val14),
if C13 =:= 2 ->
Val14;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv20};
    _ ->
        { asn1_NOVALUE, Tlv19}
end,

%%-------------------------------------------------
%% attribute genericNumbers(20)   External INCS3datatypes:GenericNumbers OPTIONAL
%%-------------------------------------------------
{Term20,Tlv21} = case Tlv20 of
[{131086,V20}|TempTlv21] ->
    {'INCS3datatypes':'dec_GenericNumbers'(V20, []), TempTlv21};
    _ ->
        { asn1_NOVALUE, Tlv20}
end,

%%-------------------------------------------------
%% attribute serviceInteractionIndicatorsTwo(21)   External INCS3datatypes:ServiceInteractionIndicatorsTwo OPTIONAL
%%-------------------------------------------------
{Term21,Tlv22} = case Tlv21 of
[{131087,V21}|TempTlv22] ->
    {'INCS3datatypes':'dec_ServiceInteractionIndicatorsTwo'(V21, []), TempTlv22};
    _ ->
        { asn1_NOVALUE, Tlv21}
end,

%%-------------------------------------------------
%% attribute iNServiceCompatibilityResponse(22)   External INCS3datatypes:INServiceCompatibilityResponse OPTIONAL
%%-------------------------------------------------
{Term22,Tlv23} = case Tlv22 of
[{131088,V22}|TempTlv23] ->
    {'INCS3datatypes':'dec_INServiceCompatibilityResponse'(V22, []), TempTlv23};
    _ ->
        { asn1_NOVALUE, Tlv22}
end,

%%-------------------------------------------------
%% attribute forwardGVNS(23) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term23,Tlv24} = case Tlv23 of
[{131089,V23}|TempTlv24] ->
    {begin
Val15 = decode_octet_string(V23, []),
C14 = byte_size(Val15),
if 1 =< C14, C14 =< 27 ->
Val15;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv24};
    _ ->
        { asn1_NOVALUE, Tlv23}
end,

%%-------------------------------------------------
%% attribute backwardGVNS(24) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term24,Tlv25} = case Tlv24 of
[{131090,V24}|TempTlv25] ->
    {begin
Val16 = decode_octet_string(V24, []),
C15 = byte_size(Val16),
if 1 =< C15, C15 =< 27 ->
Val16;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv25};
    _ ->
        { asn1_NOVALUE, Tlv24}
end,

%%-------------------------------------------------
%% attribute chargeNumber(25) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term25,Tlv26} = case Tlv25 of
[{131091,V25}|TempTlv26] ->
    {begin
Val17 = decode_octet_string(V25, []),
C16 = byte_size(Val17),
if 1 =< C16, C16 =< 27 ->
Val17;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv26};
    _ ->
        { asn1_NOVALUE, Tlv25}
end,

%%-------------------------------------------------
%% attribute callSegmentID(26) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term26,Tlv27} = case Tlv26 of
[{131092,V26}|TempTlv27] ->
    {begin
Val18 = decode_integer(V26, []),
if 1 =< Val18, Val18 =< 10 ->
Val18;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv27};
    _ ->
        { asn1_NOVALUE, Tlv26}
end,

%%-------------------------------------------------
%% attribute legToBeCreated(27)   External INCS3opsargs:LegID OPTIONAL
%%-------------------------------------------------
{Term27,Tlv28} = case Tlv27 of
[{131093,V27}|TempTlv28] ->
    {'dec_LegID'(V27, []), TempTlv28};
    _ ->
        { asn1_NOVALUE, Tlv27}
end,

%%-------------------------------------------------
%% attribute sDSSinformation(28) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term28,Tlv29} = case Tlv28 of
[{131094,V28}|TempTlv29] ->
    {begin
Val19 = decode_octet_string(V28, []),
C17 = byte_size(Val19),
if 1 =< C17, C17 =< 27 ->
Val19;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv29};
    _ ->
        { asn1_NOVALUE, Tlv28}
end,

%%-------------------------------------------------
%% attribute calledDirectoryNumber(29) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term29,Tlv30} = case Tlv29 of
[{131095,V29}|TempTlv30] ->
    {begin
Val20 = decode_octet_string(V29, []),
C18 = byte_size(Val20),
if 1 =< C18, C18 =< 27 ->
Val20;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv30};
    _ ->
        { asn1_NOVALUE, Tlv29}
end,

%%-------------------------------------------------
%% attribute aTMTrafficDescriptor(30) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term30,Tlv31} = case Tlv30 of
[{131096,V30}|TempTlv31] ->
    {begin
Val21 = decode_octet_string(V30, []),
C19 = byte_size(Val21),
if 1 =< C19, C19 =< 27 ->
Val21;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv31};
    _ ->
        { asn1_NOVALUE, Tlv30}
end,

%%-------------------------------------------------
%% attribute bearerCapability(31)   External INCS3datatypes:BearerCapability OPTIONAL
%%-------------------------------------------------
{Term31,Tlv32} = case Tlv31 of
[{131097,V31}|TempTlv32] ->
    {'INCS3datatypes':'dec_BearerCapability'(V31, []), TempTlv32};
    _ ->
        { asn1_NOVALUE, Tlv31}
end,

%%-------------------------------------------------
%% attribute qoSParameter(32) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term32,Tlv33} = case Tlv32 of
[{131103,V32}|TempTlv33] ->
    {begin
Val22 = decode_octet_string(V32, []),
C20 = byte_size(Val22),
if 1 =< C20, C20 =< 5 ->
Val22;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv33};
    _ ->
        { asn1_NOVALUE, Tlv32}
end,

case Tlv33 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv33}}}) % extra fields not allowed
end,
   {'ConnectArg', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9, Term10, Term11, Term12, Term13, Term14, Term15, Term16, Term17, Term18, Term19, Term20, Term21, Term22, Term23, Term24, Term25, Term26, Term27, Term28, Term29, Term30, Term31, Term32}.



%%================================
%%  ConnectToResourceArg
%%================================
'enc_ConnectToResourceArg'(Val) ->
    'enc_ConnectToResourceArg'(Val, [<<48>>]).

'enc_ConnectToResourceArg'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6} = Val,

%%-------------------------------------------------
%% attribute resourceAddress(1) with type CHOICE
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ConnectToResourceArg_resourceAddress'(Cindex1, []),

%%-------------------------------------------------
%% attribute extensions(2)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Extensions'(Cindex2, [<<164>>])
       end,

%%-------------------------------------------------
%% attribute serviceInteractionIndicators(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex3, [<<158>>])
       end,

%%-------------------------------------------------
%% attribute serviceInteractionIndicatorsTwo(4)   External INCS3datatypes:ServiceInteractionIndicatorsTwo OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_ServiceInteractionIndicatorsTwo'(Cindex4, [<<167>>])
       end,

%%-------------------------------------------------
%% attribute uSIServiceIndicator(5)   External INCS3datatypes:USIServiceIndicator OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_USIServiceIndicator'(Cindex5, [<<191,35>>])
       end,

%%-------------------------------------------------
%% attribute uSIInformation(6) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex6, [<<159,36>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ConnectToResourceArg_resourceAddress
%%================================
'enc_ConnectToResourceArg_resourceAddress'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      ipRoutingAddress ->
         'INCS3datatypes':'enc_IPRoutingAddress'(element(2,Val), [<<160>>]);
      legID ->
         'enc_LegID'(element(2,Val), [<<161>>]);
      ipAddressAndLegID ->
         'enc_ConnectToResourceArg_resourceAddress_ipAddressAndLegID'(element(2,Val), [<<162>>]);
      nnone ->
         encode_null(element(2,Val), [<<131>>]);
      callSegmentID ->
         encode_integer(element(2,Val), [<<133>>]);
      ipAddressAndCallSegment ->
         'enc_ConnectToResourceArg_resourceAddress_ipAddressAndCallSegment'(element(2,Val), [<<166>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  ConnectToResourceArg_resourceAddress_ipAddressAndLegID
%%================================
'enc_ConnectToResourceArg_resourceAddress_ipAddressAndLegID'(Val, TagIn) ->
   {_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute ipRoutingAddress(1)   External INCS3datatypes:IPRoutingAddress
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'INCS3datatypes':'enc_IPRoutingAddress'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute legID(2)   External INCS3opsargs:LegID
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_LegID'(Cindex2, [<<161>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ConnectToResourceArg_resourceAddress_ipAddressAndCallSegment
%%================================
'enc_ConnectToResourceArg_resourceAddress_ipAddressAndCallSegment'(Val, TagIn) ->
   {_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute ipRoutingAddress(1)   External INCS3datatypes:IPRoutingAddress
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'INCS3datatypes':'enc_IPRoutingAddress'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute callSegmentID(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_ConnectToResourceArg'(Tlv) ->
   'dec_ConnectToResourceArg'(Tlv, [16]).

'dec_ConnectToResourceArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute resourceAddress(1) with type CHOICE
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_ConnectToResourceArg_resourceAddress'(V1, []),

%%-------------------------------------------------
%% attribute extensions(2)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131076,V2}|TempTlv3] ->
    {'INCS3datatypes':'dec_Extensions'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute serviceInteractionIndicators(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131102,V3}|TempTlv4] ->
    {begin
Val1 = decode_octet_string(V3, []),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 5 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute serviceInteractionIndicatorsTwo(4)   External INCS3datatypes:ServiceInteractionIndicatorsTwo OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131079,V4}|TempTlv5] ->
    {'INCS3datatypes':'dec_ServiceInteractionIndicatorsTwo'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute uSIServiceIndicator(5)   External INCS3datatypes:USIServiceIndicator OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131107,V5}|TempTlv6] ->
    {'INCS3datatypes':'dec_USIServiceIndicator'(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute uSIInformation(6) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131108,V6}|TempTlv7] ->
    {begin
Val2 = decode_octet_string(V6, []),
C2 = byte_size(Val2),
if 1 =< C2, C2 =< 5 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

case Tlv7 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv7}}}) % extra fields not allowed
end,
   {'ConnectToResourceArg', Term1, Term2, Term3, Term4, Term5, Term6}.

'dec_ConnectToResourceArg_resourceAddress'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'ipRoutingAddress'
    {131072, V1} -> 
        {ipRoutingAddress, 'INCS3datatypes':'dec_IPRoutingAddress'(V1, [])};


%% 'legID'
    {131073, V1} -> 
        {legID, 'dec_LegID'(V1, [])};


%% 'ipAddressAndLegID'
    {131074, V1} -> 
        {ipAddressAndLegID, 'dec_ConnectToResourceArg_resourceAddress_ipAddressAndLegID'(V1, [])};


%% 'nnone'
    {131075, V1} -> 
        {nnone, decode_null(V1, [])};


%% 'callSegmentID'
    {131077, V1} -> 
        {callSegmentID, begin
Val1 = decode_integer(V1, []),
if 1 =< Val1, Val1 =< 10 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'ipAddressAndCallSegment'
    {131078, V1} -> 
        {ipAddressAndCallSegment, 'dec_ConnectToResourceArg_resourceAddress_ipAddressAndCallSegment'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.
'dec_ConnectToResourceArg_resourceAddress_ipAddressAndLegID'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute ipRoutingAddress(1)   External INCS3datatypes:IPRoutingAddress
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'INCS3datatypes':'dec_IPRoutingAddress'(V1, [131072]),

%%-------------------------------------------------
%% attribute legID(2)   External INCS3opsargs:LegID
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_LegID'(V2, [131073]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'ConnectToResourceArg_resourceAddress_ipAddressAndLegID', Term1, Term2}.

'dec_ConnectToResourceArg_resourceAddress_ipAddressAndCallSegment'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute ipRoutingAddress(1)   External INCS3datatypes:IPRoutingAddress
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'INCS3datatypes':'dec_IPRoutingAddress'(V1, [131072]),

%%-------------------------------------------------
%% attribute callSegmentID(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val1 = decode_integer(V2, [131073]),
if 1 =< Val1, Val1 =< 10 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'ConnectToResourceArg_resourceAddress_ipAddressAndCallSegment', Term1, Term2}.



%%================================
%%  ContinueWithArgumentArg
%%================================
'enc_ContinueWithArgumentArg'(Val) ->
    'enc_ContinueWithArgumentArg'(Val, [<<48>>]).

'enc_ContinueWithArgumentArg'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8, Cindex9} = Val,

%%-------------------------------------------------
%% attribute legorCSID(1) with type CHOICE DEFAULT = {legID,{sendingSideID,<<1>>}}
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_DEFAULT -> {<<>>,0};
         {legID,{sendingSideID,<<1>>}} -> {<<>>,0};
         _ ->
            'enc_ContinueWithArgumentArg_legorCSID'(Cindex1, [])
       end,

%%-------------------------------------------------
%% attribute alertingPattern(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute genericName(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute iNServiceCompatibilityResponse(4)   External INCS3datatypes:INServiceCompatibilityResponse OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_INServiceCompatibilityResponse'(Cindex4, [<<163>>])
       end,

%%-------------------------------------------------
%% attribute forwardGVNS(5) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex5, [<<132>>])
       end,

%%-------------------------------------------------
%% attribute backwardGVNS(6) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex6, [<<133>>])
       end,

%%-------------------------------------------------
%% attribute extensions(7)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Extensions'(Cindex7, [<<166>>])
       end,

%%-------------------------------------------------
%% attribute serviceInteractionIndicatorsTwo(8)   External INCS3datatypes:ServiceInteractionIndicatorsTwo OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case Cindex8 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_ServiceInteractionIndicatorsTwo'(Cindex8, [<<167>>])
       end,

%%-------------------------------------------------
%% attribute sDSSinformation(9) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes9,EncLen9} =  case Cindex9 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex9, [<<136>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ContinueWithArgumentArg_legorCSID
%%================================
'enc_ContinueWithArgumentArg_legorCSID'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      legID ->
         'enc_LegID'(element(2,Val), [<<160>>]);
      csID ->
         encode_integer(element(2,Val), [<<137>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_ContinueWithArgumentArg'(Tlv) ->
   'dec_ContinueWithArgumentArg'(Tlv, [16]).

'dec_ContinueWithArgumentArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute legorCSID(1) with type CHOICE DEFAULT = {legID,{sendingSideID,<<1>>}}
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[V1 = {131072,_}|TempTlv2] ->
    {'dec_ContinueWithArgumentArg_legorCSID'(V1, []), TempTlv2};
[V1 = {131081,_}|TempTlv2] ->
    {'dec_ContinueWithArgumentArg_legorCSID'(V1, []), TempTlv2};
    _ ->
        {{legID,{sendingSideID,<<1>>}},Tlv1}
end,

%%-------------------------------------------------
%% attribute alertingPattern(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
Val1 = decode_octet_string(V2, []),
C1 = byte_size(Val1),
if C1 =:= 3 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute genericName(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {begin
Val2 = decode_octet_string(V3, []),
C2 = byte_size(Val2),
if 1 =< C2, C2 =< 27 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute iNServiceCompatibilityResponse(4)   External INCS3datatypes:INServiceCompatibilityResponse OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'INCS3datatypes':'dec_INServiceCompatibilityResponse'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute forwardGVNS(5) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {begin
Val3 = decode_octet_string(V5, []),
C3 = byte_size(Val3),
if 1 =< C3, C3 =< 27 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute backwardGVNS(6) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {begin
Val4 = decode_octet_string(V6, []),
C4 = byte_size(Val4),
if 1 =< C4, C4 =< 27 ->
Val4;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute extensions(7)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {'INCS3datatypes':'dec_Extensions'(V7, []), TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

%%-------------------------------------------------
%% attribute serviceInteractionIndicatorsTwo(8)   External INCS3datatypes:ServiceInteractionIndicatorsTwo OPTIONAL
%%-------------------------------------------------
{Term8,Tlv9} = case Tlv8 of
[{131079,V8}|TempTlv9] ->
    {'INCS3datatypes':'dec_ServiceInteractionIndicatorsTwo'(V8, []), TempTlv9};
    _ ->
        { asn1_NOVALUE, Tlv8}
end,

%%-------------------------------------------------
%% attribute sDSSinformation(9) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term9,Tlv10} = case Tlv9 of
[{131080,V9}|TempTlv10] ->
    {begin
Val5 = decode_octet_string(V9, []),
C5 = byte_size(Val5),
if 1 =< C5, C5 =< 27 ->
Val5;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv10};
    _ ->
        { asn1_NOVALUE, Tlv9}
end,

case Tlv10 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv10}}}) % extra fields not allowed
end,
   {'ContinueWithArgumentArg', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9}.

'dec_ContinueWithArgumentArg_legorCSID'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'legID'
    {131072, V1} -> 
        {legID, 'dec_LegID'(V1, [])};


%% 'csID'
    {131081, V1} -> 
        {csID, begin
Val1 = decode_integer(V1, []),
if 1 =< Val1, Val1 =< 10 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  CreateCallSegmentAssociationArg
%%================================
'enc_CreateCallSegmentAssociationArg'(Val) ->
    'enc_CreateCallSegmentAssociationArg'(Val, [<<48>>]).

'enc_CreateCallSegmentAssociationArg'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute extensions(1)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Extensions'(Cindex1, [<<160>>])
       end,

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_CreateCallSegmentAssociationArg'(Tlv) ->
   'dec_CreateCallSegmentAssociationArg'(Tlv, [16]).

'dec_CreateCallSegmentAssociationArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute extensions(1)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {'INCS3datatypes':'dec_Extensions'(V1, []), TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'CreateCallSegmentAssociationArg', Term1}.



%%================================
%%  CreateCallSegmentAssociationResultArg
%%================================
'enc_CreateCallSegmentAssociationResultArg'(Val) ->
    'enc_CreateCallSegmentAssociationResultArg'(Val, [<<48>>]).

'enc_CreateCallSegmentAssociationResultArg'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute newCallSegmentAssociation(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_CreateCallSegmentAssociationResultArg'(Tlv) ->
   'dec_CreateCallSegmentAssociationResultArg'(Tlv, [16]).

'dec_CreateCallSegmentAssociationResultArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute newCallSegmentAssociation(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 1 =< Val1, Val1 =< 10 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'CreateCallSegmentAssociationResultArg', Term1}.



%%================================
%%  CreateOrRemoveTriggerDataArg
%%================================
'enc_CreateOrRemoveTriggerDataArg'(Val) ->
    'enc_CreateOrRemoveTriggerDataArg'(Val, [<<48>>]).

'enc_CreateOrRemoveTriggerDataArg'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8, Cindex9} = Val,

%%-------------------------------------------------
%% attribute createOrRemove(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
crreate -> encode_tags([<<128>>], [0], 1);
remove -> encode_tags([<<128>>], [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute dPName(2) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex2 of
origAttemptAuthorized -> encode_tags([<<129>>], [1], 1);
collectedInfo -> encode_tags([<<129>>], [2], 1);
analysedInformation -> encode_tags([<<129>>], [3], 1);
routeSelectFailure -> encode_tags([<<129>>], [4], 1);
oCalledPartyBusy -> encode_tags([<<129>>], [5], 1);
oNoAnswer -> encode_tags([<<129>>], [6], 1);
oAnswer -> encode_tags([<<129>>], [7], 1);
oMidCall -> encode_tags([<<129>>], [8], 1);
oDisconnect -> encode_tags([<<129>>], [9], 1);
oAbandon -> encode_tags([<<129>>], [10], 1);
termAttemptAuthorized -> encode_tags([<<129>>], [12], 1);
tBusy -> encode_tags([<<129>>], [13], 1);
tNoAnswer -> encode_tags([<<129>>], [14], 1);
tAnswer -> encode_tags([<<129>>], [15], 1);
tMidCall -> encode_tags([<<129>>], [16], 1);
tDisconnect -> encode_tags([<<129>>], [17], 1);
tAbandon -> encode_tags([<<129>>], [18], 1);
oTermSeized -> encode_tags([<<129>>], [19], 1);
oSuspend -> encode_tags([<<129>>], [20], 1);
tSuspend -> encode_tags([<<129>>], [21], 1);
origAttempt -> encode_tags([<<129>>], [22], 1);
termAttempt -> encode_tags([<<129>>], [23], 1);
oReAnswer -> encode_tags([<<129>>], [24], 1);
tReAnswer -> encode_tags([<<129>>], [25], 1);
facilitySelectedAndAvailable -> encode_tags([<<129>>], [26], 1);
callAccepted -> encode_tags([<<129>>], [27], 1);
authorizeRouteFailure -> encode_tags([<<129>>], [28], 1);
originationDenied -> encode_tags([<<129>>], [29], 1);
terminationDenied -> encode_tags([<<129>>], [30], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end
       end,

%%-------------------------------------------------
%% attribute triggerDPType(3) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes3,EncLen3} = case Cindex3 of
'tdp-r' -> encode_tags([<<130>>], [0], 1);
'tdp-n' -> encode_tags([<<130>>], [1], 1);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end,

%%-------------------------------------------------
%% attribute serviceKey(4) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex4, [<<131>>])
       end,

%%-------------------------------------------------
%% attribute profileIdentifier(5)   External INCS3datatypes:ProfileIdentifier OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_ProfileIdentifier'(Cindex5, [<<164>>])
       end,

%%-------------------------------------------------
%% attribute triggerData(6)   External INCS3datatypes:TriggerData OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_TriggerData'(Cindex6, [<<165>>])
       end,

%%-------------------------------------------------
%% attribute defaultFaultHandling(7)   External INCS3datatypes:DefaultFaultHandling OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_DefaultFaultHandling'(Cindex7, [<<166>>])
       end,

%%-------------------------------------------------
%% attribute tDPIdentifier(8)   External INCS3datatypes:TDPIdentifier OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case Cindex8 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_TDPIdentifier'(Cindex8, [<<167>>])
       end,

%%-------------------------------------------------
%% attribute extensions(9)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes9,EncLen9} =  case Cindex9 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Extensions'(Cindex9, [<<168>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_CreateOrRemoveTriggerDataArg'(Tlv) ->
   'dec_CreateOrRemoveTriggerDataArg'(Tlv, [16]).

'dec_CreateOrRemoveTriggerDataArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute createOrRemove(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> crreate;
1 -> remove;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute dPName(2) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {case decode_integer(V2, []) of
1 -> origAttemptAuthorized;
2 -> collectedInfo;
3 -> analysedInformation;
4 -> routeSelectFailure;
5 -> oCalledPartyBusy;
6 -> oNoAnswer;
7 -> oAnswer;
8 -> oMidCall;
9 -> oDisconnect;
10 -> oAbandon;
12 -> termAttemptAuthorized;
13 -> tBusy;
14 -> tNoAnswer;
15 -> tAnswer;
16 -> tMidCall;
17 -> tDisconnect;
18 -> tAbandon;
19 -> oTermSeized;
20 -> oSuspend;
21 -> tSuspend;
22 -> origAttempt;
23 -> termAttempt;
24 -> oReAnswer;
25 -> tReAnswer;
26 -> facilitySelectedAndAvailable;
27 -> callAccepted;
28 -> authorizeRouteFailure;
29 -> originationDenied;
30 -> terminationDenied;
Default2 -> exit({error,{asn1,{illegal_enumerated,Default2}}})
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute triggerDPType(3) with type ENUMERATED
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = case decode_integer(V3, [131074]) of
0 -> 'tdp-r';
1 -> 'tdp-n';
Default3 -> exit({error,{asn1,{illegal_enumerated,Default3}}})
end,

%%-------------------------------------------------
%% attribute serviceKey(4) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {begin
Val1 = decode_integer(V4, []),
if 0 =< Val1, Val1 =< 2147483647 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute profileIdentifier(5)   External INCS3datatypes:ProfileIdentifier OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {'INCS3datatypes':'dec_ProfileIdentifier'(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute triggerData(6)   External INCS3datatypes:TriggerData OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {'INCS3datatypes':'dec_TriggerData'(V6, []), TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute defaultFaultHandling(7)   External INCS3datatypes:DefaultFaultHandling OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {'INCS3datatypes':'dec_DefaultFaultHandling'(V7, []), TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

%%-------------------------------------------------
%% attribute tDPIdentifier(8)   External INCS3datatypes:TDPIdentifier OPTIONAL
%%-------------------------------------------------
{Term8,Tlv9} = case Tlv8 of
[{131079,V8}|TempTlv9] ->
    {'INCS3datatypes':'dec_TDPIdentifier'(V8, []), TempTlv9};
    _ ->
        { asn1_NOVALUE, Tlv8}
end,

%%-------------------------------------------------
%% attribute extensions(9)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term9,Tlv10} = case Tlv9 of
[{131080,V9}|TempTlv10] ->
    {'INCS3datatypes':'dec_Extensions'(V9, []), TempTlv10};
    _ ->
        { asn1_NOVALUE, Tlv9}
end,

case Tlv10 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv10}}}) % extra fields not allowed
end,
   {'CreateOrRemoveTriggerDataArg', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9}.



%%================================
%%  CreateOrRemoveTriggerDataResultArg
%%================================
'enc_CreateOrRemoveTriggerDataResultArg'(Val) ->
    'enc_CreateOrRemoveTriggerDataResultArg'(Val, [<<48>>]).

'enc_CreateOrRemoveTriggerDataResultArg'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute triggerStatus(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
created -> encode_tags([<<128>>], [0], 1);
alreadyExist -> encode_tags([<<128>>], [1], 1);
deleted -> encode_tags([<<128>>], [2], 1);
unknownTrigger -> encode_tags([<<128>>], [3], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute tDPIdentifier(2)   External INCS3datatypes:TDPIdentifier
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'INCS3datatypes':'enc_TDPIdentifier'(Cindex2, [<<161>>]),

%%-------------------------------------------------
%% attribute registratorIdentifier(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute extensions(4)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Extensions'(Cindex4, [<<163>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_CreateOrRemoveTriggerDataResultArg'(Tlv) ->
   'dec_CreateOrRemoveTriggerDataResultArg'(Tlv, [16]).

'dec_CreateOrRemoveTriggerDataResultArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute triggerStatus(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> created;
1 -> alreadyExist;
2 -> deleted;
3 -> unknownTrigger;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute tDPIdentifier(2)   External INCS3datatypes:TDPIdentifier
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'INCS3datatypes':'dec_TDPIdentifier'(V2, [131073]),

%%-------------------------------------------------
%% attribute registratorIdentifier(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {decode_octet_string(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute extensions(4)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'INCS3datatypes':'dec_Extensions'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

case Tlv5 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed
end,
   {'CreateOrRemoveTriggerDataResultArg', Term1, Term2, Term3, Term4}.



%%================================
%%  DisconnectForwardConnectionWithArgumentArg
%%================================
'enc_DisconnectForwardConnectionWithArgumentArg'(Val) ->
    'enc_DisconnectForwardConnectionWithArgumentArg'(Val, [<<48>>]).

'enc_DisconnectForwardConnectionWithArgumentArg'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute partyToDisconnect(1) with type CHOICE
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_DisconnectForwardConnectionWithArgumentArg_partyToDisconnect'(Cindex1, []),

%%-------------------------------------------------
%% attribute extensions(2)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Extensions'(Cindex2, [<<162>>])
       end,

%%-------------------------------------------------
%% attribute uSIServiceIndicator(3)   External INCS3datatypes:USIServiceIndicator OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_USIServiceIndicator'(Cindex3, [<<163>>])
       end,

%%-------------------------------------------------
%% attribute uSIInformation(4) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex4, [<<132>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  DisconnectForwardConnectionWithArgumentArg_partyToDisconnect
%%================================
'enc_DisconnectForwardConnectionWithArgumentArg_partyToDisconnect'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      legID ->
         'enc_LegID'(element(2,Val), [<<160>>]);
      callSegmentID ->
         encode_integer(element(2,Val), [<<129>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_DisconnectForwardConnectionWithArgumentArg'(Tlv) ->
   'dec_DisconnectForwardConnectionWithArgumentArg'(Tlv, [16]).

'dec_DisconnectForwardConnectionWithArgumentArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute partyToDisconnect(1) with type CHOICE
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_DisconnectForwardConnectionWithArgumentArg_partyToDisconnect'(V1, []),

%%-------------------------------------------------
%% attribute extensions(2)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131074,V2}|TempTlv3] ->
    {'INCS3datatypes':'dec_Extensions'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute uSIServiceIndicator(3)   External INCS3datatypes:USIServiceIndicator OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131075,V3}|TempTlv4] ->
    {'INCS3datatypes':'dec_USIServiceIndicator'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute uSIInformation(4) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131076,V4}|TempTlv5] ->
    {begin
Val1 = decode_octet_string(V4, []),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 5 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

case Tlv5 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed
end,
   {'DisconnectForwardConnectionWithArgumentArg', Term1, Term2, Term3, Term4}.

'dec_DisconnectForwardConnectionWithArgumentArg_partyToDisconnect'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'legID'
    {131072, V1} -> 
        {legID, 'dec_LegID'(V1, [])};


%% 'callSegmentID'
    {131073, V1} -> 
        {callSegmentID, begin
Val1 = decode_integer(V1, []),
if 1 =< Val1, Val1 =< 10 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  DisconnectLegArg
%%================================
'enc_DisconnectLegArg'(Val) ->
    'enc_DisconnectLegArg'(Val, [<<48>>]).

'enc_DisconnectLegArg'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute legToBeReleased(1)   External INCS3opsargs:LegID
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_LegID'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute releaseCause(2) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex2 of
normal -> encode_tags([<<129>>], [0], 1);
originationDenied -> encode_tags([<<129>>], [1], 1);
collectDigits -> encode_tags([<<129>>], [2], 1);
authorisationFailure -> encode_tags([<<129>>], [3], 1);
bPtyAlerted -> encode_tags([<<129>>], [4], 1);
noIndication -> encode_tags([<<129>>], [5], 1);
aPtyAbandon -> encode_tags([<<129>>], [6], 1);
invalidCollectedInformation -> encode_tags([<<129>>], [7], 1);
collectInformationFailure -> encode_tags([<<129>>], [8], 1);
aPtyDisc -> encode_tags([<<129>>], [9], 1);
bPtyDisc -> encode_tags([<<129>>], [10], 1);
routeSelectFailure -> encode_tags([<<129>>], [11], 1);
oNoAnswer -> encode_tags([<<129>>], [12], 1);
terminationDenied -> encode_tags([<<129>>], [13], 1);
notReachable -> encode_tags([<<129>>], [14], 1);
bPtyNoAnswer -> encode_tags([<<129>>], [15], 1);
bPtyBusyUDUB -> encode_tags([<<129>>], [16], 1);
bPtyBusyNDUB -> encode_tags([<<129>>], [17], 1);
ss7Failure -> encode_tags([<<129>>], [18], 1);
calledPartyRejected -> encode_tags([<<129>>], [19], 1);
tException -> encode_tags([<<129>>], [20], 1);
routeFailure1 -> encode_tags([<<129>>], [21], 1);
routeFailure2 -> encode_tags([<<129>>], [22], 1);
ssActivating -> encode_tags([<<129>>], [23], 1);
conversationTimeout -> encode_tags([<<129>>], [24], 1);
noCircuitAvailable -> encode_tags([<<129>>], [25], 1);
coreNotification -> encode_tags([<<129>>], [26], 1);
unsupportedMedia -> encode_tags([<<129>>], [27], 1);
numberIncomplete -> encode_tags([<<129>>], [28], 1);
invalidNumber -> encode_tags([<<129>>], [29], 1);
unassignedNumber -> encode_tags([<<129>>], [30], 1);
doNotDisturb -> encode_tags([<<129>>], [31], 1);
externalControlled -> encode_tags([<<129>>], [32], 1);
systemFailure -> encode_tags([<<129>>], [33], 1);
applicationNotification -> encode_tags([<<129>>], [34], 1);
referOk -> encode_tags([<<129>>], [35], 1);
referFailure -> encode_tags([<<129>>], [36], 1);
hole -> encode_tags([<<129>>], [37], 1);
hold -> encode_tags([<<129>>], [38], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end
       end,

%%-------------------------------------------------
%% attribute extensions(3)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Extensions'(Cindex3, [<<162>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_DisconnectLegArg'(Tlv) ->
   'dec_DisconnectLegArg'(Tlv, [16]).

'dec_DisconnectLegArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute legToBeReleased(1)   External INCS3opsargs:LegID
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_LegID'(V1, [131072]),

%%-------------------------------------------------
%% attribute releaseCause(2) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {case decode_integer(V2, []) of
0 -> normal;
1 -> originationDenied;
2 -> collectDigits;
3 -> authorisationFailure;
4 -> bPtyAlerted;
5 -> noIndication;
6 -> aPtyAbandon;
7 -> invalidCollectedInformation;
8 -> collectInformationFailure;
9 -> aPtyDisc;
10 -> bPtyDisc;
11 -> routeSelectFailure;
12 -> oNoAnswer;
13 -> terminationDenied;
14 -> notReachable;
15 -> bPtyNoAnswer;
16 -> bPtyBusyUDUB;
17 -> bPtyBusyNDUB;
18 -> ss7Failure;
19 -> calledPartyRejected;
20 -> tException;
21 -> routeFailure1;
22 -> routeFailure2;
23 -> ssActivating;
24 -> conversationTimeout;
25 -> noCircuitAvailable;
26 -> coreNotification;
27 -> unsupportedMedia;
28 -> numberIncomplete;
29 -> invalidNumber;
30 -> unassignedNumber;
31 -> doNotDisturb;
32 -> externalControlled;
33 -> systemFailure;
34 -> applicationNotification;
35 -> referOk;
36 -> referFailure;
37 -> hole;
38 -> hold;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute extensions(3)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'INCS3datatypes':'dec_Extensions'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'DisconnectLegArg', Term1, Term2, Term3}.



%%================================
%%  EntityReleasedArg
%%================================
'enc_EntityReleasedArg'(Val) ->
    'enc_EntityReleasedArg'(Val, []).

'enc_EntityReleasedArg'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      cSFailure ->
         'enc_EntityReleasedArg_cSFailure'(element(2,Val), [<<160>>]);
      bCSMFailure ->
         'enc_EntityReleasedArg_bCSMFailure'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  EntityReleasedArg_cSFailure
%%================================
'enc_EntityReleasedArg_cSFailure'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute callSegmentID(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute reason(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute cause(3) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex3 of
normal -> encode_tags([<<130>>], [0], 1);
originationDenied -> encode_tags([<<130>>], [1], 1);
collectDigits -> encode_tags([<<130>>], [2], 1);
authorisationFailure -> encode_tags([<<130>>], [3], 1);
bPtyAlerted -> encode_tags([<<130>>], [4], 1);
noIndication -> encode_tags([<<130>>], [5], 1);
aPtyAbandon -> encode_tags([<<130>>], [6], 1);
invalidCollectedInformation -> encode_tags([<<130>>], [7], 1);
collectInformationFailure -> encode_tags([<<130>>], [8], 1);
aPtyDisc -> encode_tags([<<130>>], [9], 1);
bPtyDisc -> encode_tags([<<130>>], [10], 1);
routeSelectFailure -> encode_tags([<<130>>], [11], 1);
oNoAnswer -> encode_tags([<<130>>], [12], 1);
terminationDenied -> encode_tags([<<130>>], [13], 1);
notReachable -> encode_tags([<<130>>], [14], 1);
bPtyNoAnswer -> encode_tags([<<130>>], [15], 1);
bPtyBusyUDUB -> encode_tags([<<130>>], [16], 1);
bPtyBusyNDUB -> encode_tags([<<130>>], [17], 1);
ss7Failure -> encode_tags([<<130>>], [18], 1);
calledPartyRejected -> encode_tags([<<130>>], [19], 1);
tException -> encode_tags([<<130>>], [20], 1);
routeFailure1 -> encode_tags([<<130>>], [21], 1);
routeFailure2 -> encode_tags([<<130>>], [22], 1);
ssActivating -> encode_tags([<<130>>], [23], 1);
conversationTimeout -> encode_tags([<<130>>], [24], 1);
noCircuitAvailable -> encode_tags([<<130>>], [25], 1);
coreNotification -> encode_tags([<<130>>], [26], 1);
unsupportedMedia -> encode_tags([<<130>>], [27], 1);
numberIncomplete -> encode_tags([<<130>>], [28], 1);
invalidNumber -> encode_tags([<<130>>], [29], 1);
unassignedNumber -> encode_tags([<<130>>], [30], 1);
doNotDisturb -> encode_tags([<<130>>], [31], 1);
externalControlled -> encode_tags([<<130>>], [32], 1);
systemFailure -> encode_tags([<<130>>], [33], 1);
applicationNotification -> encode_tags([<<130>>], [34], 1);
referOk -> encode_tags([<<130>>], [35], 1);
referFailure -> encode_tags([<<130>>], [36], 1);
hole -> encode_tags([<<130>>], [37], 1);
hold -> encode_tags([<<130>>], [38], 1);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  EntityReleasedArg_bCSMFailure
%%================================
'enc_EntityReleasedArg_bCSMFailure'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute legID(1)   External INCS3opsargs:LegID
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_LegID'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute reason(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute cause(3) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex3 of
normal -> encode_tags([<<130>>], [0], 1);
originationDenied -> encode_tags([<<130>>], [1], 1);
collectDigits -> encode_tags([<<130>>], [2], 1);
authorisationFailure -> encode_tags([<<130>>], [3], 1);
bPtyAlerted -> encode_tags([<<130>>], [4], 1);
noIndication -> encode_tags([<<130>>], [5], 1);
aPtyAbandon -> encode_tags([<<130>>], [6], 1);
invalidCollectedInformation -> encode_tags([<<130>>], [7], 1);
collectInformationFailure -> encode_tags([<<130>>], [8], 1);
aPtyDisc -> encode_tags([<<130>>], [9], 1);
bPtyDisc -> encode_tags([<<130>>], [10], 1);
routeSelectFailure -> encode_tags([<<130>>], [11], 1);
oNoAnswer -> encode_tags([<<130>>], [12], 1);
terminationDenied -> encode_tags([<<130>>], [13], 1);
notReachable -> encode_tags([<<130>>], [14], 1);
bPtyNoAnswer -> encode_tags([<<130>>], [15], 1);
bPtyBusyUDUB -> encode_tags([<<130>>], [16], 1);
bPtyBusyNDUB -> encode_tags([<<130>>], [17], 1);
ss7Failure -> encode_tags([<<130>>], [18], 1);
calledPartyRejected -> encode_tags([<<130>>], [19], 1);
tException -> encode_tags([<<130>>], [20], 1);
routeFailure1 -> encode_tags([<<130>>], [21], 1);
routeFailure2 -> encode_tags([<<130>>], [22], 1);
ssActivating -> encode_tags([<<130>>], [23], 1);
conversationTimeout -> encode_tags([<<130>>], [24], 1);
noCircuitAvailable -> encode_tags([<<130>>], [25], 1);
coreNotification -> encode_tags([<<130>>], [26], 1);
unsupportedMedia -> encode_tags([<<130>>], [27], 1);
numberIncomplete -> encode_tags([<<130>>], [28], 1);
invalidNumber -> encode_tags([<<130>>], [29], 1);
unassignedNumber -> encode_tags([<<130>>], [30], 1);
doNotDisturb -> encode_tags([<<130>>], [31], 1);
externalControlled -> encode_tags([<<130>>], [32], 1);
systemFailure -> encode_tags([<<130>>], [33], 1);
applicationNotification -> encode_tags([<<130>>], [34], 1);
referOk -> encode_tags([<<130>>], [35], 1);
referFailure -> encode_tags([<<130>>], [36], 1);
hole -> encode_tags([<<130>>], [37], 1);
hold -> encode_tags([<<130>>], [38], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_EntityReleasedArg'(Tlv) ->
   'dec_EntityReleasedArg'(Tlv, []).

'dec_EntityReleasedArg'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'cSFailure'
    {131072, V1} -> 
        {cSFailure, 'dec_EntityReleasedArg_cSFailure'(V1, [])};


%% 'bCSMFailure'
    {131073, V1} -> 
        {bCSMFailure, 'dec_EntityReleasedArg_bCSMFailure'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.
'dec_EntityReleasedArg_cSFailure'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute callSegmentID(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 1 =< Val1, Val1 =< 10 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute reason(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
Val2 = decode_octet_string(V2, []),
C1 = byte_size(Val2),
if 1 =< C1, C1 =< 5 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute cause(3) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {case decode_integer(V3, []) of
0 -> normal;
1 -> originationDenied;
2 -> collectDigits;
3 -> authorisationFailure;
4 -> bPtyAlerted;
5 -> noIndication;
6 -> aPtyAbandon;
7 -> invalidCollectedInformation;
8 -> collectInformationFailure;
9 -> aPtyDisc;
10 -> bPtyDisc;
11 -> routeSelectFailure;
12 -> oNoAnswer;
13 -> terminationDenied;
14 -> notReachable;
15 -> bPtyNoAnswer;
16 -> bPtyBusyUDUB;
17 -> bPtyBusyNDUB;
18 -> ss7Failure;
19 -> calledPartyRejected;
20 -> tException;
21 -> routeFailure1;
22 -> routeFailure2;
23 -> ssActivating;
24 -> conversationTimeout;
25 -> noCircuitAvailable;
26 -> coreNotification;
27 -> unsupportedMedia;
28 -> numberIncomplete;
29 -> invalidNumber;
30 -> unassignedNumber;
31 -> doNotDisturb;
32 -> externalControlled;
33 -> systemFailure;
34 -> applicationNotification;
35 -> referOk;
36 -> referFailure;
37 -> hole;
38 -> hold;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'EntityReleasedArg_cSFailure', Term1, Term2, Term3}.

'dec_EntityReleasedArg_bCSMFailure'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute legID(1)   External INCS3opsargs:LegID
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_LegID'(V1, [131072]),

%%-------------------------------------------------
%% attribute reason(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
Val1 = decode_octet_string(V2, []),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 5 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute cause(3) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {case decode_integer(V3, []) of
0 -> normal;
1 -> originationDenied;
2 -> collectDigits;
3 -> authorisationFailure;
4 -> bPtyAlerted;
5 -> noIndication;
6 -> aPtyAbandon;
7 -> invalidCollectedInformation;
8 -> collectInformationFailure;
9 -> aPtyDisc;
10 -> bPtyDisc;
11 -> routeSelectFailure;
12 -> oNoAnswer;
13 -> terminationDenied;
14 -> notReachable;
15 -> bPtyNoAnswer;
16 -> bPtyBusyUDUB;
17 -> bPtyBusyNDUB;
18 -> ss7Failure;
19 -> calledPartyRejected;
20 -> tException;
21 -> routeFailure1;
22 -> routeFailure2;
23 -> ssActivating;
24 -> conversationTimeout;
25 -> noCircuitAvailable;
26 -> coreNotification;
27 -> unsupportedMedia;
28 -> numberIncomplete;
29 -> invalidNumber;
30 -> unassignedNumber;
31 -> doNotDisturb;
32 -> externalControlled;
33 -> systemFailure;
34 -> applicationNotification;
35 -> referOk;
36 -> referFailure;
37 -> hole;
38 -> hold;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'EntityReleasedArg_bCSMFailure', Term1, Term2, Term3}.



%%================================
%%  EstablishTemporaryConnectionArg
%%================================
'enc_EstablishTemporaryConnectionArg'(Val) ->
    'enc_EstablishTemporaryConnectionArg'(Val, [<<48>>]).

'enc_EstablishTemporaryConnectionArg'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8} = Val,

%%-------------------------------------------------
%% attribute assistingSSPIPRoutingAddress(1) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute correlationID(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute partyToConnect(3) with type CHOICE OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_EstablishTemporaryConnectionArg_partyToConnect'(Cindex3, [])
       end,

%%-------------------------------------------------
%% attribute scfID(4) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex4, [<<131>>])
       end,

%%-------------------------------------------------
%% attribute extensions(5)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Extensions'(Cindex5, [<<164>>])
       end,

%%-------------------------------------------------
%% attribute carrier(6) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex6, [<<133>>])
       end,

%%-------------------------------------------------
%% attribute serviceInteractionIndicators(7) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex7, [<<158>>])
       end,

%%-------------------------------------------------
%% attribute serviceInteractionIndicatorsTwo(8)   External INCS3datatypes:ServiceInteractionIndicatorsTwo OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case Cindex8 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_ServiceInteractionIndicatorsTwo'(Cindex8, [<<166>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  EstablishTemporaryConnectionArg_partyToConnect
%%================================
'enc_EstablishTemporaryConnectionArg_partyToConnect'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      legID ->
         'enc_LegID'(element(2,Val), [<<162>>]);
      callSegmentID ->
         encode_integer(element(2,Val), [<<135>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_EstablishTemporaryConnectionArg'(Tlv) ->
   'dec_EstablishTemporaryConnectionArg'(Tlv, [16]).

'dec_EstablishTemporaryConnectionArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute assistingSSPIPRoutingAddress(1) with type OCTET STRING
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_octet_string(V1, [131072]),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 27 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute correlationID(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
Val2 = decode_octet_string(V2, []),
C2 = byte_size(Val2),
if 1 =< C2, C2 =< 27 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute partyToConnect(3) with type CHOICE OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[V3 = {131074,_}|TempTlv4] ->
    {'dec_EstablishTemporaryConnectionArg_partyToConnect'(V3, []), TempTlv4};
[V3 = {131079,_}|TempTlv4] ->
    {'dec_EstablishTemporaryConnectionArg_partyToConnect'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute scfID(4) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {begin
Val3 = decode_octet_string(V4, []),
C3 = byte_size(Val3),
if 1 =< C3, C3 =< 27 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute extensions(5)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {'INCS3datatypes':'dec_Extensions'(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute carrier(6) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {begin
Val4 = decode_octet_string(V6, []),
C4 = byte_size(Val4),
if 3 =< C4, C4 =< 10 ->
Val4;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute serviceInteractionIndicators(7) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131102,V7}|TempTlv8] ->
    {begin
Val5 = decode_octet_string(V7, []),
C5 = byte_size(Val5),
if 1 =< C5, C5 =< 5 ->
Val5;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

%%-------------------------------------------------
%% attribute serviceInteractionIndicatorsTwo(8)   External INCS3datatypes:ServiceInteractionIndicatorsTwo OPTIONAL
%%-------------------------------------------------
{Term8,Tlv9} = case Tlv8 of
[{131078,V8}|TempTlv9] ->
    {'INCS3datatypes':'dec_ServiceInteractionIndicatorsTwo'(V8, []), TempTlv9};
    _ ->
        { asn1_NOVALUE, Tlv8}
end,

case Tlv9 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv9}}}) % extra fields not allowed
end,
   {'EstablishTemporaryConnectionArg', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8}.

'dec_EstablishTemporaryConnectionArg_partyToConnect'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'legID'
    {131074, V1} -> 
        {legID, 'dec_LegID'(V1, [])};


%% 'callSegmentID'
    {131079, V1} -> 
        {callSegmentID, begin
Val1 = decode_integer(V1, []),
if 1 =< Val1, Val1 =< 10 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  EventNotificationChargingArg
%%================================
'enc_EventNotificationChargingArg'(Val) ->
    'enc_EventNotificationChargingArg'(Val, [<<48>>]).

'enc_EventNotificationChargingArg'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5} = Val,

%%-------------------------------------------------
%% attribute eventTypeCharging(1) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute eventSpecificInformationCharging(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute legID(3)   External INCS3opsargs:LegID OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_LegID'(Cindex3, [<<162>>])
       end,

%%-------------------------------------------------
%% attribute extensions(4)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Extensions'(Cindex4, [<<163>>])
       end,

%%-------------------------------------------------
%% attribute monitorMode(5) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes5,EncLen5} = case Cindex5 of
interrupted -> encode_tags([<<158>>], [0], 1);
notifyAndContinue -> encode_tags([<<158>>], [1], 1);
transparent -> encode_tags([<<158>>], [2], 1);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_EventNotificationChargingArg'(Tlv) ->
   'dec_EventNotificationChargingArg'(Tlv, [16]).

'dec_EventNotificationChargingArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute eventTypeCharging(1) with type OCTET STRING
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_octet_string(V1, [131072]),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 27 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute eventSpecificInformationCharging(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
Val2 = decode_octet_string(V2, []),
C2 = byte_size(Val2),
if 1 =< C2, C2 =< 27 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute legID(3)   External INCS3opsargs:LegID OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_LegID'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute extensions(4)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'INCS3datatypes':'dec_Extensions'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute monitorMode(5) with type ENUMERATED
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = case decode_integer(V5, [131102]) of
0 -> interrupted;
1 -> notifyAndContinue;
2 -> transparent;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

case Tlv6 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv6}}}) % extra fields not allowed
end,
   {'EventNotificationChargingArg', Term1, Term2, Term3, Term4, Term5}.



%%================================
%%  EventReportBCSMArg
%%================================
'enc_EventReportBCSMArg'(Val) ->
    'enc_EventReportBCSMArg'(Val, [<<48>>]).

'enc_EventReportBCSMArg'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8, Cindex9} = Val,

%%-------------------------------------------------
%% attribute eventTypeBCSM(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
origAttemptAuthorized -> encode_tags([<<128>>], [1], 1);
collectedInfo -> encode_tags([<<128>>], [2], 1);
analysedInformation -> encode_tags([<<128>>], [3], 1);
routeSelectFailure -> encode_tags([<<128>>], [4], 1);
oCalledPartyBusy -> encode_tags([<<128>>], [5], 1);
oNoAnswer -> encode_tags([<<128>>], [6], 1);
oAnswer -> encode_tags([<<128>>], [7], 1);
oMidCall -> encode_tags([<<128>>], [8], 1);
oDisconnect -> encode_tags([<<128>>], [9], 1);
oAbandon -> encode_tags([<<128>>], [10], 1);
termAttemptAuthorized -> encode_tags([<<128>>], [12], 1);
tBusy -> encode_tags([<<128>>], [13], 1);
tNoAnswer -> encode_tags([<<128>>], [14], 1);
tAnswer -> encode_tags([<<128>>], [15], 1);
tMidCall -> encode_tags([<<128>>], [16], 1);
tDisconnect -> encode_tags([<<128>>], [17], 1);
tAbandon -> encode_tags([<<128>>], [18], 1);
oTermSeized -> encode_tags([<<128>>], [19], 1);
oSuspend -> encode_tags([<<128>>], [20], 1);
tSuspend -> encode_tags([<<128>>], [21], 1);
origAttempt -> encode_tags([<<128>>], [22], 1);
termAttempt -> encode_tags([<<128>>], [23], 1);
oReAnswer -> encode_tags([<<128>>], [24], 1);
tReAnswer -> encode_tags([<<128>>], [25], 1);
facilitySelectedAndAvailable -> encode_tags([<<128>>], [26], 1);
callAccepted -> encode_tags([<<128>>], [27], 1);
authorizeRouteFailure -> encode_tags([<<128>>], [28], 1);
originationDenied -> encode_tags([<<128>>], [29], 1);
terminationDenied -> encode_tags([<<128>>], [30], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute bcsmEventCorrelationID(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute eventSpecificInformationBCSM(3)   External INCS3datatypes:EventSpecificInformationBCSM OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_EventSpecificInformationBCSM'(Cindex3, [<<162>>])
       end,

%%-------------------------------------------------
%% attribute legID(4)   External INCS3opsargs:LegID OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_LegID'(Cindex4, [<<163>>])
       end,

%%-------------------------------------------------
%% attribute miscCallInfo(5)   External INCS3opsargs:MiscCallInfo DEFAULT = {'MiscCallInfo',request,asn1_NOVALUE}
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_DEFAULT -> {<<>>,0};
         {'MiscCallInfo',request,asn1_NOVALUE} -> {<<>>,0};
         _ ->
            'enc_MiscCallInfo'(Cindex5, [<<164>>])
       end,

%%-------------------------------------------------
%% attribute extensions(6)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Extensions'(Cindex6, [<<165>>])
       end,

%%-------------------------------------------------
%% attribute componentType(7) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex7 of
anny -> encode_tags([<<134>>], [0], 1);
invoke -> encode_tags([<<134>>], [1], 1);
rResult -> encode_tags([<<134>>], [2], 1);
rError -> encode_tags([<<134>>], [3], 1);
rReject -> encode_tags([<<134>>], [4], 1);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end
       end,

%%-------------------------------------------------
%% attribute component(8)   External INCS3datatypes:Component OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case Cindex8 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Component'(Cindex8, [<<167>>])
       end,

%%-------------------------------------------------
%% attribute componentCorrelationID(9) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes9,EncLen9} =  case Cindex9 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex9, [<<136>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_EventReportBCSMArg'(Tlv) ->
   'dec_EventReportBCSMArg'(Tlv, [16]).

'dec_EventReportBCSMArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute eventTypeBCSM(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
1 -> origAttemptAuthorized;
2 -> collectedInfo;
3 -> analysedInformation;
4 -> routeSelectFailure;
5 -> oCalledPartyBusy;
6 -> oNoAnswer;
7 -> oAnswer;
8 -> oMidCall;
9 -> oDisconnect;
10 -> oAbandon;
12 -> termAttemptAuthorized;
13 -> tBusy;
14 -> tNoAnswer;
15 -> tAnswer;
16 -> tMidCall;
17 -> tDisconnect;
18 -> tAbandon;
19 -> oTermSeized;
20 -> oSuspend;
21 -> tSuspend;
22 -> origAttempt;
23 -> termAttempt;
24 -> oReAnswer;
25 -> tReAnswer;
26 -> facilitySelectedAndAvailable;
27 -> callAccepted;
28 -> authorizeRouteFailure;
29 -> originationDenied;
30 -> terminationDenied;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute bcsmEventCorrelationID(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
Val1 = decode_octet_string(V2, []),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 27 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute eventSpecificInformationBCSM(3)   External INCS3datatypes:EventSpecificInformationBCSM OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'INCS3datatypes':'dec_EventSpecificInformationBCSM'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute legID(4)   External INCS3opsargs:LegID OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'dec_LegID'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute miscCallInfo(5)   External INCS3opsargs:MiscCallInfo DEFAULT = {'MiscCallInfo',request,asn1_NOVALUE}
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {'dec_MiscCallInfo'(V5, []), TempTlv6};
    _ ->
        {{'MiscCallInfo',request,asn1_NOVALUE},Tlv5}
end,

%%-------------------------------------------------
%% attribute extensions(6)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {'INCS3datatypes':'dec_Extensions'(V6, []), TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute componentType(7) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {case decode_integer(V7, []) of
0 -> anny;
1 -> invoke;
2 -> rResult;
3 -> rError;
4 -> rReject;
Default2 -> exit({error,{asn1,{illegal_enumerated,Default2}}})
end, TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

%%-------------------------------------------------
%% attribute component(8)   External INCS3datatypes:Component OPTIONAL
%%-------------------------------------------------
{Term8,Tlv9} = case Tlv8 of
[{131079,V8}|TempTlv9] ->
    {'INCS3datatypes':'dec_Component'(V8, []), TempTlv9};
    _ ->
        { asn1_NOVALUE, Tlv8}
end,

%%-------------------------------------------------
%% attribute componentCorrelationID(9) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term9,Tlv10} = case Tlv9 of
[{131080,V9}|TempTlv10] ->
    {decode_integer(V9, []), TempTlv10};
    _ ->
        { asn1_NOVALUE, Tlv9}
end,

case Tlv10 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv10}}}) % extra fields not allowed
end,
   {'EventReportBCSMArg', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9}.



%%================================
%%  EventReportFacilityArg
%%================================
'enc_EventReportFacilityArg'(Val) ->
    'enc_EventReportFacilityArg'(Val, [<<48>>]).

'enc_EventReportFacilityArg'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5} = Val,

%%-------------------------------------------------
%% attribute componentType(1) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex1 of
anny -> encode_tags([<<128>>], [0], 1);
invoke -> encode_tags([<<128>>], [1], 1);
rResult -> encode_tags([<<128>>], [2], 1);
rError -> encode_tags([<<128>>], [3], 1);
rReject -> encode_tags([<<128>>], [4], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end
       end,

%%-------------------------------------------------
%% attribute component(2)   External INCS3datatypes:Component OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Component'(Cindex2, [<<161>>])
       end,

%%-------------------------------------------------
%% attribute legID(3)   External INCS3opsargs:LegID OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_LegID'(Cindex3, [<<162>>])
       end,

%%-------------------------------------------------
%% attribute componentCorrelationID(4) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex4, [<<131>>])
       end,

%%-------------------------------------------------
%% attribute extensions(5)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Extensions'(Cindex5, [<<164>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_EventReportFacilityArg'(Tlv) ->
   'dec_EventReportFacilityArg'(Tlv, [16]).

'dec_EventReportFacilityArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute componentType(1) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {case decode_integer(V1, []) of
0 -> anny;
1 -> invoke;
2 -> rResult;
3 -> rError;
4 -> rReject;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end, TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute component(2)   External INCS3datatypes:Component OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'INCS3datatypes':'dec_Component'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute legID(3)   External INCS3opsargs:LegID OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_LegID'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute componentCorrelationID(4) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {decode_integer(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute extensions(5)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {'INCS3datatypes':'dec_Extensions'(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

case Tlv6 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv6}}}) % extra fields not allowed
end,
   {'EventReportFacilityArg', Term1, Term2, Term3, Term4, Term5}.



%%================================
%%  FacilitySelectedAndAvailableArg
%%================================
'enc_FacilitySelectedAndAvailableArg'(Val) ->
    'enc_FacilitySelectedAndAvailableArg'(Val, [<<48>>]).

'enc_FacilitySelectedAndAvailableArg'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8, Cindex9, Cindex10, Cindex11, Cindex12, Cindex13, Cindex14} = Val,

%%-------------------------------------------------
%% attribute dpSpecificCommonParameters(1)   External INCS3datatypes:DpSpecificCommonParameters
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'INCS3datatypes':'enc_DpSpecificCommonParameters'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute calledPartyBusinessGroupID(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute calledPartySubaddress(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute callingPartyBusinessGroupID(4) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex4, [<<131>>])
       end,

%%-------------------------------------------------
%% attribute callingPartyNumber(5)   External ACPdatatypes:CallingPartyNumber OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'ACPdatatypes':'enc_CallingPartyNumber'(Cindex5, [<<164>>])
       end,

%%-------------------------------------------------
%% attribute originalCalledPartyID(6) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex6, [<<133>>])
       end,

%%-------------------------------------------------
%% attribute redirectingPartyID(7) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex7, [<<134>>])
       end,

%%-------------------------------------------------
%% attribute redirectionInformation(8) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case Cindex8 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex8, [<<135>>])
       end,

%%-------------------------------------------------
%% attribute routeList(9)   External INCS3datatypes:RouteList OPTIONAL
%%-------------------------------------------------
   {EncBytes9,EncLen9} =  case Cindex9 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_RouteList'(Cindex9, [<<168>>])
       end,

%%-------------------------------------------------
%% attribute travellingClassMark(10) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes10,EncLen10} =  case Cindex10 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex10, [<<137>>])
       end,

%%-------------------------------------------------
%% attribute extensions(11)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes11,EncLen11} =  case Cindex11 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Extensions'(Cindex11, [<<170>>])
       end,

%%-------------------------------------------------
%% attribute componentType(12) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes12,EncLen12} =  case Cindex12 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex12 of
anny -> encode_tags([<<139>>], [0], 1);
invoke -> encode_tags([<<139>>], [1], 1);
rResult -> encode_tags([<<139>>], [2], 1);
rError -> encode_tags([<<139>>], [3], 1);
rReject -> encode_tags([<<139>>], [4], 1);
Enumval8 -> exit({error,{asn1, {enumerated_not_in_range,Enumval8}}})
end
       end,

%%-------------------------------------------------
%% attribute component(13)   External INCS3datatypes:Component OPTIONAL
%%-------------------------------------------------
   {EncBytes13,EncLen13} =  case Cindex13 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Component'(Cindex13, [<<172>>])
       end,

%%-------------------------------------------------
%% attribute componentCorrelationID(14) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes14,EncLen14} =  case Cindex14 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex14, [<<141>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10, EncBytes11, EncBytes12, EncBytes13, EncBytes14],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10 + EncLen11 + EncLen12 + EncLen13 + EncLen14,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_FacilitySelectedAndAvailableArg'(Tlv) ->
   'dec_FacilitySelectedAndAvailableArg'(Tlv, [16]).

'dec_FacilitySelectedAndAvailableArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute dpSpecificCommonParameters(1)   External INCS3datatypes:DpSpecificCommonParameters
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'INCS3datatypes':'dec_DpSpecificCommonParameters'(V1, [131072]),

%%-------------------------------------------------
%% attribute calledPartyBusinessGroupID(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {decode_octet_string(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute calledPartySubaddress(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {begin
Val1 = decode_octet_string(V3, []),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 27 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute callingPartyBusinessGroupID(4) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {decode_octet_string(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute callingPartyNumber(5)   External ACPdatatypes:CallingPartyNumber OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {'ACPdatatypes':'dec_CallingPartyNumber'(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute originalCalledPartyID(6) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {begin
Val2 = decode_octet_string(V6, []),
C2 = byte_size(Val2),
if 1 =< C2, C2 =< 15 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute redirectingPartyID(7) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {begin
Val3 = decode_octet_string(V7, []),
C3 = byte_size(Val3),
if 1 =< C3, C3 =< 27 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

%%-------------------------------------------------
%% attribute redirectionInformation(8) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term8,Tlv9} = case Tlv8 of
[{131079,V8}|TempTlv9] ->
    {begin
Val4 = decode_octet_string(V8, []),
C4 = byte_size(Val4),
if C4 =:= 2 ->
Val4;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv9};
    _ ->
        { asn1_NOVALUE, Tlv8}
end,

%%-------------------------------------------------
%% attribute routeList(9)   External INCS3datatypes:RouteList OPTIONAL
%%-------------------------------------------------
{Term9,Tlv10} = case Tlv9 of
[{131080,V9}|TempTlv10] ->
    {'INCS3datatypes':'dec_RouteList'(V9, []), TempTlv10};
    _ ->
        { asn1_NOVALUE, Tlv9}
end,

%%-------------------------------------------------
%% attribute travellingClassMark(10) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term10,Tlv11} = case Tlv10 of
[{131081,V10}|TempTlv11] ->
    {begin
Val5 = decode_octet_string(V10, []),
C5 = byte_size(Val5),
if 1 =< C5, C5 =< 27 ->
Val5;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv11};
    _ ->
        { asn1_NOVALUE, Tlv10}
end,

%%-------------------------------------------------
%% attribute extensions(11)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term11,Tlv12} = case Tlv11 of
[{131082,V11}|TempTlv12] ->
    {'INCS3datatypes':'dec_Extensions'(V11, []), TempTlv12};
    _ ->
        { asn1_NOVALUE, Tlv11}
end,

%%-------------------------------------------------
%% attribute componentType(12) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term12,Tlv13} = case Tlv12 of
[{131083,V12}|TempTlv13] ->
    {case decode_integer(V12, []) of
0 -> anny;
1 -> invoke;
2 -> rResult;
3 -> rError;
4 -> rReject;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end, TempTlv13};
    _ ->
        { asn1_NOVALUE, Tlv12}
end,

%%-------------------------------------------------
%% attribute component(13)   External INCS3datatypes:Component OPTIONAL
%%-------------------------------------------------
{Term13,Tlv14} = case Tlv13 of
[{131084,V13}|TempTlv14] ->
    {'INCS3datatypes':'dec_Component'(V13, []), TempTlv14};
    _ ->
        { asn1_NOVALUE, Tlv13}
end,

%%-------------------------------------------------
%% attribute componentCorrelationID(14) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term14,Tlv15} = case Tlv14 of
[{131085,V14}|TempTlv15] ->
    {decode_integer(V14, []), TempTlv15};
    _ ->
        { asn1_NOVALUE, Tlv14}
end,

case Tlv15 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv15}}}) % extra fields not allowed
end,
   {'FacilitySelectedAndAvailableArg', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9, Term10, Term11, Term12, Term13, Term14}.



%%================================
%%  FurnishChargingInformationArg
%%================================
'enc_FurnishChargingInformationArg'(Val) ->
    'enc_FurnishChargingInformationArg'(Val, [<<4>>]).

'enc_FurnishChargingInformationArg'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_FurnishChargingInformationArg'(Tlv) ->
   'dec_FurnishChargingInformationArg'(Tlv, [4]).

'dec_FurnishChargingInformationArg'(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 27 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  HoldCallInNetworkArg
%%================================
'enc_HoldCallInNetworkArg'(Val) ->
    'enc_HoldCallInNetworkArg'(Val, []).

'enc_HoldCallInNetworkArg'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      holdcause ->
         encode_restricted_string(element(2,Val), [<<128>>]);
      empty ->
         encode_null(element(2,Val), [<<129>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_HoldCallInNetworkArg'(Tlv) ->
   'dec_HoldCallInNetworkArg'(Tlv, []).

'dec_HoldCallInNetworkArg'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'holdcause'
    {131072, V1} -> 
        {holdcause, decode_octet_string(V1, [])};


%% 'empty'
    {131073, V1} -> 
        {empty, decode_null(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  InitialDPArg
%%================================
'enc_InitialDPArg'(Val) ->
    'enc_InitialDPArg'(Val, [<<48>>]).

'enc_InitialDPArg'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8, Cindex9, Cindex10, Cindex11, Cindex12, Cindex13, Cindex14, Cindex15, Cindex16, Cindex17, Cindex18, Cindex19, Cindex20, Cindex21, Cindex22, Cindex23, Cindex24, Cindex25, Cindex26, Cindex27, Cindex28, Cindex29, Cindex30, Cindex31, Cindex32, Cindex33, Cindex34, Cindex35, Cindex36, Cindex37, Cindex38, Cindex39, Cindex40, Cindex41, Cindex42, Cindex43, Cindex44, Cindex45, Cindex46} = Val,

%%-------------------------------------------------
%% attribute serviceKey(1) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex1, [<<128>>])
       end,

%%-------------------------------------------------
%% attribute dialledDigits(2)   External ACPdatatypes:CalledPartyNumber OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'ACPdatatypes':'enc_CalledPartyNumber'(Cindex2, [<<161>>])
       end,

%%-------------------------------------------------
%% attribute calledPartyNumber(3)   External ACPdatatypes:CalledPartyNumber OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'ACPdatatypes':'enc_CalledPartyNumber'(Cindex3, [<<162>>])
       end,

%%-------------------------------------------------
%% attribute callingPartyNumber(4)   External ACPdatatypes:CallingPartyNumber OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'ACPdatatypes':'enc_CallingPartyNumber'(Cindex4, [<<163>>])
       end,

%%-------------------------------------------------
%% attribute callingPartyBusinessGroupID(5) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex5, [<<132>>])
       end,

%%-------------------------------------------------
%% attribute callingPartysCategory(6) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex6, [<<133>>])
       end,

%%-------------------------------------------------
%% attribute callingPartySubaddress(7) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex7, [<<134>>])
       end,

%%-------------------------------------------------
%% attribute cGEncountered(8) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case Cindex8 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex8 of
noCGencountered -> encode_tags([<<135>>], [0], 1);
manualCGencountered -> encode_tags([<<135>>], [1], 1);
sCPOverload -> encode_tags([<<135>>], [2], 1);
Enumval5 -> exit({error,{asn1, {enumerated_not_in_range,Enumval5}}})
end
       end,

%%-------------------------------------------------
%% attribute iPSSPCapabilities(9) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes9,EncLen9} =  case Cindex9 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex9, [<<136>>])
       end,

%%-------------------------------------------------
%% attribute iPAvailable(10) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes10,EncLen10} =  case Cindex10 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex10, [<<137>>])
       end,

%%-------------------------------------------------
%% attribute locationNumber(11) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes11,EncLen11} =  case Cindex11 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex11, [<<138>>])
       end,

%%-------------------------------------------------
%% attribute miscCallInfo(12)   External INCS3opsargs:MiscCallInfo OPTIONAL
%%-------------------------------------------------
   {EncBytes12,EncLen12} =  case Cindex12 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_MiscCallInfo'(Cindex12, [<<171>>])
       end,

%%-------------------------------------------------
%% attribute originalCalledPartyID(13) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes13,EncLen13} =  case Cindex13 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex13, [<<140>>])
       end,

%%-------------------------------------------------
%% attribute serviceProfileIdentifier(14) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes14,EncLen14} =  case Cindex14 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex14, [<<141>>])
       end,

%%-------------------------------------------------
%% attribute terminalType(15) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes15,EncLen15} =  case Cindex15 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex15 of
unknown -> encode_tags([<<142>>], [0], 1);
dialPulse -> encode_tags([<<142>>], [1], 1);
dtmf -> encode_tags([<<142>>], [2], 1);
isdn -> encode_tags([<<142>>], [3], 1);
isdnNoDtmf -> encode_tags([<<142>>], [4], 1);
spare -> encode_tags([<<142>>], [16], 1);
Enumval11 -> exit({error,{asn1, {enumerated_not_in_range,Enumval11}}})
end
       end,

%%-------------------------------------------------
%% attribute extensions(16)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes16,EncLen16} =  case Cindex16 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Extensions'(Cindex16, [<<175>>])
       end,

%%-------------------------------------------------
%% attribute triggerType(17) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes17,EncLen17} =  case Cindex17 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex17 of
featureActivation -> encode_tags([<<144>>], [0], 1);
verticalServiceCode -> encode_tags([<<144>>], [1], 1);
customizedAccess -> encode_tags([<<144>>], [2], 1);
customizedIntercom -> encode_tags([<<144>>], [3], 1);
emergencyService -> encode_tags([<<144>>], [12], 1);
aFR -> encode_tags([<<144>>], [13], 1);
sharedIOTrunk -> encode_tags([<<144>>], [14], 1);
offHookDelay -> encode_tags([<<144>>], [17], 1);
channelSetupPRI -> encode_tags([<<144>>], [18], 1);
tNoAnswer -> encode_tags([<<144>>], [25], 1);
tBusy -> encode_tags([<<144>>], [26], 1);
oCalledPartyBusy -> encode_tags([<<144>>], [27], 1);
oNoAnswer -> encode_tags([<<144>>], [29], 1);
originationAttemptAuthorized -> encode_tags([<<144>>], [30], 1);
oAnswer -> encode_tags([<<144>>], [31], 1);
oDisconnect -> encode_tags([<<144>>], [32], 1);
termAttemptAuthorized -> encode_tags([<<144>>], [33], 1);
tAnswer -> encode_tags([<<144>>], [34], 1);
tDisconnect -> encode_tags([<<144>>], [35], 1);
Enumval12 -> exit({error,{asn1, {enumerated_not_in_range,Enumval12}}})
end
       end,

%%-------------------------------------------------
%% attribute highLayerCompatibility(18) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes18,EncLen18} =  case Cindex18 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex18, [<<151>>])
       end,

%%-------------------------------------------------
%% attribute serviceInteractionIndicators(19) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes19,EncLen19} =  case Cindex19 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex19, [<<152>>])
       end,

%%-------------------------------------------------
%% attribute additionalCallingPartyNumber(20) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes20,EncLen20} =  case Cindex20 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex20, [<<153>>])
       end,

%%-------------------------------------------------
%% attribute forwardCallIndicators(21) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes21,EncLen21} =  case Cindex21 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex21, [<<154>>])
       end,

%%-------------------------------------------------
%% attribute bearerCapability(22)   External INCS3datatypes:BearerCapability OPTIONAL
%%-------------------------------------------------
   {EncBytes22,EncLen22} =  case Cindex22 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_BearerCapability'(Cindex22, [<<187>>])
       end,

%%-------------------------------------------------
%% attribute eventTypeBCSM(23) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes23,EncLen23} =  case Cindex23 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex23 of
origAttemptAuthorized -> encode_tags([<<156>>], [1], 1);
collectedInfo -> encode_tags([<<156>>], [2], 1);
analysedInformation -> encode_tags([<<156>>], [3], 1);
routeSelectFailure -> encode_tags([<<156>>], [4], 1);
oCalledPartyBusy -> encode_tags([<<156>>], [5], 1);
oNoAnswer -> encode_tags([<<156>>], [6], 1);
oAnswer -> encode_tags([<<156>>], [7], 1);
oMidCall -> encode_tags([<<156>>], [8], 1);
oDisconnect -> encode_tags([<<156>>], [9], 1);
oAbandon -> encode_tags([<<156>>], [10], 1);
termAttemptAuthorized -> encode_tags([<<156>>], [12], 1);
tBusy -> encode_tags([<<156>>], [13], 1);
tNoAnswer -> encode_tags([<<156>>], [14], 1);
tAnswer -> encode_tags([<<156>>], [15], 1);
tMidCall -> encode_tags([<<156>>], [16], 1);
tDisconnect -> encode_tags([<<156>>], [17], 1);
tAbandon -> encode_tags([<<156>>], [18], 1);
oTermSeized -> encode_tags([<<156>>], [19], 1);
oSuspend -> encode_tags([<<156>>], [20], 1);
tSuspend -> encode_tags([<<156>>], [21], 1);
origAttempt -> encode_tags([<<156>>], [22], 1);
termAttempt -> encode_tags([<<156>>], [23], 1);
oReAnswer -> encode_tags([<<156>>], [24], 1);
tReAnswer -> encode_tags([<<156>>], [25], 1);
facilitySelectedAndAvailable -> encode_tags([<<156>>], [26], 1);
callAccepted -> encode_tags([<<156>>], [27], 1);
authorizeRouteFailure -> encode_tags([<<156>>], [28], 1);
originationDenied -> encode_tags([<<156>>], [29], 1);
terminationDenied -> encode_tags([<<156>>], [30], 1);
Enumval17 -> exit({error,{asn1, {enumerated_not_in_range,Enumval17}}})
end
       end,

%%-------------------------------------------------
%% attribute redirectingPartyID(24) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes24,EncLen24} =  case Cindex24 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex24, [<<157>>])
       end,

%%-------------------------------------------------
%% attribute redirectionInformation(25) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes25,EncLen25} =  case Cindex25 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex25, [<<158>>])
       end,

%%-------------------------------------------------
%% attribute cause(26) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes26,EncLen26} =  case Cindex26 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex26 of
normal -> encode_tags([<<145>>], [0], 1);
originationDenied -> encode_tags([<<145>>], [1], 1);
collectDigits -> encode_tags([<<145>>], [2], 1);
authorisationFailure -> encode_tags([<<145>>], [3], 1);
bPtyAlerted -> encode_tags([<<145>>], [4], 1);
noIndication -> encode_tags([<<145>>], [5], 1);
aPtyAbandon -> encode_tags([<<145>>], [6], 1);
invalidCollectedInformation -> encode_tags([<<145>>], [7], 1);
collectInformationFailure -> encode_tags([<<145>>], [8], 1);
aPtyDisc -> encode_tags([<<145>>], [9], 1);
bPtyDisc -> encode_tags([<<145>>], [10], 1);
routeSelectFailure -> encode_tags([<<145>>], [11], 1);
oNoAnswer -> encode_tags([<<145>>], [12], 1);
terminationDenied -> encode_tags([<<145>>], [13], 1);
notReachable -> encode_tags([<<145>>], [14], 1);
bPtyNoAnswer -> encode_tags([<<145>>], [15], 1);
bPtyBusyUDUB -> encode_tags([<<145>>], [16], 1);
bPtyBusyNDUB -> encode_tags([<<145>>], [17], 1);
ss7Failure -> encode_tags([<<145>>], [18], 1);
calledPartyRejected -> encode_tags([<<145>>], [19], 1);
tException -> encode_tags([<<145>>], [20], 1);
routeFailure1 -> encode_tags([<<145>>], [21], 1);
routeFailure2 -> encode_tags([<<145>>], [22], 1);
ssActivating -> encode_tags([<<145>>], [23], 1);
conversationTimeout -> encode_tags([<<145>>], [24], 1);
noCircuitAvailable -> encode_tags([<<145>>], [25], 1);
coreNotification -> encode_tags([<<145>>], [26], 1);
unsupportedMedia -> encode_tags([<<145>>], [27], 1);
numberIncomplete -> encode_tags([<<145>>], [28], 1);
invalidNumber -> encode_tags([<<145>>], [29], 1);
unassignedNumber -> encode_tags([<<145>>], [30], 1);
doNotDisturb -> encode_tags([<<145>>], [31], 1);
externalControlled -> encode_tags([<<145>>], [32], 1);
systemFailure -> encode_tags([<<145>>], [33], 1);
applicationNotification -> encode_tags([<<145>>], [34], 1);
referOk -> encode_tags([<<145>>], [35], 1);
referFailure -> encode_tags([<<145>>], [36], 1);
hole -> encode_tags([<<145>>], [37], 1);
hold -> encode_tags([<<145>>], [38], 1);
Enumval20 -> exit({error,{asn1, {enumerated_not_in_range,Enumval20}}})
end
       end,

%%-------------------------------------------------
%% attribute componentType(27) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes27,EncLen27} =  case Cindex27 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex27 of
anny -> encode_tags([<<146>>], [0], 1);
invoke -> encode_tags([<<146>>], [1], 1);
rResult -> encode_tags([<<146>>], [2], 1);
rError -> encode_tags([<<146>>], [3], 1);
rReject -> encode_tags([<<146>>], [4], 1);
Enumval21 -> exit({error,{asn1, {enumerated_not_in_range,Enumval21}}})
end
       end,

%%-------------------------------------------------
%% attribute component(28)   External INCS3datatypes:Component OPTIONAL
%%-------------------------------------------------
   {EncBytes28,EncLen28} =  case Cindex28 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Component'(Cindex28, [<<179>>])
       end,

%%-------------------------------------------------
%% attribute componentCorrelationID(29) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes29,EncLen29} =  case Cindex29 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex29, [<<148>>])
       end,

%%-------------------------------------------------
%% attribute iSDNAccessRelatedInformation(30) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes30,EncLen30} =  case Cindex30 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex30, [<<149>>])
       end,

%%-------------------------------------------------
%% attribute iNServiceCompatibilityIndication(31)   External INCS3datatypes:INServiceCompatibilityIndication OPTIONAL
%%-------------------------------------------------
   {EncBytes31,EncLen31} =  case Cindex31 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_INServiceCompatibilityIndication'(Cindex31, [<<182>>])
       end,

%%-------------------------------------------------
%% attribute genericNumbers(32)   External INCS3datatypes:GenericNumbers OPTIONAL
%%-------------------------------------------------
   {EncBytes32,EncLen32} =  case Cindex32 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_GenericNumbers'(Cindex32, [<<191,31>>])
       end,

%%-------------------------------------------------
%% attribute serviceInteractionIndicatorsTwo(33)   External INCS3datatypes:ServiceInteractionIndicatorsTwo OPTIONAL
%%-------------------------------------------------
   {EncBytes33,EncLen33} =  case Cindex33 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_ServiceInteractionIndicatorsTwo'(Cindex33, [<<191,32>>])
       end,

%%-------------------------------------------------
%% attribute forwardGVNS(34) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes34,EncLen34} =  case Cindex34 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex34, [<<159,33>>])
       end,

%%-------------------------------------------------
%% attribute createdCallSegmentAssociation(35) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes35,EncLen35} =  case Cindex35 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex35, [<<159,34>>])
       end,

%%-------------------------------------------------
%% attribute uSIServiceIndicator(36)   External INCS3datatypes:USIServiceIndicator OPTIONAL
%%-------------------------------------------------
   {EncBytes36,EncLen36} =  case Cindex36 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_USIServiceIndicator'(Cindex36, [<<191,35>>])
       end,

%%-------------------------------------------------
%% attribute uSIInformation(37) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes37,EncLen37} =  case Cindex37 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex37, [<<159,36>>])
       end,

%%-------------------------------------------------
%% attribute carrier(38) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes38,EncLen38} =  case Cindex38 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex38, [<<159,37>>])
       end,

%%-------------------------------------------------
%% attribute cCSS(39) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
   {EncBytes39,EncLen39} =  case Cindex39 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_boolean(Cindex39, [<<159,38>>])
       end,

%%-------------------------------------------------
%% attribute vPNIndicator(40) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
   {EncBytes40,EncLen40} =  case Cindex40 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_boolean(Cindex40, [<<159,39>>])
       end,

%%-------------------------------------------------
%% attribute cNInfo(41) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes41,EncLen41} =  case Cindex41 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex41, [<<159,40>>])
       end,

%%-------------------------------------------------
%% attribute callReference(42) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes42,EncLen42} =  case Cindex42 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex42, [<<159,41>>])
       end,

%%-------------------------------------------------
%% attribute routingNumber(43) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes43,EncLen43} =  case Cindex43 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex43, [<<159,42>>])
       end,

%%-------------------------------------------------
%% attribute aTMTrafficDescriptor(44) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes44,EncLen44} =  case Cindex44 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex44, [<<159,43>>])
       end,

%%-------------------------------------------------
%% attribute qoSParameter(45) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes45,EncLen45} =  case Cindex45 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex45, [<<159,45>>])
       end,

%%-------------------------------------------------
%% attribute callingGeodeticLocation(46) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes46,EncLen46} =  case Cindex46 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex46, [<<159,46>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10, EncBytes11, EncBytes12, EncBytes13, EncBytes14, EncBytes15, EncBytes16, EncBytes17, EncBytes18, EncBytes19, EncBytes20, EncBytes21, EncBytes22, EncBytes23, EncBytes24, EncBytes25, EncBytes26, EncBytes27, EncBytes28, EncBytes29, EncBytes30, EncBytes31, EncBytes32, EncBytes33, EncBytes34, EncBytes35, EncBytes36, EncBytes37, EncBytes38, EncBytes39, EncBytes40, EncBytes41, EncBytes42, EncBytes43, EncBytes44, EncBytes45, EncBytes46],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10 + EncLen11 + EncLen12 + EncLen13 + EncLen14 + EncLen15 + EncLen16 + EncLen17 + EncLen18 + EncLen19 + EncLen20 + EncLen21 + EncLen22 + EncLen23 + EncLen24 + EncLen25 + EncLen26 + EncLen27 + EncLen28 + EncLen29 + EncLen30 + EncLen31 + EncLen32 + EncLen33 + EncLen34 + EncLen35 + EncLen36 + EncLen37 + EncLen38 + EncLen39 + EncLen40 + EncLen41 + EncLen42 + EncLen43 + EncLen44 + EncLen45 + EncLen46,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_InitialDPArg'(Tlv) ->
   'dec_InitialDPArg'(Tlv, [16]).

'dec_InitialDPArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute serviceKey(1) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {begin
Val1 = decode_integer(V1, []),
if 0 =< Val1, Val1 =< 2147483647 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute dialledDigits(2)   External ACPdatatypes:CalledPartyNumber OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'ACPdatatypes':'dec_CalledPartyNumber'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute calledPartyNumber(3)   External ACPdatatypes:CalledPartyNumber OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'ACPdatatypes':'dec_CalledPartyNumber'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute callingPartyNumber(4)   External ACPdatatypes:CallingPartyNumber OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'ACPdatatypes':'dec_CallingPartyNumber'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute callingPartyBusinessGroupID(5) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {decode_octet_string(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute callingPartysCategory(6) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {begin
Val2 = decode_octet_string(V6, []),
C1 = byte_size(Val2),
if C1 =:= 1 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute callingPartySubaddress(7) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {begin
Val3 = decode_octet_string(V7, []),
C2 = byte_size(Val3),
if 1 =< C2, C2 =< 27 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

%%-------------------------------------------------
%% attribute cGEncountered(8) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term8,Tlv9} = case Tlv8 of
[{131079,V8}|TempTlv9] ->
    {case decode_integer(V8, []) of
0 -> noCGencountered;
1 -> manualCGencountered;
2 -> sCPOverload;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end, TempTlv9};
    _ ->
        { asn1_NOVALUE, Tlv8}
end,

%%-------------------------------------------------
%% attribute iPSSPCapabilities(9) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term9,Tlv10} = case Tlv9 of
[{131080,V9}|TempTlv10] ->
    {begin
Val4 = decode_octet_string(V9, []),
C3 = byte_size(Val4),
if 1 =< C3, C3 =< 27 ->
Val4;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv10};
    _ ->
        { asn1_NOVALUE, Tlv9}
end,

%%-------------------------------------------------
%% attribute iPAvailable(10) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term10,Tlv11} = case Tlv10 of
[{131081,V10}|TempTlv11] ->
    {begin
Val5 = decode_octet_string(V10, []),
C4 = byte_size(Val5),
if 1 =< C4, C4 =< 27 ->
Val5;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv11};
    _ ->
        { asn1_NOVALUE, Tlv10}
end,

%%-------------------------------------------------
%% attribute locationNumber(11) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term11,Tlv12} = case Tlv11 of
[{131082,V11}|TempTlv12] ->
    {begin
Val6 = decode_octet_string(V11, []),
C5 = byte_size(Val6),
if 1 =< C5, C5 =< 27 ->
Val6;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv12};
    _ ->
        { asn1_NOVALUE, Tlv11}
end,

%%-------------------------------------------------
%% attribute miscCallInfo(12)   External INCS3opsargs:MiscCallInfo OPTIONAL
%%-------------------------------------------------
{Term12,Tlv13} = case Tlv12 of
[{131083,V12}|TempTlv13] ->
    {'dec_MiscCallInfo'(V12, []), TempTlv13};
    _ ->
        { asn1_NOVALUE, Tlv12}
end,

%%-------------------------------------------------
%% attribute originalCalledPartyID(13) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term13,Tlv14} = case Tlv13 of
[{131084,V13}|TempTlv14] ->
    {begin
Val7 = decode_octet_string(V13, []),
C6 = byte_size(Val7),
if 1 =< C6, C6 =< 15 ->
Val7;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv14};
    _ ->
        { asn1_NOVALUE, Tlv13}
end,

%%-------------------------------------------------
%% attribute serviceProfileIdentifier(14) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term14,Tlv15} = case Tlv14 of
[{131085,V14}|TempTlv15] ->
    {decode_octet_string(V14, []), TempTlv15};
    _ ->
        { asn1_NOVALUE, Tlv14}
end,

%%-------------------------------------------------
%% attribute terminalType(15) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term15,Tlv16} = case Tlv15 of
[{131086,V15}|TempTlv16] ->
    {case decode_integer(V15, []) of
0 -> unknown;
1 -> dialPulse;
2 -> dtmf;
3 -> isdn;
4 -> isdnNoDtmf;
16 -> spare;
Default2 -> exit({error,{asn1,{illegal_enumerated,Default2}}})
end, TempTlv16};
    _ ->
        { asn1_NOVALUE, Tlv15}
end,

%%-------------------------------------------------
%% attribute extensions(16)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term16,Tlv17} = case Tlv16 of
[{131087,V16}|TempTlv17] ->
    {'INCS3datatypes':'dec_Extensions'(V16, []), TempTlv17};
    _ ->
        { asn1_NOVALUE, Tlv16}
end,

%%-------------------------------------------------
%% attribute triggerType(17) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term17,Tlv18} = case Tlv17 of
[{131088,V17}|TempTlv18] ->
    {case decode_integer(V17, []) of
0 -> featureActivation;
1 -> verticalServiceCode;
2 -> customizedAccess;
3 -> customizedIntercom;
12 -> emergencyService;
13 -> aFR;
14 -> sharedIOTrunk;
17 -> offHookDelay;
18 -> channelSetupPRI;
25 -> tNoAnswer;
26 -> tBusy;
27 -> oCalledPartyBusy;
29 -> oNoAnswer;
30 -> originationAttemptAuthorized;
31 -> oAnswer;
32 -> oDisconnect;
33 -> termAttemptAuthorized;
34 -> tAnswer;
35 -> tDisconnect;
Default3 -> exit({error,{asn1,{illegal_enumerated,Default3}}})
end, TempTlv18};
    _ ->
        { asn1_NOVALUE, Tlv17}
end,

%%-------------------------------------------------
%% attribute highLayerCompatibility(18) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term18,Tlv19} = case Tlv18 of
[{131095,V18}|TempTlv19] ->
    {begin
Val8 = decode_octet_string(V18, []),
C7 = byte_size(Val8),
if C7 =:= 2 ->
Val8;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv19};
    _ ->
        { asn1_NOVALUE, Tlv18}
end,

%%-------------------------------------------------
%% attribute serviceInteractionIndicators(19) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term19,Tlv20} = case Tlv19 of
[{131096,V19}|TempTlv20] ->
    {begin
Val9 = decode_octet_string(V19, []),
C8 = byte_size(Val9),
if 1 =< C8, C8 =< 5 ->
Val9;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv20};
    _ ->
        { asn1_NOVALUE, Tlv19}
end,

%%-------------------------------------------------
%% attribute additionalCallingPartyNumber(20) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term20,Tlv21} = case Tlv20 of
[{131097,V20}|TempTlv21] ->
    {begin
Val10 = decode_octet_string(V20, []),
C9 = byte_size(Val10),
if 1 =< C9, C9 =< 27 ->
Val10;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv21};
    _ ->
        { asn1_NOVALUE, Tlv20}
end,

%%-------------------------------------------------
%% attribute forwardCallIndicators(21) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term21,Tlv22} = case Tlv21 of
[{131098,V21}|TempTlv22] ->
    {begin
Val11 = decode_octet_string(V21, []),
C10 = byte_size(Val11),
if C10 =:= 2 ->
Val11;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv22};
    _ ->
        { asn1_NOVALUE, Tlv21}
end,

%%-------------------------------------------------
%% attribute bearerCapability(22)   External INCS3datatypes:BearerCapability OPTIONAL
%%-------------------------------------------------
{Term22,Tlv23} = case Tlv22 of
[{131099,V22}|TempTlv23] ->
    {'INCS3datatypes':'dec_BearerCapability'(V22, []), TempTlv23};
    _ ->
        { asn1_NOVALUE, Tlv22}
end,

%%-------------------------------------------------
%% attribute eventTypeBCSM(23) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term23,Tlv24} = case Tlv23 of
[{131100,V23}|TempTlv24] ->
    {case decode_integer(V23, []) of
1 -> origAttemptAuthorized;
2 -> collectedInfo;
3 -> analysedInformation;
4 -> routeSelectFailure;
5 -> oCalledPartyBusy;
6 -> oNoAnswer;
7 -> oAnswer;
8 -> oMidCall;
9 -> oDisconnect;
10 -> oAbandon;
12 -> termAttemptAuthorized;
13 -> tBusy;
14 -> tNoAnswer;
15 -> tAnswer;
16 -> tMidCall;
17 -> tDisconnect;
18 -> tAbandon;
19 -> oTermSeized;
20 -> oSuspend;
21 -> tSuspend;
22 -> origAttempt;
23 -> termAttempt;
24 -> oReAnswer;
25 -> tReAnswer;
26 -> facilitySelectedAndAvailable;
27 -> callAccepted;
28 -> authorizeRouteFailure;
29 -> originationDenied;
30 -> terminationDenied;
Default4 -> exit({error,{asn1,{illegal_enumerated,Default4}}})
end, TempTlv24};
    _ ->
        { asn1_NOVALUE, Tlv23}
end,

%%-------------------------------------------------
%% attribute redirectingPartyID(24) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term24,Tlv25} = case Tlv24 of
[{131101,V24}|TempTlv25] ->
    {begin
Val12 = decode_octet_string(V24, []),
C11 = byte_size(Val12),
if 1 =< C11, C11 =< 27 ->
Val12;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv25};
    _ ->
        { asn1_NOVALUE, Tlv24}
end,

%%-------------------------------------------------
%% attribute redirectionInformation(25) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term25,Tlv26} = case Tlv25 of
[{131102,V25}|TempTlv26] ->
    {begin
Val13 = decode_octet_string(V25, []),
C12 = byte_size(Val13),
if C12 =:= 2 ->
Val13;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv26};
    _ ->
        { asn1_NOVALUE, Tlv25}
end,

%%-------------------------------------------------
%% attribute cause(26) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term26,Tlv27} = case Tlv26 of
[{131089,V26}|TempTlv27] ->
    {case decode_integer(V26, []) of
0 -> normal;
1 -> originationDenied;
2 -> collectDigits;
3 -> authorisationFailure;
4 -> bPtyAlerted;
5 -> noIndication;
6 -> aPtyAbandon;
7 -> invalidCollectedInformation;
8 -> collectInformationFailure;
9 -> aPtyDisc;
10 -> bPtyDisc;
11 -> routeSelectFailure;
12 -> oNoAnswer;
13 -> terminationDenied;
14 -> notReachable;
15 -> bPtyNoAnswer;
16 -> bPtyBusyUDUB;
17 -> bPtyBusyNDUB;
18 -> ss7Failure;
19 -> calledPartyRejected;
20 -> tException;
21 -> routeFailure1;
22 -> routeFailure2;
23 -> ssActivating;
24 -> conversationTimeout;
25 -> noCircuitAvailable;
26 -> coreNotification;
27 -> unsupportedMedia;
28 -> numberIncomplete;
29 -> invalidNumber;
30 -> unassignedNumber;
31 -> doNotDisturb;
32 -> externalControlled;
33 -> systemFailure;
34 -> applicationNotification;
35 -> referOk;
36 -> referFailure;
37 -> hole;
38 -> hold;
Default5 -> exit({error,{asn1,{illegal_enumerated,Default5}}})
end, TempTlv27};
    _ ->
        { asn1_NOVALUE, Tlv26}
end,

%%-------------------------------------------------
%% attribute componentType(27) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term27,Tlv28} = case Tlv27 of
[{131090,V27}|TempTlv28] ->
    {case decode_integer(V27, []) of
0 -> anny;
1 -> invoke;
2 -> rResult;
3 -> rError;
4 -> rReject;
Default6 -> exit({error,{asn1,{illegal_enumerated,Default6}}})
end, TempTlv28};
    _ ->
        { asn1_NOVALUE, Tlv27}
end,

%%-------------------------------------------------
%% attribute component(28)   External INCS3datatypes:Component OPTIONAL
%%-------------------------------------------------
{Term28,Tlv29} = case Tlv28 of
[{131091,V28}|TempTlv29] ->
    {'INCS3datatypes':'dec_Component'(V28, []), TempTlv29};
    _ ->
        { asn1_NOVALUE, Tlv28}
end,

%%-------------------------------------------------
%% attribute componentCorrelationID(29) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term29,Tlv30} = case Tlv29 of
[{131092,V29}|TempTlv30] ->
    {decode_integer(V29, []), TempTlv30};
    _ ->
        { asn1_NOVALUE, Tlv29}
end,

%%-------------------------------------------------
%% attribute iSDNAccessRelatedInformation(30) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term30,Tlv31} = case Tlv30 of
[{131093,V30}|TempTlv31] ->
    {begin
Val14 = decode_octet_string(V30, []),
C13 = byte_size(Val14),
if 1 =< C13, C13 =< 10 ->
Val14;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv31};
    _ ->
        { asn1_NOVALUE, Tlv30}
end,

%%-------------------------------------------------
%% attribute iNServiceCompatibilityIndication(31)   External INCS3datatypes:INServiceCompatibilityIndication OPTIONAL
%%-------------------------------------------------
{Term31,Tlv32} = case Tlv31 of
[{131094,V31}|TempTlv32] ->
    {'INCS3datatypes':'dec_INServiceCompatibilityIndication'(V31, []), TempTlv32};
    _ ->
        { asn1_NOVALUE, Tlv31}
end,

%%-------------------------------------------------
%% attribute genericNumbers(32)   External INCS3datatypes:GenericNumbers OPTIONAL
%%-------------------------------------------------
{Term32,Tlv33} = case Tlv32 of
[{131103,V32}|TempTlv33] ->
    {'INCS3datatypes':'dec_GenericNumbers'(V32, []), TempTlv33};
    _ ->
        { asn1_NOVALUE, Tlv32}
end,

%%-------------------------------------------------
%% attribute serviceInteractionIndicatorsTwo(33)   External INCS3datatypes:ServiceInteractionIndicatorsTwo OPTIONAL
%%-------------------------------------------------
{Term33,Tlv34} = case Tlv33 of
[{131104,V33}|TempTlv34] ->
    {'INCS3datatypes':'dec_ServiceInteractionIndicatorsTwo'(V33, []), TempTlv34};
    _ ->
        { asn1_NOVALUE, Tlv33}
end,

%%-------------------------------------------------
%% attribute forwardGVNS(34) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term34,Tlv35} = case Tlv34 of
[{131105,V34}|TempTlv35] ->
    {begin
Val15 = decode_octet_string(V34, []),
C14 = byte_size(Val15),
if 1 =< C14, C14 =< 27 ->
Val15;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv35};
    _ ->
        { asn1_NOVALUE, Tlv34}
end,

%%-------------------------------------------------
%% attribute createdCallSegmentAssociation(35) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term35,Tlv36} = case Tlv35 of
[{131106,V35}|TempTlv36] ->
    {begin
Val16 = decode_integer(V35, []),
if 1 =< Val16, Val16 =< 10 ->
Val16;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv36};
    _ ->
        { asn1_NOVALUE, Tlv35}
end,

%%-------------------------------------------------
%% attribute uSIServiceIndicator(36)   External INCS3datatypes:USIServiceIndicator OPTIONAL
%%-------------------------------------------------
{Term36,Tlv37} = case Tlv36 of
[{131107,V36}|TempTlv37] ->
    {'INCS3datatypes':'dec_USIServiceIndicator'(V36, []), TempTlv37};
    _ ->
        { asn1_NOVALUE, Tlv36}
end,

%%-------------------------------------------------
%% attribute uSIInformation(37) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term37,Tlv38} = case Tlv37 of
[{131108,V37}|TempTlv38] ->
    {begin
Val17 = decode_octet_string(V37, []),
C15 = byte_size(Val17),
if 1 =< C15, C15 =< 5 ->
Val17;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv38};
    _ ->
        { asn1_NOVALUE, Tlv37}
end,

%%-------------------------------------------------
%% attribute carrier(38) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term38,Tlv39} = case Tlv38 of
[{131109,V38}|TempTlv39] ->
    {begin
Val18 = decode_octet_string(V38, []),
C16 = byte_size(Val18),
if 3 =< C16, C16 =< 10 ->
Val18;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv39};
    _ ->
        { asn1_NOVALUE, Tlv38}
end,

%%-------------------------------------------------
%% attribute cCSS(39) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
{Term39,Tlv40} = case Tlv39 of
[{131110,V39}|TempTlv40] ->
    {decode_boolean(V39, []), TempTlv40};
    _ ->
        { asn1_NOVALUE, Tlv39}
end,

%%-------------------------------------------------
%% attribute vPNIndicator(40) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
{Term40,Tlv41} = case Tlv40 of
[{131111,V40}|TempTlv41] ->
    {decode_boolean(V40, []), TempTlv41};
    _ ->
        { asn1_NOVALUE, Tlv40}
end,

%%-------------------------------------------------
%% attribute cNInfo(41) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term41,Tlv42} = case Tlv41 of
[{131112,V41}|TempTlv42] ->
    {begin
Val19 = decode_octet_string(V41, []),
C17 = byte_size(Val19),
if 1 =< C17, C17 =< 13 ->
Val19;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv42};
    _ ->
        { asn1_NOVALUE, Tlv41}
end,

%%-------------------------------------------------
%% attribute callReference(42) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term42,Tlv43} = case Tlv42 of
[{131113,V42}|TempTlv43] ->
    {decode_integer(V42, []), TempTlv43};
    _ ->
        { asn1_NOVALUE, Tlv42}
end,

%%-------------------------------------------------
%% attribute routingNumber(43) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term43,Tlv44} = case Tlv43 of
[{131114,V43}|TempTlv44] ->
    {begin
Val20 = decode_octet_string(V43, []),
C18 = byte_size(Val20),
if 1 =< C18, C18 =< 27 ->
Val20;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv44};
    _ ->
        { asn1_NOVALUE, Tlv43}
end,

%%-------------------------------------------------
%% attribute aTMTrafficDescriptor(44) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term44,Tlv45} = case Tlv44 of
[{131115,V44}|TempTlv45] ->
    {begin
Val21 = decode_octet_string(V44, []),
C19 = byte_size(Val21),
if 1 =< C19, C19 =< 27 ->
Val21;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv45};
    _ ->
        { asn1_NOVALUE, Tlv44}
end,

%%-------------------------------------------------
%% attribute qoSParameter(45) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term45,Tlv46} = case Tlv45 of
[{131117,V45}|TempTlv46] ->
    {begin
Val22 = decode_octet_string(V45, []),
C20 = byte_size(Val22),
if 1 =< C20, C20 =< 5 ->
Val22;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv46};
    _ ->
        { asn1_NOVALUE, Tlv45}
end,

%%-------------------------------------------------
%% attribute callingGeodeticLocation(46) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term46,Tlv47} = case Tlv46 of
[{131118,V46}|TempTlv47] ->
    {begin
Val23 = decode_octet_string(V46, []),
C21 = byte_size(Val23),
if 1 =< C21, C21 =< 10 ->
Val23;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv47};
    _ ->
        { asn1_NOVALUE, Tlv46}
end,

case Tlv47 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv47}}}) % extra fields not allowed
end,
   {'InitialDPArg', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9, Term10, Term11, Term12, Term13, Term14, Term15, Term16, Term17, Term18, Term19, Term20, Term21, Term22, Term23, Term24, Term25, Term26, Term27, Term28, Term29, Term30, Term31, Term32, Term33, Term34, Term35, Term36, Term37, Term38, Term39, Term40, Term41, Term42, Term43, Term44, Term45, Term46}.



%%================================
%%  InitiateCallAttemptArg
%%================================
'enc_InitiateCallAttemptArg'(Val) ->
    'enc_InitiateCallAttemptArg'(Val, [<<48>>]).

'enc_InitiateCallAttemptArg'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8, Cindex9, Cindex10, Cindex11, Cindex12, Cindex13, Cindex14, Cindex15, Cindex16} = Val,

%%-------------------------------------------------
%% attribute destinationRoutingAddress(1)   External INCS3datatypes:DestinationRoutingAddress
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'INCS3datatypes':'enc_DestinationRoutingAddress'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute alertingPattern(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute iSDNAccessRelatedInformation(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute travellingClassMark(4) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex4, [<<131>>])
       end,

%%-------------------------------------------------
%% attribute extensions(5)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Extensions'(Cindex5, [<<164>>])
       end,

%%-------------------------------------------------
%% attribute serviceInteractionIndicators(6) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex6, [<<157>>])
       end,

%%-------------------------------------------------
%% attribute callingPartyNumber(7)   External ACPdatatypes:CallingPartyNumber OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'ACPdatatypes':'enc_CallingPartyNumber'(Cindex7, [<<190>>])
       end,

%%-------------------------------------------------
%% attribute legToBeCreated(8)   External INCS3opsargs:LegID DEFAULT = {sendingSideID,<<1>>}
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case Cindex8 of
         asn1_DEFAULT -> {<<>>,0};
         {sendingSideID,<<1>>} -> {<<>>,0};
         _ ->
            'enc_LegID'(Cindex8, [<<165>>])
       end,

%%-------------------------------------------------
%% attribute newCallSegment(9) with type INTEGER DEFAULT = 1
%%-------------------------------------------------
   {EncBytes9,EncLen9} =  case Cindex9 of
         asn1_DEFAULT -> {<<>>,0};
         1 -> {<<>>,0};
         _ ->
            encode_integer(Cindex9, [<<134>>])
       end,

%%-------------------------------------------------
%% attribute iNServiceCompatibilityResponse(10)   External INCS3datatypes:INServiceCompatibilityResponse OPTIONAL
%%-------------------------------------------------
   {EncBytes10,EncLen10} =  case Cindex10 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_INServiceCompatibilityResponse'(Cindex10, [<<167>>])
       end,

%%-------------------------------------------------
%% attribute serviceInteractionIndicatorsTwo(11)   External INCS3datatypes:ServiceInteractionIndicatorsTwo OPTIONAL
%%-------------------------------------------------
   {EncBytes11,EncLen11} =  case Cindex11 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_ServiceInteractionIndicatorsTwo'(Cindex11, [<<168>>])
       end,

%%-------------------------------------------------
%% attribute correlationID(12) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes12,EncLen12} =  case Cindex12 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex12, [<<137>>])
       end,

%%-------------------------------------------------
%% attribute scfID(13) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes13,EncLen13} =  case Cindex13 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex13, [<<138>>])
       end,

%%-------------------------------------------------
%% attribute carrier(14) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes14,EncLen14} =  case Cindex14 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex14, [<<139>>])
       end,

%%-------------------------------------------------
%% attribute callReference(15) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes15,EncLen15} =  case Cindex15 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex15, [<<140>>])
       end,

%%-------------------------------------------------
%% attribute calledDirectoryNumber(16) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes16,EncLen16} =  case Cindex16 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex16, [<<141>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10, EncBytes11, EncBytes12, EncBytes13, EncBytes14, EncBytes15, EncBytes16],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10 + EncLen11 + EncLen12 + EncLen13 + EncLen14 + EncLen15 + EncLen16,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_InitiateCallAttemptArg'(Tlv) ->
   'dec_InitiateCallAttemptArg'(Tlv, [16]).

'dec_InitiateCallAttemptArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute destinationRoutingAddress(1)   External INCS3datatypes:DestinationRoutingAddress
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'INCS3datatypes':'dec_DestinationRoutingAddress'(V1, [131072]),

%%-------------------------------------------------
%% attribute alertingPattern(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
Val1 = decode_octet_string(V2, []),
C1 = byte_size(Val1),
if C1 =:= 3 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute iSDNAccessRelatedInformation(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {begin
Val2 = decode_octet_string(V3, []),
C2 = byte_size(Val2),
if 1 =< C2, C2 =< 10 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute travellingClassMark(4) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {begin
Val3 = decode_octet_string(V4, []),
C3 = byte_size(Val3),
if 1 =< C3, C3 =< 27 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute extensions(5)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {'INCS3datatypes':'dec_Extensions'(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute serviceInteractionIndicators(6) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131101,V6}|TempTlv7] ->
    {begin
Val4 = decode_octet_string(V6, []),
C4 = byte_size(Val4),
if 1 =< C4, C4 =< 5 ->
Val4;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute callingPartyNumber(7)   External ACPdatatypes:CallingPartyNumber OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131102,V7}|TempTlv8] ->
    {'ACPdatatypes':'dec_CallingPartyNumber'(V7, []), TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

%%-------------------------------------------------
%% attribute legToBeCreated(8)   External INCS3opsargs:LegID DEFAULT = {sendingSideID,<<1>>}
%%-------------------------------------------------
{Term8,Tlv9} = case Tlv8 of
[{131077,V8}|TempTlv9] ->
    {'dec_LegID'(V8, []), TempTlv9};
    _ ->
        {{sendingSideID,<<1>>},Tlv8}
end,

%%-------------------------------------------------
%% attribute newCallSegment(9) with type INTEGER DEFAULT = 1
%%-------------------------------------------------
{Term9,Tlv10} = case Tlv9 of
[{131078,V9}|TempTlv10] ->
    {begin
Val5 = decode_integer(V9, []),
if 1 =< Val5, Val5 =< 10 ->
Val5;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv10};
    _ ->
        {1,Tlv9}
end,

%%-------------------------------------------------
%% attribute iNServiceCompatibilityResponse(10)   External INCS3datatypes:INServiceCompatibilityResponse OPTIONAL
%%-------------------------------------------------
{Term10,Tlv11} = case Tlv10 of
[{131079,V10}|TempTlv11] ->
    {'INCS3datatypes':'dec_INServiceCompatibilityResponse'(V10, []), TempTlv11};
    _ ->
        { asn1_NOVALUE, Tlv10}
end,

%%-------------------------------------------------
%% attribute serviceInteractionIndicatorsTwo(11)   External INCS3datatypes:ServiceInteractionIndicatorsTwo OPTIONAL
%%-------------------------------------------------
{Term11,Tlv12} = case Tlv11 of
[{131080,V11}|TempTlv12] ->
    {'INCS3datatypes':'dec_ServiceInteractionIndicatorsTwo'(V11, []), TempTlv12};
    _ ->
        { asn1_NOVALUE, Tlv11}
end,

%%-------------------------------------------------
%% attribute correlationID(12) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term12,Tlv13} = case Tlv12 of
[{131081,V12}|TempTlv13] ->
    {begin
Val6 = decode_octet_string(V12, []),
C5 = byte_size(Val6),
if 1 =< C5, C5 =< 27 ->
Val6;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv13};
    _ ->
        { asn1_NOVALUE, Tlv12}
end,

%%-------------------------------------------------
%% attribute scfID(13) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term13,Tlv14} = case Tlv13 of
[{131082,V13}|TempTlv14] ->
    {begin
Val7 = decode_octet_string(V13, []),
C6 = byte_size(Val7),
if 1 =< C6, C6 =< 27 ->
Val7;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv14};
    _ ->
        { asn1_NOVALUE, Tlv13}
end,

%%-------------------------------------------------
%% attribute carrier(14) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term14,Tlv15} = case Tlv14 of
[{131083,V14}|TempTlv15] ->
    {begin
Val8 = decode_octet_string(V14, []),
C7 = byte_size(Val8),
if 3 =< C7, C7 =< 10 ->
Val8;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv15};
    _ ->
        { asn1_NOVALUE, Tlv14}
end,

%%-------------------------------------------------
%% attribute callReference(15) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term15,Tlv16} = case Tlv15 of
[{131084,V15}|TempTlv16] ->
    {decode_integer(V15, []), TempTlv16};
    _ ->
        { asn1_NOVALUE, Tlv15}
end,

%%-------------------------------------------------
%% attribute calledDirectoryNumber(16) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term16,Tlv17} = case Tlv16 of
[{131085,V16}|TempTlv17] ->
    {begin
Val9 = decode_octet_string(V16, []),
C8 = byte_size(Val9),
if 1 =< C8, C8 =< 27 ->
Val9;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv17};
    _ ->
        { asn1_NOVALUE, Tlv16}
end,

case Tlv17 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv17}}}) % extra fields not allowed
end,
   {'InitiateCallAttemptArg', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9, Term10, Term11, Term12, Term13, Term14, Term15, Term16}.



%%================================
%%  ManageTriggerDataArg
%%================================
'enc_ManageTriggerDataArg'(Val) ->
    'enc_ManageTriggerDataArg'(Val, [<<48>>]).

'enc_ManageTriggerDataArg'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5} = Val,

%%-------------------------------------------------
%% attribute actionIndicator(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
activate -> encode_tags([<<128>>], [1], 1);
deactivate -> encode_tags([<<128>>], [2], 1);
retrieve -> encode_tags([<<128>>], [3], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute triggerDataIdentifier(2) with type CHOICE
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_ManageTriggerDataArg_triggerDataIdentifier'(Cindex2, []),

%%-------------------------------------------------
%% attribute registratorIdentifier(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute extensions(4)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Extensions'(Cindex4, [<<163>>])
       end,

%%-------------------------------------------------
%% attribute tDPIdentifier(5)   External INCS3datatypes:TDPIdentifier OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_TDPIdentifier'(Cindex5, [<<164>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ManageTriggerDataArg_triggerDataIdentifier
%%================================
'enc_ManageTriggerDataArg_triggerDataIdentifier'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      profileAndDP ->
         'INCS3datatypes':'enc_TriggerDataIdentifier'(element(2,Val), [<<161>>]);
      profile ->
         'INCS3datatypes':'enc_ProfileIdentifier'(element(2,Val), [<<165>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_ManageTriggerDataArg'(Tlv) ->
   'dec_ManageTriggerDataArg'(Tlv, [16]).

'dec_ManageTriggerDataArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute actionIndicator(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
1 -> activate;
2 -> deactivate;
3 -> retrieve;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute triggerDataIdentifier(2) with type CHOICE
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_ManageTriggerDataArg_triggerDataIdentifier'(V2, []),

%%-------------------------------------------------
%% attribute registratorIdentifier(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {decode_octet_string(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute extensions(4)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'INCS3datatypes':'dec_Extensions'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute tDPIdentifier(5)   External INCS3datatypes:TDPIdentifier OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {'INCS3datatypes':'dec_TDPIdentifier'(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

case Tlv6 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv6}}}) % extra fields not allowed
end,
   {'ManageTriggerDataArg', Term1, Term2, Term3, Term4, Term5}.

'dec_ManageTriggerDataArg_triggerDataIdentifier'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'profileAndDP'
    {131073, V1} -> 
        {profileAndDP, 'INCS3datatypes':'dec_TriggerDataIdentifier'(V1, [])};


%% 'profile'
    {131077, V1} -> 
        {profile, 'INCS3datatypes':'dec_ProfileIdentifier'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  ManageTriggerDataResultArg
%%================================
'enc_ManageTriggerDataResultArg'(Val) ->
    'enc_ManageTriggerDataResultArg'(Val, []).

'enc_ManageTriggerDataResultArg'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      oneTriggerResult ->
         'enc_ManageTriggerDataResultArg_oneTriggerResult'(element(2,Val), [<<48>>]);
      severalTriggerResult ->
         'enc_ManageTriggerDataResultArg_severalTriggerResult'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  ManageTriggerDataResultArg_oneTriggerResult
%%================================
'enc_ManageTriggerDataResultArg_oneTriggerResult'(Val, TagIn) ->
   {_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute actionPerformed(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
activated -> encode_tags([<<128>>], [1], 1);
deactivated -> encode_tags([<<128>>], [2], 1);
alreadyActive -> encode_tags([<<128>>], [3], 1);
alreadyInactive -> encode_tags([<<128>>], [4], 1);
isActive -> encode_tags([<<128>>], [5], 1);
isInactive -> encode_tags([<<128>>], [6], 1);
tDPunknown -> encode_tags([<<128>>], [7], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute extensions(2)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Extensions'(Cindex2, [<<161>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ManageTriggerDataResultArg_severalTriggerResult
%%================================
'enc_ManageTriggerDataResultArg_severalTriggerResult'(Val, TagIn) ->
   {_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute results(1)   External INCS3datatypes:TriggerResults
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'INCS3datatypes':'enc_TriggerResults'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute extensions(2)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Extensions'(Cindex2, [<<161>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_ManageTriggerDataResultArg'(Tlv) ->
   'dec_ManageTriggerDataResultArg'(Tlv, []).

'dec_ManageTriggerDataResultArg'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'oneTriggerResult'
    {16, V1} -> 
        {oneTriggerResult, 'dec_ManageTriggerDataResultArg_oneTriggerResult'(V1, [])};


%% 'severalTriggerResult'
    {131073, V1} -> 
        {severalTriggerResult, 'dec_ManageTriggerDataResultArg_severalTriggerResult'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.
'dec_ManageTriggerDataResultArg_oneTriggerResult'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute actionPerformed(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
1 -> activated;
2 -> deactivated;
3 -> alreadyActive;
4 -> alreadyInactive;
5 -> isActive;
6 -> isInactive;
7 -> tDPunknown;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensions(2)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'INCS3datatypes':'dec_Extensions'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'ManageTriggerDataResultArg_oneTriggerResult', Term1, Term2}.

'dec_ManageTriggerDataResultArg_severalTriggerResult'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute results(1)   External INCS3datatypes:TriggerResults
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'INCS3datatypes':'dec_TriggerResults'(V1, [131072]),

%%-------------------------------------------------
%% attribute extensions(2)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'INCS3datatypes':'dec_Extensions'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'ManageTriggerDataResultArg_severalTriggerResult', Term1, Term2}.



%%================================
%%  MergeCallSegmentsArg
%%================================
'enc_MergeCallSegmentsArg'(Val) ->
    'enc_MergeCallSegmentsArg'(Val, [<<48>>]).

'enc_MergeCallSegmentsArg'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute sourceCallSegment(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute targetCallSegment(2) with type INTEGER DEFAULT = 1
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_DEFAULT -> {<<>>,0};
         1 -> {<<>>,0};
         _ ->
            encode_integer(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute extensions(3)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Extensions'(Cindex3, [<<162>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_MergeCallSegmentsArg'(Tlv) ->
   'dec_MergeCallSegmentsArg'(Tlv, [16]).

'dec_MergeCallSegmentsArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute sourceCallSegment(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 1 =< Val1, Val1 =< 10 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute targetCallSegment(2) with type INTEGER DEFAULT = 1
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
Val2 = decode_integer(V2, []),
if 1 =< Val2, Val2 =< 10 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv3};
    _ ->
        {1,Tlv2}
end,

%%-------------------------------------------------
%% attribute extensions(3)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'INCS3datatypes':'dec_Extensions'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'MergeCallSegmentsArg', Term1, Term2, Term3}.



%%================================
%%  MoveCallSegmentsArg
%%================================
'enc_MoveCallSegmentsArg'(Val) ->
    'enc_MoveCallSegmentsArg'(Val, [<<48>>]).

'enc_MoveCallSegmentsArg'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute targetCallSegmentAssociation(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute callSegments(2) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_MoveCallSegmentsArg_callSegments'(Cindex2, [<<161>>]),

%%-------------------------------------------------
%% attribute legs(3)   External INCS3datatypes:ExportLegsType
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'INCS3datatypes':'enc_ExportLegsType'(Cindex3, [<<162>>]),

%%-------------------------------------------------
%% attribute extensions(4)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Extensions'(Cindex4, [<<163>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  MoveCallSegmentsArg_callSegments
%%================================
'enc_MoveCallSegmentsArg_callSegments'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_MoveCallSegmentsArg_callSegments_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_MoveCallSegmentsArg_callSegments_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_MoveCallSegmentsArg_callSegments_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_MoveCallSegmentsArg_callSegments_SEQOF'(H, [<<48>>]),
   'enc_MoveCallSegmentsArg_callSegments_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  MoveCallSegmentsArg_callSegments_SEQOF
%%================================
'enc_MoveCallSegmentsArg_callSegments_SEQOF'(Val, TagIn) ->
   {_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute sourceCallSegment(1) with type INTEGER DEFAULT = 1
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_DEFAULT -> {<<>>,0};
         1 -> {<<>>,0};
         _ ->
            encode_integer(Cindex1, [<<128>>])
       end,

%%-------------------------------------------------
%% attribute newCallSegment(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_MoveCallSegmentsArg'(Tlv) ->
   'dec_MoveCallSegmentsArg'(Tlv, [16]).

'dec_MoveCallSegmentsArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute targetCallSegmentAssociation(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 1 =< Val1, Val1 =< 10 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute callSegments(2) with type SEQUENCE OF
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_MoveCallSegmentsArg_callSegments'(V2, [131073]),

%%-------------------------------------------------
%% attribute legs(3)   External INCS3datatypes:ExportLegsType
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = 'INCS3datatypes':'dec_ExportLegsType'(V3, [131074]),

%%-------------------------------------------------
%% attribute extensions(4)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'INCS3datatypes':'dec_Extensions'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

case Tlv5 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed
end,
   {'MoveCallSegmentsArg', Term1, Term2, Term3, Term4}.

'dec_MoveCallSegmentsArg_callSegments'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_MoveCallSegmentsArg_callSegments_SEQOF'(V1, [16]) || V1 <- Tlv1].


'dec_MoveCallSegmentsArg_callSegments_SEQOF'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute sourceCallSegment(1) with type INTEGER DEFAULT = 1
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {begin
Val1 = decode_integer(V1, []),
if 1 =< Val1, Val1 =< 10 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv2};
    _ ->
        {1,Tlv1}
end,

%%-------------------------------------------------
%% attribute newCallSegment(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [131073]),
if 1 =< Val2, Val2 =< 10 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'MoveCallSegmentsArg_callSegments_SEQOF', Term1, Term2}.



%%================================
%%  MoveLegArg
%%================================
'enc_MoveLegArg'(Val) ->
    'enc_MoveLegArg'(Val, [<<48>>]).

'enc_MoveLegArg'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute legIDToMove(1)   External INCS3opsargs:LegID
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_LegID'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute targetCallSegment(2) with type INTEGER DEFAULT = 1
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_DEFAULT -> {<<>>,0};
         1 -> {<<>>,0};
         _ ->
            encode_integer(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute extensions(3)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Extensions'(Cindex3, [<<162>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_MoveLegArg'(Tlv) ->
   'dec_MoveLegArg'(Tlv, [16]).

'dec_MoveLegArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute legIDToMove(1)   External INCS3opsargs:LegID
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_LegID'(V1, [131072]),

%%-------------------------------------------------
%% attribute targetCallSegment(2) with type INTEGER DEFAULT = 1
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
Val1 = decode_integer(V2, []),
if 1 =< Val1, Val1 =< 10 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv3};
    _ ->
        {1,Tlv2}
end,

%%-------------------------------------------------
%% attribute extensions(3)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'INCS3datatypes':'dec_Extensions'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'MoveLegArg', Term1, Term2, Term3}.



%%================================
%%  OAbandonArg
%%================================
'enc_OAbandonArg'(Val) ->
    'enc_OAbandonArg'(Val, [<<48>>]).

'enc_OAbandonArg'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute dpSpecificCommonParameters(1)   External INCS3datatypes:DpSpecificCommonParameters
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'INCS3datatypes':'enc_DpSpecificCommonParameters'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute callSegmentID(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute releaseCause(3) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex3 of
normal -> encode_tags([<<130>>], [0], 1);
originationDenied -> encode_tags([<<130>>], [1], 1);
collectDigits -> encode_tags([<<130>>], [2], 1);
authorisationFailure -> encode_tags([<<130>>], [3], 1);
bPtyAlerted -> encode_tags([<<130>>], [4], 1);
noIndication -> encode_tags([<<130>>], [5], 1);
aPtyAbandon -> encode_tags([<<130>>], [6], 1);
invalidCollectedInformation -> encode_tags([<<130>>], [7], 1);
collectInformationFailure -> encode_tags([<<130>>], [8], 1);
aPtyDisc -> encode_tags([<<130>>], [9], 1);
bPtyDisc -> encode_tags([<<130>>], [10], 1);
routeSelectFailure -> encode_tags([<<130>>], [11], 1);
oNoAnswer -> encode_tags([<<130>>], [12], 1);
terminationDenied -> encode_tags([<<130>>], [13], 1);
notReachable -> encode_tags([<<130>>], [14], 1);
bPtyNoAnswer -> encode_tags([<<130>>], [15], 1);
bPtyBusyUDUB -> encode_tags([<<130>>], [16], 1);
bPtyBusyNDUB -> encode_tags([<<130>>], [17], 1);
ss7Failure -> encode_tags([<<130>>], [18], 1);
calledPartyRejected -> encode_tags([<<130>>], [19], 1);
tException -> encode_tags([<<130>>], [20], 1);
routeFailure1 -> encode_tags([<<130>>], [21], 1);
routeFailure2 -> encode_tags([<<130>>], [22], 1);
ssActivating -> encode_tags([<<130>>], [23], 1);
conversationTimeout -> encode_tags([<<130>>], [24], 1);
noCircuitAvailable -> encode_tags([<<130>>], [25], 1);
coreNotification -> encode_tags([<<130>>], [26], 1);
unsupportedMedia -> encode_tags([<<130>>], [27], 1);
numberIncomplete -> encode_tags([<<130>>], [28], 1);
invalidNumber -> encode_tags([<<130>>], [29], 1);
unassignedNumber -> encode_tags([<<130>>], [30], 1);
doNotDisturb -> encode_tags([<<130>>], [31], 1);
externalControlled -> encode_tags([<<130>>], [32], 1);
systemFailure -> encode_tags([<<130>>], [33], 1);
applicationNotification -> encode_tags([<<130>>], [34], 1);
referOk -> encode_tags([<<130>>], [35], 1);
referFailure -> encode_tags([<<130>>], [36], 1);
hole -> encode_tags([<<130>>], [37], 1);
hold -> encode_tags([<<130>>], [38], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end
       end,

%%-------------------------------------------------
%% attribute extensions(4)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Extensions'(Cindex4, [<<163>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_OAbandonArg'(Tlv) ->
   'dec_OAbandonArg'(Tlv, [16]).

'dec_OAbandonArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute dpSpecificCommonParameters(1)   External INCS3datatypes:DpSpecificCommonParameters
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'INCS3datatypes':'dec_DpSpecificCommonParameters'(V1, [131072]),

%%-------------------------------------------------
%% attribute callSegmentID(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val1 = decode_integer(V2, [131073]),
if 1 =< Val1, Val1 =< 10 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute releaseCause(3) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {case decode_integer(V3, []) of
0 -> normal;
1 -> originationDenied;
2 -> collectDigits;
3 -> authorisationFailure;
4 -> bPtyAlerted;
5 -> noIndication;
6 -> aPtyAbandon;
7 -> invalidCollectedInformation;
8 -> collectInformationFailure;
9 -> aPtyDisc;
10 -> bPtyDisc;
11 -> routeSelectFailure;
12 -> oNoAnswer;
13 -> terminationDenied;
14 -> notReachable;
15 -> bPtyNoAnswer;
16 -> bPtyBusyUDUB;
17 -> bPtyBusyNDUB;
18 -> ss7Failure;
19 -> calledPartyRejected;
20 -> tException;
21 -> routeFailure1;
22 -> routeFailure2;
23 -> ssActivating;
24 -> conversationTimeout;
25 -> noCircuitAvailable;
26 -> coreNotification;
27 -> unsupportedMedia;
28 -> numberIncomplete;
29 -> invalidNumber;
30 -> unassignedNumber;
31 -> doNotDisturb;
32 -> externalControlled;
33 -> systemFailure;
34 -> applicationNotification;
35 -> referOk;
36 -> referFailure;
37 -> hole;
38 -> hold;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute extensions(4)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'INCS3datatypes':'dec_Extensions'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

case Tlv5 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed
end,
   {'OAbandonArg', Term1, Term2, Term3, Term4}.



%%================================
%%  OAnswerArg
%%================================
'enc_OAnswerArg'(Val) ->
    'enc_OAnswerArg'(Val, [<<48>>]).

'enc_OAnswerArg'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8, Cindex9, Cindex10, Cindex11} = Val,

%%-------------------------------------------------
%% attribute dpSpecificCommonParameters(1)   External INCS3datatypes:DpSpecificCommonParameters
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'INCS3datatypes':'enc_DpSpecificCommonParameters'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute callingPartyBusinessGroupID(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute callingPartySubaddress(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute callingFacilityGroup(4)   External INCS3datatypes:FacilityGroup OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_FacilityGroup'(Cindex4, [<<163>>])
       end,

%%-------------------------------------------------
%% attribute callingFacilityGroupMember(5) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex5, [<<132>>])
       end,

%%-------------------------------------------------
%% attribute originalCalledPartyID(6) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex6, [<<133>>])
       end,

%%-------------------------------------------------
%% attribute redirectingPartyID(7) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex7, [<<134>>])
       end,

%%-------------------------------------------------
%% attribute redirectionInformation(8) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case Cindex8 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex8, [<<135>>])
       end,

%%-------------------------------------------------
%% attribute routeList(9)   External INCS3datatypes:RouteList OPTIONAL
%%-------------------------------------------------
   {EncBytes9,EncLen9} =  case Cindex9 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_RouteList'(Cindex9, [<<168>>])
       end,

%%-------------------------------------------------
%% attribute travellingClassMark(10) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes10,EncLen10} =  case Cindex10 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex10, [<<137>>])
       end,

%%-------------------------------------------------
%% attribute extensions(11)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes11,EncLen11} =  case Cindex11 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Extensions'(Cindex11, [<<170>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10, EncBytes11],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10 + EncLen11,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_OAnswerArg'(Tlv) ->
   'dec_OAnswerArg'(Tlv, [16]).

'dec_OAnswerArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute dpSpecificCommonParameters(1)   External INCS3datatypes:DpSpecificCommonParameters
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'INCS3datatypes':'dec_DpSpecificCommonParameters'(V1, [131072]),

%%-------------------------------------------------
%% attribute callingPartyBusinessGroupID(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {decode_octet_string(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute callingPartySubaddress(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {begin
Val1 = decode_octet_string(V3, []),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 27 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute callingFacilityGroup(4)   External INCS3datatypes:FacilityGroup OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'INCS3datatypes':'dec_FacilityGroup'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute callingFacilityGroupMember(5) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {decode_integer(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute originalCalledPartyID(6) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {begin
Val2 = decode_octet_string(V6, []),
C2 = byte_size(Val2),
if 1 =< C2, C2 =< 15 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute redirectingPartyID(7) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {begin
Val3 = decode_octet_string(V7, []),
C3 = byte_size(Val3),
if 1 =< C3, C3 =< 27 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

%%-------------------------------------------------
%% attribute redirectionInformation(8) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term8,Tlv9} = case Tlv8 of
[{131079,V8}|TempTlv9] ->
    {begin
Val4 = decode_octet_string(V8, []),
C4 = byte_size(Val4),
if C4 =:= 2 ->
Val4;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv9};
    _ ->
        { asn1_NOVALUE, Tlv8}
end,

%%-------------------------------------------------
%% attribute routeList(9)   External INCS3datatypes:RouteList OPTIONAL
%%-------------------------------------------------
{Term9,Tlv10} = case Tlv9 of
[{131080,V9}|TempTlv10] ->
    {'INCS3datatypes':'dec_RouteList'(V9, []), TempTlv10};
    _ ->
        { asn1_NOVALUE, Tlv9}
end,

%%-------------------------------------------------
%% attribute travellingClassMark(10) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term10,Tlv11} = case Tlv10 of
[{131081,V10}|TempTlv11] ->
    {begin
Val5 = decode_octet_string(V10, []),
C5 = byte_size(Val5),
if 1 =< C5, C5 =< 27 ->
Val5;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv11};
    _ ->
        { asn1_NOVALUE, Tlv10}
end,

%%-------------------------------------------------
%% attribute extensions(11)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term11,Tlv12} = case Tlv11 of
[{131082,V11}|TempTlv12] ->
    {'INCS3datatypes':'dec_Extensions'(V11, []), TempTlv12};
    _ ->
        { asn1_NOVALUE, Tlv11}
end,

case Tlv12 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv12}}}) % extra fields not allowed
end,
   {'OAnswerArg', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9, Term10, Term11}.



%%================================
%%  OCalledPartyBusyArg
%%================================
'enc_OCalledPartyBusyArg'(Val) ->
    'enc_OCalledPartyBusyArg'(Val, [<<48>>]).

'enc_OCalledPartyBusyArg'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8, Cindex9, Cindex10, Cindex11, Cindex12, Cindex13, Cindex14} = Val,

%%-------------------------------------------------
%% attribute dpSpecificCommonParameters(1)   External INCS3datatypes:DpSpecificCommonParameters
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'INCS3datatypes':'enc_DpSpecificCommonParameters'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute busyCause(2) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex2 of
normal -> encode_tags([<<129>>], [0], 1);
originationDenied -> encode_tags([<<129>>], [1], 1);
collectDigits -> encode_tags([<<129>>], [2], 1);
authorisationFailure -> encode_tags([<<129>>], [3], 1);
bPtyAlerted -> encode_tags([<<129>>], [4], 1);
noIndication -> encode_tags([<<129>>], [5], 1);
aPtyAbandon -> encode_tags([<<129>>], [6], 1);
invalidCollectedInformation -> encode_tags([<<129>>], [7], 1);
collectInformationFailure -> encode_tags([<<129>>], [8], 1);
aPtyDisc -> encode_tags([<<129>>], [9], 1);
bPtyDisc -> encode_tags([<<129>>], [10], 1);
routeSelectFailure -> encode_tags([<<129>>], [11], 1);
oNoAnswer -> encode_tags([<<129>>], [12], 1);
terminationDenied -> encode_tags([<<129>>], [13], 1);
notReachable -> encode_tags([<<129>>], [14], 1);
bPtyNoAnswer -> encode_tags([<<129>>], [15], 1);
bPtyBusyUDUB -> encode_tags([<<129>>], [16], 1);
bPtyBusyNDUB -> encode_tags([<<129>>], [17], 1);
ss7Failure -> encode_tags([<<129>>], [18], 1);
calledPartyRejected -> encode_tags([<<129>>], [19], 1);
tException -> encode_tags([<<129>>], [20], 1);
routeFailure1 -> encode_tags([<<129>>], [21], 1);
routeFailure2 -> encode_tags([<<129>>], [22], 1);
ssActivating -> encode_tags([<<129>>], [23], 1);
conversationTimeout -> encode_tags([<<129>>], [24], 1);
noCircuitAvailable -> encode_tags([<<129>>], [25], 1);
coreNotification -> encode_tags([<<129>>], [26], 1);
unsupportedMedia -> encode_tags([<<129>>], [27], 1);
numberIncomplete -> encode_tags([<<129>>], [28], 1);
invalidNumber -> encode_tags([<<129>>], [29], 1);
unassignedNumber -> encode_tags([<<129>>], [30], 1);
doNotDisturb -> encode_tags([<<129>>], [31], 1);
externalControlled -> encode_tags([<<129>>], [32], 1);
systemFailure -> encode_tags([<<129>>], [33], 1);
applicationNotification -> encode_tags([<<129>>], [34], 1);
referOk -> encode_tags([<<129>>], [35], 1);
referFailure -> encode_tags([<<129>>], [36], 1);
hole -> encode_tags([<<129>>], [37], 1);
hold -> encode_tags([<<129>>], [38], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end
       end,

%%-------------------------------------------------
%% attribute callingPartyBusinessGroupID(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute callingPartySubaddress(4) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex4, [<<131>>])
       end,

%%-------------------------------------------------
%% attribute callingFacilityGroup(5)   External INCS3datatypes:FacilityGroup OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_FacilityGroup'(Cindex5, [<<164>>])
       end,

%%-------------------------------------------------
%% attribute callingFacilityGroupMember(6) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex6, [<<133>>])
       end,

%%-------------------------------------------------
%% attribute originalCalledPartyID(7) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex7, [<<134>>])
       end,

%%-------------------------------------------------
%% attribute prefix(8) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case Cindex8 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex8, [<<135>>])
       end,

%%-------------------------------------------------
%% attribute redirectingPartyID(9) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes9,EncLen9} =  case Cindex9 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex9, [<<136>>])
       end,

%%-------------------------------------------------
%% attribute redirectionInformation(10) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes10,EncLen10} =  case Cindex10 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex10, [<<137>>])
       end,

%%-------------------------------------------------
%% attribute routeList(11)   External INCS3datatypes:RouteList OPTIONAL
%%-------------------------------------------------
   {EncBytes11,EncLen11} =  case Cindex11 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_RouteList'(Cindex11, [<<170>>])
       end,

%%-------------------------------------------------
%% attribute travellingClassMark(12) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes12,EncLen12} =  case Cindex12 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex12, [<<139>>])
       end,

%%-------------------------------------------------
%% attribute extensions(13)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes13,EncLen13} =  case Cindex13 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Extensions'(Cindex13, [<<172>>])
       end,

%%-------------------------------------------------
%% attribute carrier(14) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes14,EncLen14} =  case Cindex14 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex14, [<<141>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10, EncBytes11, EncBytes12, EncBytes13, EncBytes14],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10 + EncLen11 + EncLen12 + EncLen13 + EncLen14,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_OCalledPartyBusyArg'(Tlv) ->
   'dec_OCalledPartyBusyArg'(Tlv, [16]).

'dec_OCalledPartyBusyArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute dpSpecificCommonParameters(1)   External INCS3datatypes:DpSpecificCommonParameters
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'INCS3datatypes':'dec_DpSpecificCommonParameters'(V1, [131072]),

%%-------------------------------------------------
%% attribute busyCause(2) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {case decode_integer(V2, []) of
0 -> normal;
1 -> originationDenied;
2 -> collectDigits;
3 -> authorisationFailure;
4 -> bPtyAlerted;
5 -> noIndication;
6 -> aPtyAbandon;
7 -> invalidCollectedInformation;
8 -> collectInformationFailure;
9 -> aPtyDisc;
10 -> bPtyDisc;
11 -> routeSelectFailure;
12 -> oNoAnswer;
13 -> terminationDenied;
14 -> notReachable;
15 -> bPtyNoAnswer;
16 -> bPtyBusyUDUB;
17 -> bPtyBusyNDUB;
18 -> ss7Failure;
19 -> calledPartyRejected;
20 -> tException;
21 -> routeFailure1;
22 -> routeFailure2;
23 -> ssActivating;
24 -> conversationTimeout;
25 -> noCircuitAvailable;
26 -> coreNotification;
27 -> unsupportedMedia;
28 -> numberIncomplete;
29 -> invalidNumber;
30 -> unassignedNumber;
31 -> doNotDisturb;
32 -> externalControlled;
33 -> systemFailure;
34 -> applicationNotification;
35 -> referOk;
36 -> referFailure;
37 -> hole;
38 -> hold;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute callingPartyBusinessGroupID(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {decode_octet_string(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute callingPartySubaddress(4) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {begin
Val1 = decode_octet_string(V4, []),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 27 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute callingFacilityGroup(5)   External INCS3datatypes:FacilityGroup OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {'INCS3datatypes':'dec_FacilityGroup'(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute callingFacilityGroupMember(6) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {decode_integer(V6, []), TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute originalCalledPartyID(7) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {begin
Val2 = decode_octet_string(V7, []),
C2 = byte_size(Val2),
if 1 =< C2, C2 =< 15 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

%%-------------------------------------------------
%% attribute prefix(8) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term8,Tlv9} = case Tlv8 of
[{131079,V8}|TempTlv9] ->
    {begin
Val3 = decode_octet_string(V8, []),
C3 = byte_size(Val3),
if 1 =< C3, C3 =< 27 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv9};
    _ ->
        { asn1_NOVALUE, Tlv8}
end,

%%-------------------------------------------------
%% attribute redirectingPartyID(9) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term9,Tlv10} = case Tlv9 of
[{131080,V9}|TempTlv10] ->
    {begin
Val4 = decode_octet_string(V9, []),
C4 = byte_size(Val4),
if 1 =< C4, C4 =< 27 ->
Val4;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv10};
    _ ->
        { asn1_NOVALUE, Tlv9}
end,

%%-------------------------------------------------
%% attribute redirectionInformation(10) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term10,Tlv11} = case Tlv10 of
[{131081,V10}|TempTlv11] ->
    {begin
Val5 = decode_octet_string(V10, []),
C5 = byte_size(Val5),
if C5 =:= 2 ->
Val5;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv11};
    _ ->
        { asn1_NOVALUE, Tlv10}
end,

%%-------------------------------------------------
%% attribute routeList(11)   External INCS3datatypes:RouteList OPTIONAL
%%-------------------------------------------------
{Term11,Tlv12} = case Tlv11 of
[{131082,V11}|TempTlv12] ->
    {'INCS3datatypes':'dec_RouteList'(V11, []), TempTlv12};
    _ ->
        { asn1_NOVALUE, Tlv11}
end,

%%-------------------------------------------------
%% attribute travellingClassMark(12) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term12,Tlv13} = case Tlv12 of
[{131083,V12}|TempTlv13] ->
    {begin
Val6 = decode_octet_string(V12, []),
C6 = byte_size(Val6),
if 1 =< C6, C6 =< 27 ->
Val6;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv13};
    _ ->
        { asn1_NOVALUE, Tlv12}
end,

%%-------------------------------------------------
%% attribute extensions(13)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term13,Tlv14} = case Tlv13 of
[{131084,V13}|TempTlv14] ->
    {'INCS3datatypes':'dec_Extensions'(V13, []), TempTlv14};
    _ ->
        { asn1_NOVALUE, Tlv13}
end,

%%-------------------------------------------------
%% attribute carrier(14) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term14,Tlv15} = case Tlv14 of
[{131085,V14}|TempTlv15] ->
    {begin
Val7 = decode_octet_string(V14, []),
C7 = byte_size(Val7),
if 3 =< C7, C7 =< 10 ->
Val7;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv15};
    _ ->
        { asn1_NOVALUE, Tlv14}
end,

case Tlv15 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv15}}}) % extra fields not allowed
end,
   {'OCalledPartyBusyArg', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9, Term10, Term11, Term12, Term13, Term14}.



%%================================
%%  ODisconnectArg
%%================================
'enc_ODisconnectArg'(Val) ->
    'enc_ODisconnectArg'(Val, [<<48>>]).

'enc_ODisconnectArg'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8, Cindex9, Cindex10, Cindex11, Cindex12, Cindex13} = Val,

%%-------------------------------------------------
%% attribute dpSpecificCommonParameters(1)   External INCS3datatypes:DpSpecificCommonParameters
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'INCS3datatypes':'enc_DpSpecificCommonParameters'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute callingPartyBusinessGroupID(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute callingPartySubaddress(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute callingFacilityGroup(4)   External INCS3datatypes:FacilityGroup OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_FacilityGroup'(Cindex4, [<<163>>])
       end,

%%-------------------------------------------------
%% attribute callingFacilityGroupMember(5) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex5, [<<132>>])
       end,

%%-------------------------------------------------
%% attribute releaseCause(6) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex6 of
normal -> encode_tags([<<133>>], [0], 1);
originationDenied -> encode_tags([<<133>>], [1], 1);
collectDigits -> encode_tags([<<133>>], [2], 1);
authorisationFailure -> encode_tags([<<133>>], [3], 1);
bPtyAlerted -> encode_tags([<<133>>], [4], 1);
noIndication -> encode_tags([<<133>>], [5], 1);
aPtyAbandon -> encode_tags([<<133>>], [6], 1);
invalidCollectedInformation -> encode_tags([<<133>>], [7], 1);
collectInformationFailure -> encode_tags([<<133>>], [8], 1);
aPtyDisc -> encode_tags([<<133>>], [9], 1);
bPtyDisc -> encode_tags([<<133>>], [10], 1);
routeSelectFailure -> encode_tags([<<133>>], [11], 1);
oNoAnswer -> encode_tags([<<133>>], [12], 1);
terminationDenied -> encode_tags([<<133>>], [13], 1);
notReachable -> encode_tags([<<133>>], [14], 1);
bPtyNoAnswer -> encode_tags([<<133>>], [15], 1);
bPtyBusyUDUB -> encode_tags([<<133>>], [16], 1);
bPtyBusyNDUB -> encode_tags([<<133>>], [17], 1);
ss7Failure -> encode_tags([<<133>>], [18], 1);
calledPartyRejected -> encode_tags([<<133>>], [19], 1);
tException -> encode_tags([<<133>>], [20], 1);
routeFailure1 -> encode_tags([<<133>>], [21], 1);
routeFailure2 -> encode_tags([<<133>>], [22], 1);
ssActivating -> encode_tags([<<133>>], [23], 1);
conversationTimeout -> encode_tags([<<133>>], [24], 1);
noCircuitAvailable -> encode_tags([<<133>>], [25], 1);
coreNotification -> encode_tags([<<133>>], [26], 1);
unsupportedMedia -> encode_tags([<<133>>], [27], 1);
numberIncomplete -> encode_tags([<<133>>], [28], 1);
invalidNumber -> encode_tags([<<133>>], [29], 1);
unassignedNumber -> encode_tags([<<133>>], [30], 1);
doNotDisturb -> encode_tags([<<133>>], [31], 1);
externalControlled -> encode_tags([<<133>>], [32], 1);
systemFailure -> encode_tags([<<133>>], [33], 1);
applicationNotification -> encode_tags([<<133>>], [34], 1);
referOk -> encode_tags([<<133>>], [35], 1);
referFailure -> encode_tags([<<133>>], [36], 1);
hole -> encode_tags([<<133>>], [37], 1);
hold -> encode_tags([<<133>>], [38], 1);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end
       end,

%%-------------------------------------------------
%% attribute routeList(7)   External INCS3datatypes:RouteList OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_RouteList'(Cindex7, [<<166>>])
       end,

%%-------------------------------------------------
%% attribute extensions(8)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case Cindex8 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Extensions'(Cindex8, [<<167>>])
       end,

%%-------------------------------------------------
%% attribute carrier(9) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes9,EncLen9} =  case Cindex9 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex9, [<<136>>])
       end,

%%-------------------------------------------------
%% attribute connectTime(10) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes10,EncLen10} =  case Cindex10 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex10, [<<137>>])
       end,

%%-------------------------------------------------
%% attribute componentType(11) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes11,EncLen11} =  case Cindex11 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex11 of
anny -> encode_tags([<<138>>], [0], 1);
invoke -> encode_tags([<<138>>], [1], 1);
rResult -> encode_tags([<<138>>], [2], 1);
rError -> encode_tags([<<138>>], [3], 1);
rReject -> encode_tags([<<138>>], [4], 1);
Enumval7 -> exit({error,{asn1, {enumerated_not_in_range,Enumval7}}})
end
       end,

%%-------------------------------------------------
%% attribute component(12)   External INCS3datatypes:Component OPTIONAL
%%-------------------------------------------------
   {EncBytes12,EncLen12} =  case Cindex12 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Component'(Cindex12, [<<171>>])
       end,

%%-------------------------------------------------
%% attribute componentCorrelationID(13) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes13,EncLen13} =  case Cindex13 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex13, [<<140>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10, EncBytes11, EncBytes12, EncBytes13],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10 + EncLen11 + EncLen12 + EncLen13,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_ODisconnectArg'(Tlv) ->
   'dec_ODisconnectArg'(Tlv, [16]).

'dec_ODisconnectArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute dpSpecificCommonParameters(1)   External INCS3datatypes:DpSpecificCommonParameters
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'INCS3datatypes':'dec_DpSpecificCommonParameters'(V1, [131072]),

%%-------------------------------------------------
%% attribute callingPartyBusinessGroupID(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {decode_octet_string(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute callingPartySubaddress(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {begin
Val1 = decode_octet_string(V3, []),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 27 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute callingFacilityGroup(4)   External INCS3datatypes:FacilityGroup OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'INCS3datatypes':'dec_FacilityGroup'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute callingFacilityGroupMember(5) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {decode_integer(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute releaseCause(6) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {case decode_integer(V6, []) of
0 -> normal;
1 -> originationDenied;
2 -> collectDigits;
3 -> authorisationFailure;
4 -> bPtyAlerted;
5 -> noIndication;
6 -> aPtyAbandon;
7 -> invalidCollectedInformation;
8 -> collectInformationFailure;
9 -> aPtyDisc;
10 -> bPtyDisc;
11 -> routeSelectFailure;
12 -> oNoAnswer;
13 -> terminationDenied;
14 -> notReachable;
15 -> bPtyNoAnswer;
16 -> bPtyBusyUDUB;
17 -> bPtyBusyNDUB;
18 -> ss7Failure;
19 -> calledPartyRejected;
20 -> tException;
21 -> routeFailure1;
22 -> routeFailure2;
23 -> ssActivating;
24 -> conversationTimeout;
25 -> noCircuitAvailable;
26 -> coreNotification;
27 -> unsupportedMedia;
28 -> numberIncomplete;
29 -> invalidNumber;
30 -> unassignedNumber;
31 -> doNotDisturb;
32 -> externalControlled;
33 -> systemFailure;
34 -> applicationNotification;
35 -> referOk;
36 -> referFailure;
37 -> hole;
38 -> hold;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end, TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute routeList(7)   External INCS3datatypes:RouteList OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {'INCS3datatypes':'dec_RouteList'(V7, []), TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

%%-------------------------------------------------
%% attribute extensions(8)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term8,Tlv9} = case Tlv8 of
[{131079,V8}|TempTlv9] ->
    {'INCS3datatypes':'dec_Extensions'(V8, []), TempTlv9};
    _ ->
        { asn1_NOVALUE, Tlv8}
end,

%%-------------------------------------------------
%% attribute carrier(9) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term9,Tlv10} = case Tlv9 of
[{131080,V9}|TempTlv10] ->
    {begin
Val2 = decode_octet_string(V9, []),
C2 = byte_size(Val2),
if 3 =< C2, C2 =< 10 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv10};
    _ ->
        { asn1_NOVALUE, Tlv9}
end,

%%-------------------------------------------------
%% attribute connectTime(10) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term10,Tlv11} = case Tlv10 of
[{131081,V10}|TempTlv11] ->
    {begin
Val3 = decode_integer(V10, []),
if 0 =< Val3, Val3 =< 2147483647 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv11};
    _ ->
        { asn1_NOVALUE, Tlv10}
end,

%%-------------------------------------------------
%% attribute componentType(11) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term11,Tlv12} = case Tlv11 of
[{131082,V11}|TempTlv12] ->
    {case decode_integer(V11, []) of
0 -> anny;
1 -> invoke;
2 -> rResult;
3 -> rError;
4 -> rReject;
Default2 -> exit({error,{asn1,{illegal_enumerated,Default2}}})
end, TempTlv12};
    _ ->
        { asn1_NOVALUE, Tlv11}
end,

%%-------------------------------------------------
%% attribute component(12)   External INCS3datatypes:Component OPTIONAL
%%-------------------------------------------------
{Term12,Tlv13} = case Tlv12 of
[{131083,V12}|TempTlv13] ->
    {'INCS3datatypes':'dec_Component'(V12, []), TempTlv13};
    _ ->
        { asn1_NOVALUE, Tlv12}
end,

%%-------------------------------------------------
%% attribute componentCorrelationID(13) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term13,Tlv14} = case Tlv13 of
[{131084,V13}|TempTlv14] ->
    {decode_integer(V13, []), TempTlv14};
    _ ->
        { asn1_NOVALUE, Tlv13}
end,

case Tlv14 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv14}}}) % extra fields not allowed
end,
   {'ODisconnectArg', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9, Term10, Term11, Term12, Term13}.



%%================================
%%  MidCallArg
%%================================
'enc_MidCallArg'(Val) ->
    'enc_MidCallArg'(Val, [<<48>>]).

'enc_MidCallArg'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8, Cindex9, Cindex10, Cindex11} = Val,

%%-------------------------------------------------
%% attribute dpSpecificCommonParameters(1)   External INCS3datatypes:DpSpecificCommonParameters
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'INCS3datatypes':'enc_DpSpecificCommonParameters'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute calledPartyBusinessGroupID(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute calledPartySubaddress(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute callingPartyBusinessGroupID(4) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex4, [<<131>>])
       end,

%%-------------------------------------------------
%% attribute callingPartySubaddress(5) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex5, [<<132>>])
       end,

%%-------------------------------------------------
%% attribute featureRequestIndicator(6) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex6 of
hold -> encode_tags([<<133>>], [0], 1);
retrieve -> encode_tags([<<133>>], [1], 1);
featureActivation -> encode_tags([<<133>>], [2], 1);
spare1 -> encode_tags([<<133>>], [3], 1);
sparen -> encode_tags([<<133>>], [127], 1);
Enumval5 -> exit({error,{asn1, {enumerated_not_in_range,Enumval5}}})
end
       end,

%%-------------------------------------------------
%% attribute extensions(7)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Extensions'(Cindex7, [<<166>>])
       end,

%%-------------------------------------------------
%% attribute carrier(8) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case Cindex8 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex8, [<<135>>])
       end,

%%-------------------------------------------------
%% attribute componentType(9) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes9,EncLen9} =  case Cindex9 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex9 of
anny -> encode_tags([<<136>>], [0], 1);
invoke -> encode_tags([<<136>>], [1], 1);
rResult -> encode_tags([<<136>>], [2], 1);
rError -> encode_tags([<<136>>], [3], 1);
rReject -> encode_tags([<<136>>], [4], 1);
Enumval7 -> exit({error,{asn1, {enumerated_not_in_range,Enumval7}}})
end
       end,

%%-------------------------------------------------
%% attribute component(10)   External INCS3datatypes:Component OPTIONAL
%%-------------------------------------------------
   {EncBytes10,EncLen10} =  case Cindex10 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Component'(Cindex10, [<<169>>])
       end,

%%-------------------------------------------------
%% attribute componentCorrelationID(11) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes11,EncLen11} =  case Cindex11 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex11, [<<138>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10, EncBytes11],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10 + EncLen11,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_MidCallArg'(Tlv) ->
   'dec_MidCallArg'(Tlv, [16]).

'dec_MidCallArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute dpSpecificCommonParameters(1)   External INCS3datatypes:DpSpecificCommonParameters
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'INCS3datatypes':'dec_DpSpecificCommonParameters'(V1, [131072]),

%%-------------------------------------------------
%% attribute calledPartyBusinessGroupID(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {decode_octet_string(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute calledPartySubaddress(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {begin
Val1 = decode_octet_string(V3, []),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 27 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute callingPartyBusinessGroupID(4) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {decode_octet_string(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute callingPartySubaddress(5) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {begin
Val2 = decode_octet_string(V5, []),
C2 = byte_size(Val2),
if 1 =< C2, C2 =< 27 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute featureRequestIndicator(6) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {case decode_integer(V6, []) of
0 -> hold;
1 -> retrieve;
2 -> featureActivation;
3 -> spare1;
127 -> sparen;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end, TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute extensions(7)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {'INCS3datatypes':'dec_Extensions'(V7, []), TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

%%-------------------------------------------------
%% attribute carrier(8) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term8,Tlv9} = case Tlv8 of
[{131079,V8}|TempTlv9] ->
    {begin
Val3 = decode_octet_string(V8, []),
C3 = byte_size(Val3),
if 3 =< C3, C3 =< 10 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv9};
    _ ->
        { asn1_NOVALUE, Tlv8}
end,

%%-------------------------------------------------
%% attribute componentType(9) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term9,Tlv10} = case Tlv9 of
[{131080,V9}|TempTlv10] ->
    {case decode_integer(V9, []) of
0 -> anny;
1 -> invoke;
2 -> rResult;
3 -> rError;
4 -> rReject;
Default2 -> exit({error,{asn1,{illegal_enumerated,Default2}}})
end, TempTlv10};
    _ ->
        { asn1_NOVALUE, Tlv9}
end,

%%-------------------------------------------------
%% attribute component(10)   External INCS3datatypes:Component OPTIONAL
%%-------------------------------------------------
{Term10,Tlv11} = case Tlv10 of
[{131081,V10}|TempTlv11] ->
    {'INCS3datatypes':'dec_Component'(V10, []), TempTlv11};
    _ ->
        { asn1_NOVALUE, Tlv10}
end,

%%-------------------------------------------------
%% attribute componentCorrelationID(11) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term11,Tlv12} = case Tlv11 of
[{131082,V11}|TempTlv12] ->
    {decode_integer(V11, []), TempTlv12};
    _ ->
        { asn1_NOVALUE, Tlv11}
end,

case Tlv12 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv12}}}) % extra fields not allowed
end,
   {'MidCallArg', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9, Term10, Term11}.



%%================================
%%  ONoAnswerArg
%%================================
'enc_ONoAnswerArg'(Val) ->
    'enc_ONoAnswerArg'(Val, [<<48>>]).

'enc_ONoAnswerArg'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8, Cindex9, Cindex10, Cindex11, Cindex12, Cindex13} = Val,

%%-------------------------------------------------
%% attribute dpSpecificCommonParameters(1)   External INCS3datatypes:DpSpecificCommonParameters
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'INCS3datatypes':'enc_DpSpecificCommonParameters'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute callingPartyBusinessGroupID(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute callingPartySubaddress(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute callingFacilityGroup(4)   External INCS3datatypes:FacilityGroup OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_FacilityGroup'(Cindex4, [<<163>>])
       end,

%%-------------------------------------------------
%% attribute callingFacilityGroupMember(5) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex5, [<<132>>])
       end,

%%-------------------------------------------------
%% attribute originalCalledPartyID(6) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex6, [<<133>>])
       end,

%%-------------------------------------------------
%% attribute prefix(7) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex7, [<<134>>])
       end,

%%-------------------------------------------------
%% attribute redirectingPartyID(8) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case Cindex8 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex8, [<<135>>])
       end,

%%-------------------------------------------------
%% attribute redirectionInformation(9) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes9,EncLen9} =  case Cindex9 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex9, [<<136>>])
       end,

%%-------------------------------------------------
%% attribute routeList(10)   External INCS3datatypes:RouteList OPTIONAL
%%-------------------------------------------------
   {EncBytes10,EncLen10} =  case Cindex10 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_RouteList'(Cindex10, [<<169>>])
       end,

%%-------------------------------------------------
%% attribute travellingClassMark(11) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes11,EncLen11} =  case Cindex11 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex11, [<<138>>])
       end,

%%-------------------------------------------------
%% attribute extensions(12)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes12,EncLen12} =  case Cindex12 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Extensions'(Cindex12, [<<171>>])
       end,

%%-------------------------------------------------
%% attribute carrier(13) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes13,EncLen13} =  case Cindex13 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex13, [<<140>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10, EncBytes11, EncBytes12, EncBytes13],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10 + EncLen11 + EncLen12 + EncLen13,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_ONoAnswerArg'(Tlv) ->
   'dec_ONoAnswerArg'(Tlv, [16]).

'dec_ONoAnswerArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute dpSpecificCommonParameters(1)   External INCS3datatypes:DpSpecificCommonParameters
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'INCS3datatypes':'dec_DpSpecificCommonParameters'(V1, [131072]),

%%-------------------------------------------------
%% attribute callingPartyBusinessGroupID(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {decode_octet_string(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute callingPartySubaddress(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {begin
Val1 = decode_octet_string(V3, []),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 27 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute callingFacilityGroup(4)   External INCS3datatypes:FacilityGroup OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'INCS3datatypes':'dec_FacilityGroup'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute callingFacilityGroupMember(5) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {decode_integer(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute originalCalledPartyID(6) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {begin
Val2 = decode_octet_string(V6, []),
C2 = byte_size(Val2),
if 1 =< C2, C2 =< 15 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute prefix(7) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {begin
Val3 = decode_octet_string(V7, []),
C3 = byte_size(Val3),
if 1 =< C3, C3 =< 27 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

%%-------------------------------------------------
%% attribute redirectingPartyID(8) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term8,Tlv9} = case Tlv8 of
[{131079,V8}|TempTlv9] ->
    {begin
Val4 = decode_octet_string(V8, []),
C4 = byte_size(Val4),
if 1 =< C4, C4 =< 27 ->
Val4;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv9};
    _ ->
        { asn1_NOVALUE, Tlv8}
end,

%%-------------------------------------------------
%% attribute redirectionInformation(9) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term9,Tlv10} = case Tlv9 of
[{131080,V9}|TempTlv10] ->
    {begin
Val5 = decode_octet_string(V9, []),
C5 = byte_size(Val5),
if C5 =:= 2 ->
Val5;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv10};
    _ ->
        { asn1_NOVALUE, Tlv9}
end,

%%-------------------------------------------------
%% attribute routeList(10)   External INCS3datatypes:RouteList OPTIONAL
%%-------------------------------------------------
{Term10,Tlv11} = case Tlv10 of
[{131081,V10}|TempTlv11] ->
    {'INCS3datatypes':'dec_RouteList'(V10, []), TempTlv11};
    _ ->
        { asn1_NOVALUE, Tlv10}
end,

%%-------------------------------------------------
%% attribute travellingClassMark(11) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term11,Tlv12} = case Tlv11 of
[{131082,V11}|TempTlv12] ->
    {begin
Val6 = decode_octet_string(V11, []),
C6 = byte_size(Val6),
if 1 =< C6, C6 =< 27 ->
Val6;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv12};
    _ ->
        { asn1_NOVALUE, Tlv11}
end,

%%-------------------------------------------------
%% attribute extensions(12)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term12,Tlv13} = case Tlv12 of
[{131083,V12}|TempTlv13] ->
    {'INCS3datatypes':'dec_Extensions'(V12, []), TempTlv13};
    _ ->
        { asn1_NOVALUE, Tlv12}
end,

%%-------------------------------------------------
%% attribute carrier(13) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term13,Tlv14} = case Tlv13 of
[{131084,V13}|TempTlv14] ->
    {begin
Val7 = decode_octet_string(V13, []),
C7 = byte_size(Val7),
if 3 =< C7, C7 =< 10 ->
Val7;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv14};
    _ ->
        { asn1_NOVALUE, Tlv13}
end,

case Tlv14 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv14}}}) % extra fields not allowed
end,
   {'ONoAnswerArg', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9, Term10, Term11, Term12, Term13}.



%%================================
%%  OriginationAttemptArg
%%================================
'enc_OriginationAttemptArg'(Val) ->
    'enc_OriginationAttemptArg'(Val, [<<48>>]).

'enc_OriginationAttemptArg'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8, Cindex9, Cindex10, Cindex11} = Val,

%%-------------------------------------------------
%% attribute dpSpecificCommonParameters(1)   External INCS3datatypes:DpSpecificCommonParameters
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'INCS3datatypes':'enc_DpSpecificCommonParameters'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute callingPartyBusinessGroupID(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute callingPartySubaddress(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute callingFacilityGroup(4)   External INCS3datatypes:FacilityGroup OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_FacilityGroup'(Cindex4, [<<163>>])
       end,

%%-------------------------------------------------
%% attribute callingFacilityGroupMember(5) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex5, [<<132>>])
       end,

%%-------------------------------------------------
%% attribute carrier(6) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex6, [<<133>>])
       end,

%%-------------------------------------------------
%% attribute travellingClassMark(7) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex7, [<<134>>])
       end,

%%-------------------------------------------------
%% attribute extensions(8)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case Cindex8 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Extensions'(Cindex8, [<<167>>])
       end,

%%-------------------------------------------------
%% attribute componentType(9) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes9,EncLen9} =  case Cindex9 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex9 of
anny -> encode_tags([<<136>>], [0], 1);
invoke -> encode_tags([<<136>>], [1], 1);
rResult -> encode_tags([<<136>>], [2], 1);
rError -> encode_tags([<<136>>], [3], 1);
rReject -> encode_tags([<<136>>], [4], 1);
Enumval6 -> exit({error,{asn1, {enumerated_not_in_range,Enumval6}}})
end
       end,

%%-------------------------------------------------
%% attribute component(10)   External INCS3datatypes:Component OPTIONAL
%%-------------------------------------------------
   {EncBytes10,EncLen10} =  case Cindex10 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Component'(Cindex10, [<<169>>])
       end,

%%-------------------------------------------------
%% attribute componenttCorrelationID(11) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes11,EncLen11} =  case Cindex11 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex11, [<<138>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10, EncBytes11],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10 + EncLen11,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_OriginationAttemptArg'(Tlv) ->
   'dec_OriginationAttemptArg'(Tlv, [16]).

'dec_OriginationAttemptArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute dpSpecificCommonParameters(1)   External INCS3datatypes:DpSpecificCommonParameters
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'INCS3datatypes':'dec_DpSpecificCommonParameters'(V1, [131072]),

%%-------------------------------------------------
%% attribute callingPartyBusinessGroupID(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {decode_octet_string(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute callingPartySubaddress(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {begin
Val1 = decode_octet_string(V3, []),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 27 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute callingFacilityGroup(4)   External INCS3datatypes:FacilityGroup OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'INCS3datatypes':'dec_FacilityGroup'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute callingFacilityGroupMember(5) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {decode_integer(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute carrier(6) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {begin
Val2 = decode_octet_string(V6, []),
C2 = byte_size(Val2),
if 3 =< C2, C2 =< 10 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute travellingClassMark(7) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {begin
Val3 = decode_octet_string(V7, []),
C3 = byte_size(Val3),
if 1 =< C3, C3 =< 27 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

%%-------------------------------------------------
%% attribute extensions(8)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term8,Tlv9} = case Tlv8 of
[{131079,V8}|TempTlv9] ->
    {'INCS3datatypes':'dec_Extensions'(V8, []), TempTlv9};
    _ ->
        { asn1_NOVALUE, Tlv8}
end,

%%-------------------------------------------------
%% attribute componentType(9) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term9,Tlv10} = case Tlv9 of
[{131080,V9}|TempTlv10] ->
    {case decode_integer(V9, []) of
0 -> anny;
1 -> invoke;
2 -> rResult;
3 -> rError;
4 -> rReject;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end, TempTlv10};
    _ ->
        { asn1_NOVALUE, Tlv9}
end,

%%-------------------------------------------------
%% attribute component(10)   External INCS3datatypes:Component OPTIONAL
%%-------------------------------------------------
{Term10,Tlv11} = case Tlv10 of
[{131081,V10}|TempTlv11] ->
    {'INCS3datatypes':'dec_Component'(V10, []), TempTlv11};
    _ ->
        { asn1_NOVALUE, Tlv10}
end,

%%-------------------------------------------------
%% attribute componenttCorrelationID(11) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term11,Tlv12} = case Tlv11 of
[{131082,V11}|TempTlv12] ->
    {decode_integer(V11, []), TempTlv12};
    _ ->
        { asn1_NOVALUE, Tlv11}
end,

case Tlv12 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv12}}}) % extra fields not allowed
end,
   {'OriginationAttemptArg', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9, Term10, Term11}.



%%================================
%%  OriginationAttemptAuthorizedArg
%%================================
'enc_OriginationAttemptAuthorizedArg'(Val) ->
    'enc_OriginationAttemptAuthorizedArg'(Val, [<<48>>]).

'enc_OriginationAttemptAuthorizedArg'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8, Cindex9, Cindex10, Cindex11, Cindex12} = Val,

%%-------------------------------------------------
%% attribute dpSpecificCommonParameters(1)   External INCS3datatypes:DpSpecificCommonParameters
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'INCS3datatypes':'enc_DpSpecificCommonParameters'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute dialledDigits(2)   External ACPdatatypes:CalledPartyNumber OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'ACPdatatypes':'enc_CalledPartyNumber'(Cindex2, [<<161>>])
       end,

%%-------------------------------------------------
%% attribute callingPartyBusinessGroupID(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute callingPartySubaddress(4) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex4, [<<131>>])
       end,

%%-------------------------------------------------
%% attribute callingFacilityGroup(5)   External INCS3datatypes:FacilityGroup OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_FacilityGroup'(Cindex5, [<<164>>])
       end,

%%-------------------------------------------------
%% attribute callingFacilityGroupMember(6) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex6, [<<133>>])
       end,

%%-------------------------------------------------
%% attribute travellingClassMark(7) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex7, [<<134>>])
       end,

%%-------------------------------------------------
%% attribute extensions(8)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case Cindex8 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Extensions'(Cindex8, [<<167>>])
       end,

%%-------------------------------------------------
%% attribute carrier(9) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes9,EncLen9} =  case Cindex9 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex9, [<<136>>])
       end,

%%-------------------------------------------------
%% attribute componentType(10) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes10,EncLen10} =  case Cindex10 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex10 of
anny -> encode_tags([<<137>>], [0], 1);
invoke -> encode_tags([<<137>>], [1], 1);
rResult -> encode_tags([<<137>>], [2], 1);
rError -> encode_tags([<<137>>], [3], 1);
rReject -> encode_tags([<<137>>], [4], 1);
Enumval6 -> exit({error,{asn1, {enumerated_not_in_range,Enumval6}}})
end
       end,

%%-------------------------------------------------
%% attribute component(11)   External INCS3datatypes:Component OPTIONAL
%%-------------------------------------------------
   {EncBytes11,EncLen11} =  case Cindex11 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Component'(Cindex11, [<<170>>])
       end,

%%-------------------------------------------------
%% attribute componentCorrelationID(12) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes12,EncLen12} =  case Cindex12 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex12, [<<139>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10, EncBytes11, EncBytes12],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10 + EncLen11 + EncLen12,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_OriginationAttemptAuthorizedArg'(Tlv) ->
   'dec_OriginationAttemptAuthorizedArg'(Tlv, [16]).

'dec_OriginationAttemptAuthorizedArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute dpSpecificCommonParameters(1)   External INCS3datatypes:DpSpecificCommonParameters
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'INCS3datatypes':'dec_DpSpecificCommonParameters'(V1, [131072]),

%%-------------------------------------------------
%% attribute dialledDigits(2)   External ACPdatatypes:CalledPartyNumber OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'ACPdatatypes':'dec_CalledPartyNumber'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute callingPartyBusinessGroupID(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {decode_octet_string(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute callingPartySubaddress(4) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {begin
Val1 = decode_octet_string(V4, []),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 27 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute callingFacilityGroup(5)   External INCS3datatypes:FacilityGroup OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {'INCS3datatypes':'dec_FacilityGroup'(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute callingFacilityGroupMember(6) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {decode_integer(V6, []), TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute travellingClassMark(7) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {begin
Val2 = decode_octet_string(V7, []),
C2 = byte_size(Val2),
if 1 =< C2, C2 =< 27 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

%%-------------------------------------------------
%% attribute extensions(8)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term8,Tlv9} = case Tlv8 of
[{131079,V8}|TempTlv9] ->
    {'INCS3datatypes':'dec_Extensions'(V8, []), TempTlv9};
    _ ->
        { asn1_NOVALUE, Tlv8}
end,

%%-------------------------------------------------
%% attribute carrier(9) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term9,Tlv10} = case Tlv9 of
[{131080,V9}|TempTlv10] ->
    {begin
Val3 = decode_octet_string(V9, []),
C3 = byte_size(Val3),
if 3 =< C3, C3 =< 10 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv10};
    _ ->
        { asn1_NOVALUE, Tlv9}
end,

%%-------------------------------------------------
%% attribute componentType(10) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term10,Tlv11} = case Tlv10 of
[{131081,V10}|TempTlv11] ->
    {case decode_integer(V10, []) of
0 -> anny;
1 -> invoke;
2 -> rResult;
3 -> rError;
4 -> rReject;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end, TempTlv11};
    _ ->
        { asn1_NOVALUE, Tlv10}
end,

%%-------------------------------------------------
%% attribute component(11)   External INCS3datatypes:Component OPTIONAL
%%-------------------------------------------------
{Term11,Tlv12} = case Tlv11 of
[{131082,V11}|TempTlv12] ->
    {'INCS3datatypes':'dec_Component'(V11, []), TempTlv12};
    _ ->
        { asn1_NOVALUE, Tlv11}
end,

%%-------------------------------------------------
%% attribute componentCorrelationID(12) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term12,Tlv13} = case Tlv12 of
[{131083,V12}|TempTlv13] ->
    {decode_integer(V12, []), TempTlv13};
    _ ->
        { asn1_NOVALUE, Tlv12}
end,

case Tlv13 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv13}}}) % extra fields not allowed
end,
   {'OriginationAttemptAuthorizedArg', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9, Term10, Term11, Term12}.



%%================================
%%  OSuspendedArg
%%================================
'enc_OSuspendedArg'(Val) ->
    'enc_OSuspendedArg'(Val, [<<48>>]).

'enc_OSuspendedArg'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute dpSpecificCommonParameters(1)   External INCS3datatypes:DpSpecificCommonParameters
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'INCS3datatypes':'enc_DpSpecificCommonParameters'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute legID(2)   External INCS3opsargs:LegID OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_LegID'(Cindex2, [<<161>>])
       end,

%%-------------------------------------------------
%% attribute extensions(3)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Extensions'(Cindex3, [<<162>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_OSuspendedArg'(Tlv) ->
   'dec_OSuspendedArg'(Tlv, [16]).

'dec_OSuspendedArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute dpSpecificCommonParameters(1)   External INCS3datatypes:DpSpecificCommonParameters
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'INCS3datatypes':'dec_DpSpecificCommonParameters'(V1, [131072]),

%%-------------------------------------------------
%% attribute legID(2)   External INCS3opsargs:LegID OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_LegID'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute extensions(3)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'INCS3datatypes':'dec_Extensions'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'OSuspendedArg', Term1, Term2, Term3}.



%%================================
%%  ReconnectArg
%%================================
'enc_ReconnectArg'(Val) ->
    'enc_ReconnectArg'(Val, [<<48>>]).

'enc_ReconnectArg'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5} = Val,

%%-------------------------------------------------
%% attribute notificationDuration(1) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex1, [<<128>>])
       end,

%%-------------------------------------------------
%% attribute alertingPattern(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute displayInformation(3) with type IA5String OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute extensions(4)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Extensions'(Cindex4, [<<163>>])
       end,

%%-------------------------------------------------
%% attribute callSegmentID(5) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex5, [<<132>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_ReconnectArg'(Tlv) ->
   'dec_ReconnectArg'(Tlv, [16]).

'dec_ReconnectArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute notificationDuration(1) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {begin
Val1 = decode_integer(V1, []),
if 0 =< Val1, Val1 =< 2047 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute alertingPattern(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
Val2 = decode_octet_string(V2, []),
C1 = byte_size(Val2),
if C1 =:= 3 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute displayInformation(3) with type IA5String OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {begin
Val3 = decode_restricted_string(V3, []),
C2 = byte_size(Val3),
if 1 =< C2, C2 =< 27 ->
binary_to_list(Val3);
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute extensions(4)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'INCS3datatypes':'dec_Extensions'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute callSegmentID(5) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {begin
Val4 = decode_integer(V5, []),
if 1 =< Val4, Val4 =< 10 ->
Val4;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

case Tlv6 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv6}}}) % extra fields not allowed
end,
   {'ReconnectArg', Term1, Term2, Term3, Term4, Term5}.



%%================================
%%  ReleaseCallArg
%%================================
'enc_ReleaseCallArg'(Val) ->
    'enc_ReleaseCallArg'(Val, []).

'enc_ReleaseCallArg'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      initialCallSegment ->
         case element(2,Val) of
normal -> encode_tags([<<10>>], [0], 1);
originationDenied -> encode_tags([<<10>>], [1], 1);
collectDigits -> encode_tags([<<10>>], [2], 1);
authorisationFailure -> encode_tags([<<10>>], [3], 1);
bPtyAlerted -> encode_tags([<<10>>], [4], 1);
noIndication -> encode_tags([<<10>>], [5], 1);
aPtyAbandon -> encode_tags([<<10>>], [6], 1);
invalidCollectedInformation -> encode_tags([<<10>>], [7], 1);
collectInformationFailure -> encode_tags([<<10>>], [8], 1);
aPtyDisc -> encode_tags([<<10>>], [9], 1);
bPtyDisc -> encode_tags([<<10>>], [10], 1);
routeSelectFailure -> encode_tags([<<10>>], [11], 1);
oNoAnswer -> encode_tags([<<10>>], [12], 1);
terminationDenied -> encode_tags([<<10>>], [13], 1);
notReachable -> encode_tags([<<10>>], [14], 1);
bPtyNoAnswer -> encode_tags([<<10>>], [15], 1);
bPtyBusyUDUB -> encode_tags([<<10>>], [16], 1);
bPtyBusyNDUB -> encode_tags([<<10>>], [17], 1);
ss7Failure -> encode_tags([<<10>>], [18], 1);
calledPartyRejected -> encode_tags([<<10>>], [19], 1);
tException -> encode_tags([<<10>>], [20], 1);
routeFailure1 -> encode_tags([<<10>>], [21], 1);
routeFailure2 -> encode_tags([<<10>>], [22], 1);
ssActivating -> encode_tags([<<10>>], [23], 1);
conversationTimeout -> encode_tags([<<10>>], [24], 1);
noCircuitAvailable -> encode_tags([<<10>>], [25], 1);
coreNotification -> encode_tags([<<10>>], [26], 1);
unsupportedMedia -> encode_tags([<<10>>], [27], 1);
numberIncomplete -> encode_tags([<<10>>], [28], 1);
invalidNumber -> encode_tags([<<10>>], [29], 1);
unassignedNumber -> encode_tags([<<10>>], [30], 1);
doNotDisturb -> encode_tags([<<10>>], [31], 1);
externalControlled -> encode_tags([<<10>>], [32], 1);
systemFailure -> encode_tags([<<10>>], [33], 1);
applicationNotification -> encode_tags([<<10>>], [34], 1);
referOk -> encode_tags([<<10>>], [35], 1);
referFailure -> encode_tags([<<10>>], [36], 1);
hole -> encode_tags([<<10>>], [37], 1);
hold -> encode_tags([<<10>>], [38], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end;
      callSegmentToRelease ->
         'enc_ReleaseCallArg_callSegmentToRelease'(element(2,Val), [<<161>>]);
      allCallSegments ->
         'enc_ReleaseCallArg_allCallSegments'(element(2,Val), [<<162>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  ReleaseCallArg_callSegmentToRelease
%%================================
'enc_ReleaseCallArg_callSegmentToRelease'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute callSegment(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute releaseCause(2) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex2 of
normal -> encode_tags([<<129>>], [0], 1);
originationDenied -> encode_tags([<<129>>], [1], 1);
collectDigits -> encode_tags([<<129>>], [2], 1);
authorisationFailure -> encode_tags([<<129>>], [3], 1);
bPtyAlerted -> encode_tags([<<129>>], [4], 1);
noIndication -> encode_tags([<<129>>], [5], 1);
aPtyAbandon -> encode_tags([<<129>>], [6], 1);
invalidCollectedInformation -> encode_tags([<<129>>], [7], 1);
collectInformationFailure -> encode_tags([<<129>>], [8], 1);
aPtyDisc -> encode_tags([<<129>>], [9], 1);
bPtyDisc -> encode_tags([<<129>>], [10], 1);
routeSelectFailure -> encode_tags([<<129>>], [11], 1);
oNoAnswer -> encode_tags([<<129>>], [12], 1);
terminationDenied -> encode_tags([<<129>>], [13], 1);
notReachable -> encode_tags([<<129>>], [14], 1);
bPtyNoAnswer -> encode_tags([<<129>>], [15], 1);
bPtyBusyUDUB -> encode_tags([<<129>>], [16], 1);
bPtyBusyNDUB -> encode_tags([<<129>>], [17], 1);
ss7Failure -> encode_tags([<<129>>], [18], 1);
calledPartyRejected -> encode_tags([<<129>>], [19], 1);
tException -> encode_tags([<<129>>], [20], 1);
routeFailure1 -> encode_tags([<<129>>], [21], 1);
routeFailure2 -> encode_tags([<<129>>], [22], 1);
ssActivating -> encode_tags([<<129>>], [23], 1);
conversationTimeout -> encode_tags([<<129>>], [24], 1);
noCircuitAvailable -> encode_tags([<<129>>], [25], 1);
coreNotification -> encode_tags([<<129>>], [26], 1);
unsupportedMedia -> encode_tags([<<129>>], [27], 1);
numberIncomplete -> encode_tags([<<129>>], [28], 1);
invalidNumber -> encode_tags([<<129>>], [29], 1);
unassignedNumber -> encode_tags([<<129>>], [30], 1);
doNotDisturb -> encode_tags([<<129>>], [31], 1);
externalControlled -> encode_tags([<<129>>], [32], 1);
systemFailure -> encode_tags([<<129>>], [33], 1);
applicationNotification -> encode_tags([<<129>>], [34], 1);
referOk -> encode_tags([<<129>>], [35], 1);
referFailure -> encode_tags([<<129>>], [36], 1);
hole -> encode_tags([<<129>>], [37], 1);
hold -> encode_tags([<<129>>], [38], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end
       end,

%%-------------------------------------------------
%% attribute forcedRelease(3) with type BOOLEAN DEFAULT = false
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_DEFAULT -> {<<>>,0};
         false -> {<<>>,0};
         _ ->
            encode_boolean(Cindex3, [<<130>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ReleaseCallArg_allCallSegments
%%================================
'enc_ReleaseCallArg_allCallSegments'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute releaseCause(1) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex1 of
normal -> encode_tags([<<128>>], [0], 1);
originationDenied -> encode_tags([<<128>>], [1], 1);
collectDigits -> encode_tags([<<128>>], [2], 1);
authorisationFailure -> encode_tags([<<128>>], [3], 1);
bPtyAlerted -> encode_tags([<<128>>], [4], 1);
noIndication -> encode_tags([<<128>>], [5], 1);
aPtyAbandon -> encode_tags([<<128>>], [6], 1);
invalidCollectedInformation -> encode_tags([<<128>>], [7], 1);
collectInformationFailure -> encode_tags([<<128>>], [8], 1);
aPtyDisc -> encode_tags([<<128>>], [9], 1);
bPtyDisc -> encode_tags([<<128>>], [10], 1);
routeSelectFailure -> encode_tags([<<128>>], [11], 1);
oNoAnswer -> encode_tags([<<128>>], [12], 1);
terminationDenied -> encode_tags([<<128>>], [13], 1);
notReachable -> encode_tags([<<128>>], [14], 1);
bPtyNoAnswer -> encode_tags([<<128>>], [15], 1);
bPtyBusyUDUB -> encode_tags([<<128>>], [16], 1);
bPtyBusyNDUB -> encode_tags([<<128>>], [17], 1);
ss7Failure -> encode_tags([<<128>>], [18], 1);
calledPartyRejected -> encode_tags([<<128>>], [19], 1);
tException -> encode_tags([<<128>>], [20], 1);
routeFailure1 -> encode_tags([<<128>>], [21], 1);
routeFailure2 -> encode_tags([<<128>>], [22], 1);
ssActivating -> encode_tags([<<128>>], [23], 1);
conversationTimeout -> encode_tags([<<128>>], [24], 1);
noCircuitAvailable -> encode_tags([<<128>>], [25], 1);
coreNotification -> encode_tags([<<128>>], [26], 1);
unsupportedMedia -> encode_tags([<<128>>], [27], 1);
numberIncomplete -> encode_tags([<<128>>], [28], 1);
invalidNumber -> encode_tags([<<128>>], [29], 1);
unassignedNumber -> encode_tags([<<128>>], [30], 1);
doNotDisturb -> encode_tags([<<128>>], [31], 1);
externalControlled -> encode_tags([<<128>>], [32], 1);
systemFailure -> encode_tags([<<128>>], [33], 1);
applicationNotification -> encode_tags([<<128>>], [34], 1);
referOk -> encode_tags([<<128>>], [35], 1);
referFailure -> encode_tags([<<128>>], [36], 1);
hole -> encode_tags([<<128>>], [37], 1);
hold -> encode_tags([<<128>>], [38], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end
       end,

%%-------------------------------------------------
%% attribute timeToRelease(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute forcedRelease(3) with type BOOLEAN DEFAULT = false
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_DEFAULT -> {<<>>,0};
         false -> {<<>>,0};
         _ ->
            encode_boolean(Cindex3, [<<130>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_ReleaseCallArg'(Tlv) ->
   'dec_ReleaseCallArg'(Tlv, []).

'dec_ReleaseCallArg'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'initialCallSegment'
    {10, V1} -> 
        {initialCallSegment, case decode_integer(V1, []) of
0 -> normal;
1 -> originationDenied;
2 -> collectDigits;
3 -> authorisationFailure;
4 -> bPtyAlerted;
5 -> noIndication;
6 -> aPtyAbandon;
7 -> invalidCollectedInformation;
8 -> collectInformationFailure;
9 -> aPtyDisc;
10 -> bPtyDisc;
11 -> routeSelectFailure;
12 -> oNoAnswer;
13 -> terminationDenied;
14 -> notReachable;
15 -> bPtyNoAnswer;
16 -> bPtyBusyUDUB;
17 -> bPtyBusyNDUB;
18 -> ss7Failure;
19 -> calledPartyRejected;
20 -> tException;
21 -> routeFailure1;
22 -> routeFailure2;
23 -> ssActivating;
24 -> conversationTimeout;
25 -> noCircuitAvailable;
26 -> coreNotification;
27 -> unsupportedMedia;
28 -> numberIncomplete;
29 -> invalidNumber;
30 -> unassignedNumber;
31 -> doNotDisturb;
32 -> externalControlled;
33 -> systemFailure;
34 -> applicationNotification;
35 -> referOk;
36 -> referFailure;
37 -> hole;
38 -> hold;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end};


%% 'callSegmentToRelease'
    {131073, V1} -> 
        {callSegmentToRelease, 'dec_ReleaseCallArg_callSegmentToRelease'(V1, [])};


%% 'allCallSegments'
    {131074, V1} -> 
        {allCallSegments, 'dec_ReleaseCallArg_allCallSegments'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.
'dec_ReleaseCallArg_callSegmentToRelease'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute callSegment(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 1 =< Val1, Val1 =< 10 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute releaseCause(2) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {case decode_integer(V2, []) of
0 -> normal;
1 -> originationDenied;
2 -> collectDigits;
3 -> authorisationFailure;
4 -> bPtyAlerted;
5 -> noIndication;
6 -> aPtyAbandon;
7 -> invalidCollectedInformation;
8 -> collectInformationFailure;
9 -> aPtyDisc;
10 -> bPtyDisc;
11 -> routeSelectFailure;
12 -> oNoAnswer;
13 -> terminationDenied;
14 -> notReachable;
15 -> bPtyNoAnswer;
16 -> bPtyBusyUDUB;
17 -> bPtyBusyNDUB;
18 -> ss7Failure;
19 -> calledPartyRejected;
20 -> tException;
21 -> routeFailure1;
22 -> routeFailure2;
23 -> ssActivating;
24 -> conversationTimeout;
25 -> noCircuitAvailable;
26 -> coreNotification;
27 -> unsupportedMedia;
28 -> numberIncomplete;
29 -> invalidNumber;
30 -> unassignedNumber;
31 -> doNotDisturb;
32 -> externalControlled;
33 -> systemFailure;
34 -> applicationNotification;
35 -> referOk;
36 -> referFailure;
37 -> hole;
38 -> hold;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute forcedRelease(3) with type BOOLEAN DEFAULT = false
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {decode_boolean(V3, []), TempTlv4};
    _ ->
        {false,Tlv3}
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ReleaseCallArg_callSegmentToRelease', Term1, Term2, Term3}.

'dec_ReleaseCallArg_allCallSegments'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute releaseCause(1) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {case decode_integer(V1, []) of
0 -> normal;
1 -> originationDenied;
2 -> collectDigits;
3 -> authorisationFailure;
4 -> bPtyAlerted;
5 -> noIndication;
6 -> aPtyAbandon;
7 -> invalidCollectedInformation;
8 -> collectInformationFailure;
9 -> aPtyDisc;
10 -> bPtyDisc;
11 -> routeSelectFailure;
12 -> oNoAnswer;
13 -> terminationDenied;
14 -> notReachable;
15 -> bPtyNoAnswer;
16 -> bPtyBusyUDUB;
17 -> bPtyBusyNDUB;
18 -> ss7Failure;
19 -> calledPartyRejected;
20 -> tException;
21 -> routeFailure1;
22 -> routeFailure2;
23 -> ssActivating;
24 -> conversationTimeout;
25 -> noCircuitAvailable;
26 -> coreNotification;
27 -> unsupportedMedia;
28 -> numberIncomplete;
29 -> invalidNumber;
30 -> unassignedNumber;
31 -> doNotDisturb;
32 -> externalControlled;
33 -> systemFailure;
34 -> applicationNotification;
35 -> referOk;
36 -> referFailure;
37 -> hole;
38 -> hold;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end, TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute timeToRelease(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
Val1 = decode_integer(V2, []),
if 0 =< Val1, Val1 =< 2147483647 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute forcedRelease(3) with type BOOLEAN DEFAULT = false
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {decode_boolean(V3, []), TempTlv4};
    _ ->
        {false,Tlv3}
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ReleaseCallArg_allCallSegments', Term1, Term2, Term3}.



%%================================
%%  ReportUTSIArg
%%================================
'enc_ReportUTSIArg'(Val) ->
    'enc_ReportUTSIArg'(Val, [<<48>>]).

'enc_ReportUTSIArg'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute uSIServiceIndicator(1)   External INCS3datatypes:USIServiceIndicator
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'INCS3datatypes':'enc_USIServiceIndicator'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute legID(2)   External INCS3opsargs:LegID DEFAULT = {receivingSideID,<<1>>}
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_DEFAULT -> {<<>>,0};
         {receivingSideID,<<1>>} -> {<<>>,0};
         _ ->
            'enc_LegID'(Cindex2, [<<161>>])
       end,

%%-------------------------------------------------
%% attribute uSIInformation(3) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_restricted_string(Cindex3, [<<130>>]),

%%-------------------------------------------------
%% attribute extensions(4)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Extensions'(Cindex4, [<<163>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_ReportUTSIArg'(Tlv) ->
   'dec_ReportUTSIArg'(Tlv, [16]).

'dec_ReportUTSIArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute uSIServiceIndicator(1)   External INCS3datatypes:USIServiceIndicator
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'INCS3datatypes':'dec_USIServiceIndicator'(V1, [131072]),

%%-------------------------------------------------
%% attribute legID(2)   External INCS3opsargs:LegID DEFAULT = {receivingSideID,<<1>>}
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_LegID'(V2, []), TempTlv3};
    _ ->
        {{receivingSideID,<<1>>},Tlv2}
end,

%%-------------------------------------------------
%% attribute uSIInformation(3) with type OCTET STRING
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = begin
Val1 = decode_octet_string(V3, [131074]),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 5 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute extensions(4)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'INCS3datatypes':'dec_Extensions'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

case Tlv5 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed
end,
   {'ReportUTSIArg', Term1, Term2, Term3, Term4}.



%%================================
%%  RequestCurrentStatusReportArg
%%================================
'enc_RequestCurrentStatusReportArg'(Val) ->
    'enc_RequestCurrentStatusReportArg'(Val, []).

'enc_RequestCurrentStatusReportArg'(Val, TagIn) ->
   'INCS3datatypes':'enc_ResourceID'(Val, TagIn).


'dec_RequestCurrentStatusReportArg'(Tlv) ->
   'dec_RequestCurrentStatusReportArg'(Tlv, []).

'dec_RequestCurrentStatusReportArg'(Tlv, TagIn) ->
'INCS3datatypes':'dec_ResourceID'(Tlv, TagIn).



%%================================
%%  RequestCurrentStatusReportResultArg
%%================================
'enc_RequestCurrentStatusReportResultArg'(Val) ->
    'enc_RequestCurrentStatusReportResultArg'(Val, [<<48>>]).

'enc_RequestCurrentStatusReportResultArg'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute resourceStatus(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
busy -> encode_tags([<<128>>], [0], 1);
idle -> encode_tags([<<128>>], [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute resourceID(2)   External INCS3datatypes:ResourceID OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_ResourceID'(Cindex2, [<<161>>])
       end,

%%-------------------------------------------------
%% attribute extensions(3)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Extensions'(Cindex3, [<<162>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_RequestCurrentStatusReportResultArg'(Tlv) ->
   'dec_RequestCurrentStatusReportResultArg'(Tlv, [16]).

'dec_RequestCurrentStatusReportResultArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute resourceStatus(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> busy;
1 -> idle;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute resourceID(2)   External INCS3datatypes:ResourceID OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'INCS3datatypes':'dec_ResourceID'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute extensions(3)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'INCS3datatypes':'dec_Extensions'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'RequestCurrentStatusReportResultArg', Term1, Term2, Term3}.



%%================================
%%  RequestEveryStatusChangeReportArg
%%================================
'enc_RequestEveryStatusChangeReportArg'(Val) ->
    'enc_RequestEveryStatusChangeReportArg'(Val, [<<48>>]).

'enc_RequestEveryStatusChangeReportArg'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute resourceID(1)   External INCS3datatypes:ResourceID
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'INCS3datatypes':'enc_ResourceID'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute correlationID(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute monitorDuration(3) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute extensions(4)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Extensions'(Cindex4, [<<163>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_RequestEveryStatusChangeReportArg'(Tlv) ->
   'dec_RequestEveryStatusChangeReportArg'(Tlv, [16]).

'dec_RequestEveryStatusChangeReportArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute resourceID(1)   External INCS3datatypes:ResourceID
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'INCS3datatypes':'dec_ResourceID'(V1, [131072]),

%%-------------------------------------------------
%% attribute correlationID(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
Val1 = decode_octet_string(V2, []),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 27 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute monitorDuration(3) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {begin
Val2 = decode_integer(V3, []),
if -2 =< Val2, Val2 =< 86400 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute extensions(4)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'INCS3datatypes':'dec_Extensions'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

case Tlv5 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed
end,
   {'RequestEveryStatusChangeReportArg', Term1, Term2, Term3, Term4}.



%%================================
%%  RequestFirstStatusMatchReportArg
%%================================
'enc_RequestFirstStatusMatchReportArg'(Val) ->
    'enc_RequestFirstStatusMatchReportArg'(Val, [<<48>>]).

'enc_RequestFirstStatusMatchReportArg'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6} = Val,

%%-------------------------------------------------
%% attribute resourceID(1)   External INCS3datatypes:ResourceID OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_ResourceID'(Cindex1, [<<160>>])
       end,

%%-------------------------------------------------
%% attribute resourceStatus(2) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex2 of
busy -> encode_tags([<<129>>], [0], 1);
idle -> encode_tags([<<129>>], [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end
       end,

%%-------------------------------------------------
%% attribute correlationID(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute monitorDuration(4) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex4, [<<131>>])
       end,

%%-------------------------------------------------
%% attribute extensions(5)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Extensions'(Cindex5, [<<164>>])
       end,

%%-------------------------------------------------
%% attribute bearerCapability(6)   External INCS3datatypes:BearerCapability OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_BearerCapability'(Cindex6, [<<165>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_RequestFirstStatusMatchReportArg'(Tlv) ->
   'dec_RequestFirstStatusMatchReportArg'(Tlv, [16]).

'dec_RequestFirstStatusMatchReportArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute resourceID(1)   External INCS3datatypes:ResourceID OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {'INCS3datatypes':'dec_ResourceID'(V1, []), TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute resourceStatus(2) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {case decode_integer(V2, []) of
0 -> busy;
1 -> idle;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute correlationID(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {begin
Val1 = decode_octet_string(V3, []),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 27 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute monitorDuration(4) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {begin
Val2 = decode_integer(V4, []),
if -2 =< Val2, Val2 =< 86400 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute extensions(5)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {'INCS3datatypes':'dec_Extensions'(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute bearerCapability(6)   External INCS3datatypes:BearerCapability OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {'INCS3datatypes':'dec_BearerCapability'(V6, []), TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

case Tlv7 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv7}}}) % extra fields not allowed
end,
   {'RequestFirstStatusMatchReportArg', Term1, Term2, Term3, Term4, Term5, Term6}.



%%================================
%%  RequestNotificationChargingEventArg
%%================================
'enc_RequestNotificationChargingEventArg'(Val) ->
    'enc_RequestNotificationChargingEventArg'(Val, [<<48>>]).

'enc_RequestNotificationChargingEventArg'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_RequestNotificationChargingEventArg_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_RequestNotificationChargingEventArg_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_RequestNotificationChargingEventArg_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'INCS3datatypes':'enc_ChargingEvent'(H, [<<48>>]),
   'enc_RequestNotificationChargingEventArg_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_RequestNotificationChargingEventArg'(Tlv) ->
   'dec_RequestNotificationChargingEventArg'(Tlv, [16]).

'dec_RequestNotificationChargingEventArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['INCS3datatypes':'dec_ChargingEvent'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  RequestReportBCSMEventArg
%%================================
'enc_RequestReportBCSMEventArg'(Val) ->
    'enc_RequestReportBCSMEventArg'(Val, [<<48>>]).

'enc_RequestReportBCSMEventArg'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute bcsmEvents(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_RequestReportBCSMEventArg_bcsmEvents'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute bcsmEventCorrelationID(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute extensions(3)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Extensions'(Cindex3, [<<162>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  RequestReportBCSMEventArg_bcsmEvents
%%================================
'enc_RequestReportBCSMEventArg_bcsmEvents'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_RequestReportBCSMEventArg_bcsmEvents_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_RequestReportBCSMEventArg_bcsmEvents_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_RequestReportBCSMEventArg_bcsmEvents_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'INCS3datatypes':'enc_BCSMEvent'(H, [<<48>>]),
   'enc_RequestReportBCSMEventArg_bcsmEvents_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_RequestReportBCSMEventArg'(Tlv) ->
   'dec_RequestReportBCSMEventArg'(Tlv, [16]).

'dec_RequestReportBCSMEventArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute bcsmEvents(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_RequestReportBCSMEventArg_bcsmEvents'(V1, [131072]),

%%-------------------------------------------------
%% attribute bcsmEventCorrelationID(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
Val1 = decode_octet_string(V2, []),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 27 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute extensions(3)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'INCS3datatypes':'dec_Extensions'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'RequestReportBCSMEventArg', Term1, Term2, Term3}.

'dec_RequestReportBCSMEventArg_bcsmEvents'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['INCS3datatypes':'dec_BCSMEvent'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  RequestReportFacilityEventArg
%%================================
'enc_RequestReportFacilityEventArg'(Val) ->
    'enc_RequestReportFacilityEventArg'(Val, [<<48>>]).

'enc_RequestReportFacilityEventArg'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5} = Val,

%%-------------------------------------------------
%% attribute componentTypes(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_RequestReportFacilityEventArg_componentTypes'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute legID(2)   External INCS3opsargs:LegID OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_LegID'(Cindex2, [<<161>>])
       end,

%%-------------------------------------------------
%% attribute componentCorrelationID(3) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute monitorDuration(4) with type INTEGER
%%-------------------------------------------------
   {EncBytes4,EncLen4} = encode_integer(Cindex4, [<<131>>]),

%%-------------------------------------------------
%% attribute extensions(5)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Extensions'(Cindex5, [<<164>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  RequestReportFacilityEventArg_componentTypes
%%================================
'enc_RequestReportFacilityEventArg_componentTypes'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_RequestReportFacilityEventArg_componentTypes_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_RequestReportFacilityEventArg_componentTypes_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_RequestReportFacilityEventArg_componentTypes_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = case H of
anny -> encode_tags([<<10>>], [0], 1);
invoke -> encode_tags([<<10>>], [1], 1);
rResult -> encode_tags([<<10>>], [2], 1);
rError -> encode_tags([<<10>>], [3], 1);
rReject -> encode_tags([<<10>>], [4], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,
   'enc_RequestReportFacilityEventArg_componentTypes_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_RequestReportFacilityEventArg'(Tlv) ->
   'dec_RequestReportFacilityEventArg'(Tlv, [16]).

'dec_RequestReportFacilityEventArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute componentTypes(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_RequestReportFacilityEventArg_componentTypes'(V1, [131072]),

%%-------------------------------------------------
%% attribute legID(2)   External INCS3opsargs:LegID OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_LegID'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute componentCorrelationID(3) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {decode_integer(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute monitorDuration(4) with type INTEGER
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = begin
Val1 = decode_integer(V4, [131075]),
if -2 =< Val1, Val1 =< 86400 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute extensions(5)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {'INCS3datatypes':'dec_Extensions'(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

case Tlv6 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv6}}}) % extra fields not allowed
end,
   {'RequestReportFacilityEventArg', Term1, Term2, Term3, Term4, Term5}.

'dec_RequestReportFacilityEventArg_componentTypes'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[case decode_integer(V1, [10]) of
0 -> anny;
1 -> invoke;
2 -> rResult;
3 -> rError;
4 -> rReject;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end || V1 <- Tlv1].




%%================================
%%  RequestReportUTSIArg
%%================================
'enc_RequestReportUTSIArg'(Val) ->
    'enc_RequestReportUTSIArg'(Val, [<<48>>]).

'enc_RequestReportUTSIArg'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute requestedUTSIList(1)   External INCS3datatypes:RequestedUTSIList
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'INCS3datatypes':'enc_RequestedUTSIList'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute extensions(2)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Extensions'(Cindex2, [<<161>>])
       end,

%%-------------------------------------------------
%% attribute legID(3)   External INCS3opsargs:LegID DEFAULT = {sendingSideID,<<1>>}
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_DEFAULT -> {<<>>,0};
         {sendingSideID,<<1>>} -> {<<>>,0};
         _ ->
            'enc_LegID'(Cindex3, [<<162>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_RequestReportUTSIArg'(Tlv) ->
   'dec_RequestReportUTSIArg'(Tlv, [16]).

'dec_RequestReportUTSIArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute requestedUTSIList(1)   External INCS3datatypes:RequestedUTSIList
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'INCS3datatypes':'dec_RequestedUTSIList'(V1, [131072]),

%%-------------------------------------------------
%% attribute extensions(2)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'INCS3datatypes':'dec_Extensions'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute legID(3)   External INCS3opsargs:LegID DEFAULT = {sendingSideID,<<1>>}
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_LegID'(V3, []), TempTlv4};
    _ ->
        {{sendingSideID,<<1>>},Tlv3}
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'RequestReportUTSIArg', Term1, Term2, Term3}.



%%================================
%%  ResetTimerArg
%%================================
'enc_ResetTimerArg'(Val) ->
    'enc_ResetTimerArg'(Val, [<<48>>]).

'enc_ResetTimerArg'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute timerID(1) with type ENUMERATED DEFAULT = tssf
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_DEFAULT -> {<<>>,0};
         tssf -> {<<>>,0};
         _ ->
            case Cindex1 of
tssf -> encode_tags([<<128>>], [0], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end
       end,

%%-------------------------------------------------
%% attribute timervalue(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute extensions(3)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Extensions'(Cindex3, [<<162>>])
       end,

%%-------------------------------------------------
%% attribute callSegmentID(4) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex4, [<<131>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_ResetTimerArg'(Tlv) ->
   'dec_ResetTimerArg'(Tlv, [16]).

'dec_ResetTimerArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute timerID(1) with type ENUMERATED DEFAULT = tssf
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {case decode_integer(V1, []) of
0 -> tssf;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end, TempTlv2};
    _ ->
        {tssf,Tlv1}
end,

%%-------------------------------------------------
%% attribute timervalue(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val1 = decode_integer(V2, [131073]),
if 0 =< Val1, Val1 =< 2147483647 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute extensions(3)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'INCS3datatypes':'dec_Extensions'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute callSegmentID(4) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {begin
Val2 = decode_integer(V4, []),
if 1 =< Val2, Val2 =< 10 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

case Tlv5 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed
end,
   {'ResetTimerArg', Term1, Term2, Term3, Term4}.



%%================================
%%  RouteSelectFailureArg
%%================================
'enc_RouteSelectFailureArg'(Val) ->
    'enc_RouteSelectFailureArg'(Val, [<<48>>]).

'enc_RouteSelectFailureArg'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8, Cindex9, Cindex10, Cindex11, Cindex12, Cindex13, Cindex14, Cindex15} = Val,

%%-------------------------------------------------
%% attribute dpSpecificCommonParameters(1)   External INCS3datatypes:DpSpecificCommonParameters
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'INCS3datatypes':'enc_DpSpecificCommonParameters'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute dialledDigits(2)   External ACPdatatypes:CalledPartyNumber OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'ACPdatatypes':'enc_CalledPartyNumber'(Cindex2, [<<161>>])
       end,

%%-------------------------------------------------
%% attribute callingPartyBusinessGroupID(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute callingPartySubaddress(4) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex4, [<<131>>])
       end,

%%-------------------------------------------------
%% attribute callingFacilityGroup(5)   External INCS3datatypes:FacilityGroup OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_FacilityGroup'(Cindex5, [<<164>>])
       end,

%%-------------------------------------------------
%% attribute callingFacilityGroupMember(6) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex6, [<<133>>])
       end,

%%-------------------------------------------------
%% attribute failureCause(7) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex7 of
normal -> encode_tags([<<134>>], [0], 1);
originationDenied -> encode_tags([<<134>>], [1], 1);
collectDigits -> encode_tags([<<134>>], [2], 1);
authorisationFailure -> encode_tags([<<134>>], [3], 1);
bPtyAlerted -> encode_tags([<<134>>], [4], 1);
noIndication -> encode_tags([<<134>>], [5], 1);
aPtyAbandon -> encode_tags([<<134>>], [6], 1);
invalidCollectedInformation -> encode_tags([<<134>>], [7], 1);
collectInformationFailure -> encode_tags([<<134>>], [8], 1);
aPtyDisc -> encode_tags([<<134>>], [9], 1);
bPtyDisc -> encode_tags([<<134>>], [10], 1);
routeSelectFailure -> encode_tags([<<134>>], [11], 1);
oNoAnswer -> encode_tags([<<134>>], [12], 1);
terminationDenied -> encode_tags([<<134>>], [13], 1);
notReachable -> encode_tags([<<134>>], [14], 1);
bPtyNoAnswer -> encode_tags([<<134>>], [15], 1);
bPtyBusyUDUB -> encode_tags([<<134>>], [16], 1);
bPtyBusyNDUB -> encode_tags([<<134>>], [17], 1);
ss7Failure -> encode_tags([<<134>>], [18], 1);
calledPartyRejected -> encode_tags([<<134>>], [19], 1);
tException -> encode_tags([<<134>>], [20], 1);
routeFailure1 -> encode_tags([<<134>>], [21], 1);
routeFailure2 -> encode_tags([<<134>>], [22], 1);
ssActivating -> encode_tags([<<134>>], [23], 1);
conversationTimeout -> encode_tags([<<134>>], [24], 1);
noCircuitAvailable -> encode_tags([<<134>>], [25], 1);
coreNotification -> encode_tags([<<134>>], [26], 1);
unsupportedMedia -> encode_tags([<<134>>], [27], 1);
numberIncomplete -> encode_tags([<<134>>], [28], 1);
invalidNumber -> encode_tags([<<134>>], [29], 1);
unassignedNumber -> encode_tags([<<134>>], [30], 1);
doNotDisturb -> encode_tags([<<134>>], [31], 1);
externalControlled -> encode_tags([<<134>>], [32], 1);
systemFailure -> encode_tags([<<134>>], [33], 1);
applicationNotification -> encode_tags([<<134>>], [34], 1);
referOk -> encode_tags([<<134>>], [35], 1);
referFailure -> encode_tags([<<134>>], [36], 1);
hole -> encode_tags([<<134>>], [37], 1);
hold -> encode_tags([<<134>>], [38], 1);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end
       end,

%%-------------------------------------------------
%% attribute originalCalledPartyID(8) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case Cindex8 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex8, [<<135>>])
       end,

%%-------------------------------------------------
%% attribute prefix(9) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes9,EncLen9} =  case Cindex9 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex9, [<<136>>])
       end,

%%-------------------------------------------------
%% attribute redirectingPartyID(10) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes10,EncLen10} =  case Cindex10 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex10, [<<137>>])
       end,

%%-------------------------------------------------
%% attribute redirectionInformation(11) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes11,EncLen11} =  case Cindex11 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex11, [<<138>>])
       end,

%%-------------------------------------------------
%% attribute routeList(12)   External INCS3datatypes:RouteList OPTIONAL
%%-------------------------------------------------
   {EncBytes12,EncLen12} =  case Cindex12 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_RouteList'(Cindex12, [<<171>>])
       end,

%%-------------------------------------------------
%% attribute travellingClassMark(13) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes13,EncLen13} =  case Cindex13 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex13, [<<140>>])
       end,

%%-------------------------------------------------
%% attribute extensions(14)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes14,EncLen14} =  case Cindex14 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Extensions'(Cindex14, [<<173>>])
       end,

%%-------------------------------------------------
%% attribute carrier(15) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes15,EncLen15} =  case Cindex15 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex15, [<<142>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10, EncBytes11, EncBytes12, EncBytes13, EncBytes14, EncBytes15],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10 + EncLen11 + EncLen12 + EncLen13 + EncLen14 + EncLen15,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_RouteSelectFailureArg'(Tlv) ->
   'dec_RouteSelectFailureArg'(Tlv, [16]).

'dec_RouteSelectFailureArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute dpSpecificCommonParameters(1)   External INCS3datatypes:DpSpecificCommonParameters
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'INCS3datatypes':'dec_DpSpecificCommonParameters'(V1, [131072]),

%%-------------------------------------------------
%% attribute dialledDigits(2)   External ACPdatatypes:CalledPartyNumber OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'ACPdatatypes':'dec_CalledPartyNumber'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute callingPartyBusinessGroupID(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {decode_octet_string(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute callingPartySubaddress(4) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {begin
Val1 = decode_octet_string(V4, []),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 27 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute callingFacilityGroup(5)   External INCS3datatypes:FacilityGroup OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {'INCS3datatypes':'dec_FacilityGroup'(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute callingFacilityGroupMember(6) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {decode_integer(V6, []), TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute failureCause(7) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {case decode_integer(V7, []) of
0 -> normal;
1 -> originationDenied;
2 -> collectDigits;
3 -> authorisationFailure;
4 -> bPtyAlerted;
5 -> noIndication;
6 -> aPtyAbandon;
7 -> invalidCollectedInformation;
8 -> collectInformationFailure;
9 -> aPtyDisc;
10 -> bPtyDisc;
11 -> routeSelectFailure;
12 -> oNoAnswer;
13 -> terminationDenied;
14 -> notReachable;
15 -> bPtyNoAnswer;
16 -> bPtyBusyUDUB;
17 -> bPtyBusyNDUB;
18 -> ss7Failure;
19 -> calledPartyRejected;
20 -> tException;
21 -> routeFailure1;
22 -> routeFailure2;
23 -> ssActivating;
24 -> conversationTimeout;
25 -> noCircuitAvailable;
26 -> coreNotification;
27 -> unsupportedMedia;
28 -> numberIncomplete;
29 -> invalidNumber;
30 -> unassignedNumber;
31 -> doNotDisturb;
32 -> externalControlled;
33 -> systemFailure;
34 -> applicationNotification;
35 -> referOk;
36 -> referFailure;
37 -> hole;
38 -> hold;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end, TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

%%-------------------------------------------------
%% attribute originalCalledPartyID(8) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term8,Tlv9} = case Tlv8 of
[{131079,V8}|TempTlv9] ->
    {begin
Val2 = decode_octet_string(V8, []),
C2 = byte_size(Val2),
if 1 =< C2, C2 =< 15 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv9};
    _ ->
        { asn1_NOVALUE, Tlv8}
end,

%%-------------------------------------------------
%% attribute prefix(9) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term9,Tlv10} = case Tlv9 of
[{131080,V9}|TempTlv10] ->
    {begin
Val3 = decode_octet_string(V9, []),
C3 = byte_size(Val3),
if 1 =< C3, C3 =< 27 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv10};
    _ ->
        { asn1_NOVALUE, Tlv9}
end,

%%-------------------------------------------------
%% attribute redirectingPartyID(10) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term10,Tlv11} = case Tlv10 of
[{131081,V10}|TempTlv11] ->
    {begin
Val4 = decode_octet_string(V10, []),
C4 = byte_size(Val4),
if 1 =< C4, C4 =< 27 ->
Val4;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv11};
    _ ->
        { asn1_NOVALUE, Tlv10}
end,

%%-------------------------------------------------
%% attribute redirectionInformation(11) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term11,Tlv12} = case Tlv11 of
[{131082,V11}|TempTlv12] ->
    {begin
Val5 = decode_octet_string(V11, []),
C5 = byte_size(Val5),
if C5 =:= 2 ->
Val5;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv12};
    _ ->
        { asn1_NOVALUE, Tlv11}
end,

%%-------------------------------------------------
%% attribute routeList(12)   External INCS3datatypes:RouteList OPTIONAL
%%-------------------------------------------------
{Term12,Tlv13} = case Tlv12 of
[{131083,V12}|TempTlv13] ->
    {'INCS3datatypes':'dec_RouteList'(V12, []), TempTlv13};
    _ ->
        { asn1_NOVALUE, Tlv12}
end,

%%-------------------------------------------------
%% attribute travellingClassMark(13) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term13,Tlv14} = case Tlv13 of
[{131084,V13}|TempTlv14] ->
    {begin
Val6 = decode_octet_string(V13, []),
C6 = byte_size(Val6),
if 1 =< C6, C6 =< 27 ->
Val6;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv14};
    _ ->
        { asn1_NOVALUE, Tlv13}
end,

%%-------------------------------------------------
%% attribute extensions(14)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term14,Tlv15} = case Tlv14 of
[{131085,V14}|TempTlv15] ->
    {'INCS3datatypes':'dec_Extensions'(V14, []), TempTlv15};
    _ ->
        { asn1_NOVALUE, Tlv14}
end,

%%-------------------------------------------------
%% attribute carrier(15) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term15,Tlv16} = case Tlv15 of
[{131086,V15}|TempTlv16] ->
    {begin
Val7 = decode_octet_string(V15, []),
C7 = byte_size(Val7),
if 3 =< C7, C7 =< 10 ->
Val7;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv16};
    _ ->
        { asn1_NOVALUE, Tlv15}
end,

case Tlv16 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv16}}}) % extra fields not allowed
end,
   {'RouteSelectFailureArg', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9, Term10, Term11, Term12, Term13, Term14, Term15}.



%%================================
%%  SelectFacilityArg
%%================================
'enc_SelectFacilityArg'(Val) ->
    'enc_SelectFacilityArg'(Val, [<<48>>]).

'enc_SelectFacilityArg'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8, Cindex9, Cindex10, Cindex11, Cindex12, Cindex13, Cindex14, Cindex15, Cindex16, Cindex17} = Val,

%%-------------------------------------------------
%% attribute alertingPattern(1) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex1, [<<128>>])
       end,

%%-------------------------------------------------
%% attribute destinationNumberRoutingAddress(2)   External ACPdatatypes:CalledPartyNumber OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'ACPdatatypes':'enc_CalledPartyNumber'(Cindex2, [<<161>>])
       end,

%%-------------------------------------------------
%% attribute iSDNAccessRelatedInformation(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute calledFacilityGroup(4)   External INCS3datatypes:FacilityGroup OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_FacilityGroup'(Cindex4, [<<163>>])
       end,

%%-------------------------------------------------
%% attribute calledFacilityGroupMember(5) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex5, [<<132>>])
       end,

%%-------------------------------------------------
%% attribute originalCalledPartyID(6) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex6, [<<133>>])
       end,

%%-------------------------------------------------
%% attribute extensions(7)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Extensions'(Cindex7, [<<166>>])
       end,

%%-------------------------------------------------
%% attribute displayInformation(8) with type IA5String OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case Cindex8 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex8, [<<135>>])
       end,

%%-------------------------------------------------
%% attribute serviceInteractionIndicators(9) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes9,EncLen9} =  case Cindex9 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex9, [<<136>>])
       end,

%%-------------------------------------------------
%% attribute iNServiceCompatibilityResponse(10)   External INCS3datatypes:INServiceCompatibilityResponse OPTIONAL
%%-------------------------------------------------
   {EncBytes10,EncLen10} =  case Cindex10 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_INServiceCompatibilityResponse'(Cindex10, [<<169>>])
       end,

%%-------------------------------------------------
%% attribute forwardGVNS(11) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes11,EncLen11} =  case Cindex11 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex11, [<<138>>])
       end,

%%-------------------------------------------------
%% attribute backwardGVNS(12) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes12,EncLen12} =  case Cindex12 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex12, [<<139>>])
       end,

%%-------------------------------------------------
%% attribute serviceInteractionIndicatorsTwo(13)   External INCS3datatypes:ServiceInteractionIndicatorsTwo OPTIONAL
%%-------------------------------------------------
   {EncBytes13,EncLen13} =  case Cindex13 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_ServiceInteractionIndicatorsTwo'(Cindex13, [<<172>>])
       end,

%%-------------------------------------------------
%% attribute correlationID(14) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes14,EncLen14} =  case Cindex14 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex14, [<<141>>])
       end,

%%-------------------------------------------------
%% attribute scfID(15) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes15,EncLen15} =  case Cindex15 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex15, [<<142>>])
       end,

%%-------------------------------------------------
%% attribute callSegmentID(16) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes16,EncLen16} =  case Cindex16 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex16, [<<143>>])
       end,

%%-------------------------------------------------
%% attribute legToBeCreated(17)   External INCS3opsargs:LegID OPTIONAL
%%-------------------------------------------------
   {EncBytes17,EncLen17} =  case Cindex17 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_LegID'(Cindex17, [<<176>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10, EncBytes11, EncBytes12, EncBytes13, EncBytes14, EncBytes15, EncBytes16, EncBytes17],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10 + EncLen11 + EncLen12 + EncLen13 + EncLen14 + EncLen15 + EncLen16 + EncLen17,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_SelectFacilityArg'(Tlv) ->
   'dec_SelectFacilityArg'(Tlv, [16]).

'dec_SelectFacilityArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute alertingPattern(1) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {begin
Val1 = decode_octet_string(V1, []),
C1 = byte_size(Val1),
if C1 =:= 3 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute destinationNumberRoutingAddress(2)   External ACPdatatypes:CalledPartyNumber OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'ACPdatatypes':'dec_CalledPartyNumber'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute iSDNAccessRelatedInformation(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {begin
Val2 = decode_octet_string(V3, []),
C2 = byte_size(Val2),
if 1 =< C2, C2 =< 10 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute calledFacilityGroup(4)   External INCS3datatypes:FacilityGroup OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'INCS3datatypes':'dec_FacilityGroup'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute calledFacilityGroupMember(5) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {decode_integer(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute originalCalledPartyID(6) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {begin
Val3 = decode_octet_string(V6, []),
C3 = byte_size(Val3),
if 1 =< C3, C3 =< 15 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute extensions(7)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {'INCS3datatypes':'dec_Extensions'(V7, []), TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

%%-------------------------------------------------
%% attribute displayInformation(8) with type IA5String OPTIONAL
%%-------------------------------------------------
{Term8,Tlv9} = case Tlv8 of
[{131079,V8}|TempTlv9] ->
    {begin
Val4 = decode_restricted_string(V8, []),
C4 = byte_size(Val4),
if 1 =< C4, C4 =< 27 ->
binary_to_list(Val4);
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv9};
    _ ->
        { asn1_NOVALUE, Tlv8}
end,

%%-------------------------------------------------
%% attribute serviceInteractionIndicators(9) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term9,Tlv10} = case Tlv9 of
[{131080,V9}|TempTlv10] ->
    {begin
Val5 = decode_octet_string(V9, []),
C5 = byte_size(Val5),
if 1 =< C5, C5 =< 5 ->
Val5;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv10};
    _ ->
        { asn1_NOVALUE, Tlv9}
end,

%%-------------------------------------------------
%% attribute iNServiceCompatibilityResponse(10)   External INCS3datatypes:INServiceCompatibilityResponse OPTIONAL
%%-------------------------------------------------
{Term10,Tlv11} = case Tlv10 of
[{131081,V10}|TempTlv11] ->
    {'INCS3datatypes':'dec_INServiceCompatibilityResponse'(V10, []), TempTlv11};
    _ ->
        { asn1_NOVALUE, Tlv10}
end,

%%-------------------------------------------------
%% attribute forwardGVNS(11) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term11,Tlv12} = case Tlv11 of
[{131082,V11}|TempTlv12] ->
    {begin
Val6 = decode_octet_string(V11, []),
C6 = byte_size(Val6),
if 1 =< C6, C6 =< 27 ->
Val6;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv12};
    _ ->
        { asn1_NOVALUE, Tlv11}
end,

%%-------------------------------------------------
%% attribute backwardGVNS(12) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term12,Tlv13} = case Tlv12 of
[{131083,V12}|TempTlv13] ->
    {begin
Val7 = decode_octet_string(V12, []),
C7 = byte_size(Val7),
if 1 =< C7, C7 =< 27 ->
Val7;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv13};
    _ ->
        { asn1_NOVALUE, Tlv12}
end,

%%-------------------------------------------------
%% attribute serviceInteractionIndicatorsTwo(13)   External INCS3datatypes:ServiceInteractionIndicatorsTwo OPTIONAL
%%-------------------------------------------------
{Term13,Tlv14} = case Tlv13 of
[{131084,V13}|TempTlv14] ->
    {'INCS3datatypes':'dec_ServiceInteractionIndicatorsTwo'(V13, []), TempTlv14};
    _ ->
        { asn1_NOVALUE, Tlv13}
end,

%%-------------------------------------------------
%% attribute correlationID(14) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term14,Tlv15} = case Tlv14 of
[{131085,V14}|TempTlv15] ->
    {begin
Val8 = decode_octet_string(V14, []),
C8 = byte_size(Val8),
if 1 =< C8, C8 =< 27 ->
Val8;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv15};
    _ ->
        { asn1_NOVALUE, Tlv14}
end,

%%-------------------------------------------------
%% attribute scfID(15) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term15,Tlv16} = case Tlv15 of
[{131086,V15}|TempTlv16] ->
    {begin
Val9 = decode_octet_string(V15, []),
C9 = byte_size(Val9),
if 1 =< C9, C9 =< 27 ->
Val9;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv16};
    _ ->
        { asn1_NOVALUE, Tlv15}
end,

%%-------------------------------------------------
%% attribute callSegmentID(16) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term16,Tlv17} = case Tlv16 of
[{131087,V16}|TempTlv17] ->
    {begin
Val10 = decode_integer(V16, []),
if 1 =< Val10, Val10 =< 10 ->
Val10;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv17};
    _ ->
        { asn1_NOVALUE, Tlv16}
end,

%%-------------------------------------------------
%% attribute legToBeCreated(17)   External INCS3opsargs:LegID OPTIONAL
%%-------------------------------------------------
{Term17,Tlv18} = case Tlv17 of
[{131088,V17}|TempTlv18] ->
    {'dec_LegID'(V17, []), TempTlv18};
    _ ->
        { asn1_NOVALUE, Tlv17}
end,

case Tlv18 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv18}}}) % extra fields not allowed
end,
   {'SelectFacilityArg', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9, Term10, Term11, Term12, Term13, Term14, Term15, Term16, Term17}.



%%================================
%%  SelectRouteArg
%%================================
'enc_SelectRouteArg'(Val) ->
    'enc_SelectRouteArg'(Val, [<<48>>]).

'enc_SelectRouteArg'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8, Cindex9, Cindex10, Cindex11, Cindex12, Cindex13, Cindex14, Cindex15, Cindex16, Cindex17} = Val,

%%-------------------------------------------------
%% attribute destinationRoutingAddress(1)   External INCS3datatypes:DestinationRoutingAddress
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'INCS3datatypes':'enc_DestinationRoutingAddress'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute alertingPattern(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute correlationID(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute iSDNAccessRelatedInformation(4) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex4, [<<131>>])
       end,

%%-------------------------------------------------
%% attribute originalCalledPartyID(5) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex5, [<<132>>])
       end,

%%-------------------------------------------------
%% attribute routeList(6)   External INCS3datatypes:RouteList OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_RouteList'(Cindex6, [<<165>>])
       end,

%%-------------------------------------------------
%% attribute scfID(7) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex7, [<<134>>])
       end,

%%-------------------------------------------------
%% attribute travellingClassMark(8) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case Cindex8 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex8, [<<135>>])
       end,

%%-------------------------------------------------
%% attribute extensions(9)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes9,EncLen9} =  case Cindex9 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Extensions'(Cindex9, [<<168>>])
       end,

%%-------------------------------------------------
%% attribute carrier(10) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes10,EncLen10} =  case Cindex10 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex10, [<<137>>])
       end,

%%-------------------------------------------------
%% attribute serviceInteractionIndicators(11) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes11,EncLen11} =  case Cindex11 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex11, [<<138>>])
       end,

%%-------------------------------------------------
%% attribute iNServiceCompatibilityResponse(12)   External INCS3datatypes:INServiceCompatibilityResponse OPTIONAL
%%-------------------------------------------------
   {EncBytes12,EncLen12} =  case Cindex12 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_INServiceCompatibilityResponse'(Cindex12, [<<171>>])
       end,

%%-------------------------------------------------
%% attribute forwardGVNS(13) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes13,EncLen13} =  case Cindex13 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex13, [<<140>>])
       end,

%%-------------------------------------------------
%% attribute backwardGVNS(14) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes14,EncLen14} =  case Cindex14 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex14, [<<141>>])
       end,

%%-------------------------------------------------
%% attribute serviceInteractionIndicatorsTwo(15)   External INCS3datatypes:ServiceInteractionIndicatorsTwo OPTIONAL
%%-------------------------------------------------
   {EncBytes15,EncLen15} =  case Cindex15 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_ServiceInteractionIndicatorsTwo'(Cindex15, [<<174>>])
       end,

%%-------------------------------------------------
%% attribute callSegmentID(16) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes16,EncLen16} =  case Cindex16 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex16, [<<143>>])
       end,

%%-------------------------------------------------
%% attribute legToBeCreated(17)   External INCS3opsargs:LegID OPTIONAL
%%-------------------------------------------------
   {EncBytes17,EncLen17} =  case Cindex17 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_LegID'(Cindex17, [<<176>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10, EncBytes11, EncBytes12, EncBytes13, EncBytes14, EncBytes15, EncBytes16, EncBytes17],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10 + EncLen11 + EncLen12 + EncLen13 + EncLen14 + EncLen15 + EncLen16 + EncLen17,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_SelectRouteArg'(Tlv) ->
   'dec_SelectRouteArg'(Tlv, [16]).

'dec_SelectRouteArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute destinationRoutingAddress(1)   External INCS3datatypes:DestinationRoutingAddress
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'INCS3datatypes':'dec_DestinationRoutingAddress'(V1, [131072]),

%%-------------------------------------------------
%% attribute alertingPattern(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
Val1 = decode_octet_string(V2, []),
C1 = byte_size(Val1),
if C1 =:= 3 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute correlationID(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {begin
Val2 = decode_octet_string(V3, []),
C2 = byte_size(Val2),
if 1 =< C2, C2 =< 27 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute iSDNAccessRelatedInformation(4) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {begin
Val3 = decode_octet_string(V4, []),
C3 = byte_size(Val3),
if 1 =< C3, C3 =< 10 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute originalCalledPartyID(5) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {begin
Val4 = decode_octet_string(V5, []),
C4 = byte_size(Val4),
if 1 =< C4, C4 =< 15 ->
Val4;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute routeList(6)   External INCS3datatypes:RouteList OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {'INCS3datatypes':'dec_RouteList'(V6, []), TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute scfID(7) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {begin
Val5 = decode_octet_string(V7, []),
C5 = byte_size(Val5),
if 1 =< C5, C5 =< 27 ->
Val5;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

%%-------------------------------------------------
%% attribute travellingClassMark(8) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term8,Tlv9} = case Tlv8 of
[{131079,V8}|TempTlv9] ->
    {begin
Val6 = decode_octet_string(V8, []),
C6 = byte_size(Val6),
if 1 =< C6, C6 =< 27 ->
Val6;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv9};
    _ ->
        { asn1_NOVALUE, Tlv8}
end,

%%-------------------------------------------------
%% attribute extensions(9)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term9,Tlv10} = case Tlv9 of
[{131080,V9}|TempTlv10] ->
    {'INCS3datatypes':'dec_Extensions'(V9, []), TempTlv10};
    _ ->
        { asn1_NOVALUE, Tlv9}
end,

%%-------------------------------------------------
%% attribute carrier(10) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term10,Tlv11} = case Tlv10 of
[{131081,V10}|TempTlv11] ->
    {begin
Val7 = decode_octet_string(V10, []),
C7 = byte_size(Val7),
if 3 =< C7, C7 =< 10 ->
Val7;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv11};
    _ ->
        { asn1_NOVALUE, Tlv10}
end,

%%-------------------------------------------------
%% attribute serviceInteractionIndicators(11) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term11,Tlv12} = case Tlv11 of
[{131082,V11}|TempTlv12] ->
    {begin
Val8 = decode_octet_string(V11, []),
C8 = byte_size(Val8),
if 1 =< C8, C8 =< 5 ->
Val8;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv12};
    _ ->
        { asn1_NOVALUE, Tlv11}
end,

%%-------------------------------------------------
%% attribute iNServiceCompatibilityResponse(12)   External INCS3datatypes:INServiceCompatibilityResponse OPTIONAL
%%-------------------------------------------------
{Term12,Tlv13} = case Tlv12 of
[{131083,V12}|TempTlv13] ->
    {'INCS3datatypes':'dec_INServiceCompatibilityResponse'(V12, []), TempTlv13};
    _ ->
        { asn1_NOVALUE, Tlv12}
end,

%%-------------------------------------------------
%% attribute forwardGVNS(13) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term13,Tlv14} = case Tlv13 of
[{131084,V13}|TempTlv14] ->
    {begin
Val9 = decode_octet_string(V13, []),
C9 = byte_size(Val9),
if 1 =< C9, C9 =< 27 ->
Val9;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv14};
    _ ->
        { asn1_NOVALUE, Tlv13}
end,

%%-------------------------------------------------
%% attribute backwardGVNS(14) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term14,Tlv15} = case Tlv14 of
[{131085,V14}|TempTlv15] ->
    {begin
Val10 = decode_octet_string(V14, []),
C10 = byte_size(Val10),
if 1 =< C10, C10 =< 27 ->
Val10;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv15};
    _ ->
        { asn1_NOVALUE, Tlv14}
end,

%%-------------------------------------------------
%% attribute serviceInteractionIndicatorsTwo(15)   External INCS3datatypes:ServiceInteractionIndicatorsTwo OPTIONAL
%%-------------------------------------------------
{Term15,Tlv16} = case Tlv15 of
[{131086,V15}|TempTlv16] ->
    {'INCS3datatypes':'dec_ServiceInteractionIndicatorsTwo'(V15, []), TempTlv16};
    _ ->
        { asn1_NOVALUE, Tlv15}
end,

%%-------------------------------------------------
%% attribute callSegmentID(16) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term16,Tlv17} = case Tlv16 of
[{131087,V16}|TempTlv17] ->
    {begin
Val11 = decode_integer(V16, []),
if 1 =< Val11, Val11 =< 10 ->
Val11;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv17};
    _ ->
        { asn1_NOVALUE, Tlv16}
end,

%%-------------------------------------------------
%% attribute legToBeCreated(17)   External INCS3opsargs:LegID OPTIONAL
%%-------------------------------------------------
{Term17,Tlv18} = case Tlv17 of
[{131088,V17}|TempTlv18] ->
    {'dec_LegID'(V17, []), TempTlv18};
    _ ->
        { asn1_NOVALUE, Tlv17}
end,

case Tlv18 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv18}}}) % extra fields not allowed
end,
   {'SelectRouteArg', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9, Term10, Term11, Term12, Term13, Term14, Term15, Term16, Term17}.



%%================================
%%  SendChargingInformationArg
%%================================
'enc_SendChargingInformationArg'(Val) ->
    'enc_SendChargingInformationArg'(Val, [<<48>>]).

'enc_SendChargingInformationArg'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute sCIBillingChargingCharacteristics(1) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute partyToCharge(2)   External INCS3opsargs:LegID
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_LegID'(Cindex2, [<<161>>]),

%%-------------------------------------------------
%% attribute extensions(3)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Extensions'(Cindex3, [<<162>>])
       end,

%%-------------------------------------------------
%% attribute nocharge(4) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_boolean(Cindex4, [<<131>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_SendChargingInformationArg'(Tlv) ->
   'dec_SendChargingInformationArg'(Tlv, [16]).

'dec_SendChargingInformationArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute sCIBillingChargingCharacteristics(1) with type OCTET STRING
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_octet_string(V1, [131072]),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 27 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute partyToCharge(2)   External INCS3opsargs:LegID
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_LegID'(V2, [131073]),

%%-------------------------------------------------
%% attribute extensions(3)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'INCS3datatypes':'dec_Extensions'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute nocharge(4) with type BOOLEAN OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {decode_boolean(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

case Tlv5 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed
end,
   {'SendChargingInformationArg', Term1, Term2, Term3, Term4}.



%%================================
%%  SendFacilityInformationArg
%%================================
'enc_SendFacilityInformationArg'(Val) ->
    'enc_SendFacilityInformationArg'(Val, [<<48>>]).

'enc_SendFacilityInformationArg'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6} = Val,

%%-------------------------------------------------
%% attribute componentType(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
anny -> encode_tags([<<128>>], [0], 1);
invoke -> encode_tags([<<128>>], [1], 1);
rResult -> encode_tags([<<128>>], [2], 1);
rError -> encode_tags([<<128>>], [3], 1);
rReject -> encode_tags([<<128>>], [4], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute legID(2)   External INCS3opsargs:LegID OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_LegID'(Cindex2, [<<161>>])
       end,

%%-------------------------------------------------
%% attribute componentCorrelationID(3) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute component(4)   External INCS3datatypes:Component
%%-------------------------------------------------
   {EncBytes4,EncLen4} = 'INCS3datatypes':'enc_Component'(Cindex4, [<<163>>]),

%%-------------------------------------------------
%% attribute callProcessingOperationCorrelationID(5) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes5,EncLen5} = case Cindex5 of
aLERTing -> encode_tags([<<132>>], [1], 1);
sETUP -> encode_tags([<<132>>], [5], 1);
cONNNect -> encode_tags([<<132>>], [7], 1);
dISConnect -> encode_tags([<<132>>], [69], 1);
rELease -> encode_tags([<<132>>], [77], 1);
rELeaseCOMPlete -> encode_tags([<<132>>], [90], 1);
fACility -> encode_tags([<<132>>], [98], 1);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end,

%%-------------------------------------------------
%% attribute extensions(6)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Extensions'(Cindex6, [<<165>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_SendFacilityInformationArg'(Tlv) ->
   'dec_SendFacilityInformationArg'(Tlv, [16]).

'dec_SendFacilityInformationArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute componentType(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> anny;
1 -> invoke;
2 -> rResult;
3 -> rError;
4 -> rReject;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute legID(2)   External INCS3opsargs:LegID OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_LegID'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute componentCorrelationID(3) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {decode_integer(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute component(4)   External INCS3datatypes:Component
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = 'INCS3datatypes':'dec_Component'(V4, [131075]),

%%-------------------------------------------------
%% attribute callProcessingOperationCorrelationID(5) with type ENUMERATED
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = case decode_integer(V5, [131076]) of
1 -> aLERTing;
5 -> sETUP;
7 -> cONNNect;
69 -> dISConnect;
77 -> rELease;
90 -> rELeaseCOMPlete;
98 -> fACility;
Default2 -> exit({error,{asn1,{illegal_enumerated,Default2}}})
end,

%%-------------------------------------------------
%% attribute extensions(6)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {'INCS3datatypes':'dec_Extensions'(V6, []), TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

case Tlv7 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv7}}}) % extra fields not allowed
end,
   {'SendFacilityInformationArg', Term1, Term2, Term3, Term4, Term5, Term6}.



%%================================
%%  SendSTUIArg
%%================================
'enc_SendSTUIArg'(Val) ->
    'enc_SendSTUIArg'(Val, [<<48>>]).

'enc_SendSTUIArg'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute uSIServiceIndicator(1)   External INCS3datatypes:USIServiceIndicator
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'INCS3datatypes':'enc_USIServiceIndicator'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute legID(2)   External INCS3opsargs:LegID DEFAULT = {sendingSideID,<<1>>}
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_DEFAULT -> {<<>>,0};
         {sendingSideID,<<1>>} -> {<<>>,0};
         _ ->
            'enc_LegID'(Cindex2, [<<161>>])
       end,

%%-------------------------------------------------
%% attribute uSIInformation(3) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_restricted_string(Cindex3, [<<130>>]),

%%-------------------------------------------------
%% attribute extensions(4)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Extensions'(Cindex4, [<<163>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_SendSTUIArg'(Tlv) ->
   'dec_SendSTUIArg'(Tlv, [16]).

'dec_SendSTUIArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute uSIServiceIndicator(1)   External INCS3datatypes:USIServiceIndicator
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'INCS3datatypes':'dec_USIServiceIndicator'(V1, [131072]),

%%-------------------------------------------------
%% attribute legID(2)   External INCS3opsargs:LegID DEFAULT = {sendingSideID,<<1>>}
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_LegID'(V2, []), TempTlv3};
    _ ->
        {{sendingSideID,<<1>>},Tlv2}
end,

%%-------------------------------------------------
%% attribute uSIInformation(3) with type OCTET STRING
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = begin
Val1 = decode_octet_string(V3, [131074]),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 5 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute extensions(4)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'INCS3datatypes':'dec_Extensions'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

case Tlv5 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed
end,
   {'SendSTUIArg', Term1, Term2, Term3, Term4}.



%%================================
%%  ServiceFilteringResponseArg
%%================================
'enc_ServiceFilteringResponseArg'(Val) ->
    'enc_ServiceFilteringResponseArg'(Val, [<<48>>]).

'enc_ServiceFilteringResponseArg'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute countersValue(1)   External INCS3datatypes:CountersValue
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'INCS3datatypes':'enc_CountersValue'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute filteringCriteria(2)   External INCS3datatypes:FilteringCriteria
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'INCS3datatypes':'enc_FilteringCriteria'(Cindex2, [<<161>>]),

%%-------------------------------------------------
%% attribute extensions(3)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Extensions'(Cindex3, [<<162>>])
       end,

%%-------------------------------------------------
%% attribute responseCondition(4) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex4 of
intermediateResponse -> encode_tags([<<131>>], [0], 1);
lastResponse -> encode_tags([<<131>>], [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_ServiceFilteringResponseArg'(Tlv) ->
   'dec_ServiceFilteringResponseArg'(Tlv, [16]).

'dec_ServiceFilteringResponseArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute countersValue(1)   External INCS3datatypes:CountersValue
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'INCS3datatypes':'dec_CountersValue'(V1, [131072]),

%%-------------------------------------------------
%% attribute filteringCriteria(2)   External INCS3datatypes:FilteringCriteria
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'INCS3datatypes':'dec_FilteringCriteria'(V2, [131073]),

%%-------------------------------------------------
%% attribute extensions(3)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'INCS3datatypes':'dec_Extensions'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute responseCondition(4) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {case decode_integer(V4, []) of
0 -> intermediateResponse;
1 -> lastResponse;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end, TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

case Tlv5 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed
end,
   {'ServiceFilteringResponseArg', Term1, Term2, Term3, Term4}.



%%================================
%%  SetServiceProfileArg
%%================================
'enc_SetServiceProfileArg'(Val) ->
    'enc_SetServiceProfileArg'(Val, [<<48>>]).

'enc_SetServiceProfileArg'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute iNprofiles(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_SetServiceProfileArg_iNprofiles'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute extensions(2)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Extensions'(Cindex2, [<<161>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  SetServiceProfileArg_iNprofiles
%%================================
'enc_SetServiceProfileArg_iNprofiles'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_SetServiceProfileArg_iNprofiles_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_SetServiceProfileArg_iNprofiles_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_SetServiceProfileArg_iNprofiles_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'INCS3datatypes':'enc_INprofile'(H, [<<48>>]),
   'enc_SetServiceProfileArg_iNprofiles_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_SetServiceProfileArg'(Tlv) ->
   'dec_SetServiceProfileArg'(Tlv, [16]).

'dec_SetServiceProfileArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute iNprofiles(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_SetServiceProfileArg_iNprofiles'(V1, [131072]),

%%-------------------------------------------------
%% attribute extensions(2)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'INCS3datatypes':'dec_Extensions'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'SetServiceProfileArg', Term1, Term2}.

'dec_SetServiceProfileArg_iNprofiles'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['INCS3datatypes':'dec_INprofile'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  SplitLegArg
%%================================
'enc_SplitLegArg'(Val) ->
    'enc_SplitLegArg'(Val, [<<48>>]).

'enc_SplitLegArg'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute legToBeSplit(1)   External INCS3opsargs:LegID
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_LegID'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute newCallSegment(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute extensions(3)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Extensions'(Cindex3, [<<162>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_SplitLegArg'(Tlv) ->
   'dec_SplitLegArg'(Tlv, [16]).

'dec_SplitLegArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute legToBeSplit(1)   External INCS3opsargs:LegID
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_LegID'(V1, [131072]),

%%-------------------------------------------------
%% attribute newCallSegment(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val1 = decode_integer(V2, [131073]),
if 2 =< Val1, Val1 =< 10 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute extensions(3)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'INCS3datatypes':'dec_Extensions'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'SplitLegArg', Term1, Term2, Term3}.



%%================================
%%  StatusReportArg
%%================================
'enc_StatusReportArg'(Val) ->
    'enc_StatusReportArg'(Val, [<<48>>]).

'enc_StatusReportArg'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5} = Val,

%%-------------------------------------------------
%% attribute resourceStatus(1) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex1 of
busy -> encode_tags([<<128>>], [0], 1);
idle -> encode_tags([<<128>>], [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end
       end,

%%-------------------------------------------------
%% attribute correlationID(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute resourceID(3)   External INCS3datatypes:ResourceID OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_ResourceID'(Cindex3, [<<162>>])
       end,

%%-------------------------------------------------
%% attribute extensions(4)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Extensions'(Cindex4, [<<163>>])
       end,

%%-------------------------------------------------
%% attribute reportCondition(5) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex5 of
statusReport -> encode_tags([<<132>>], [0], 1);
timerExpired -> encode_tags([<<132>>], [1], 1);
canceled -> encode_tags([<<132>>], [2], 1);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_StatusReportArg'(Tlv) ->
   'dec_StatusReportArg'(Tlv, [16]).

'dec_StatusReportArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute resourceStatus(1) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {case decode_integer(V1, []) of
0 -> busy;
1 -> idle;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end, TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute correlationID(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
Val1 = decode_octet_string(V2, []),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 27 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute resourceID(3)   External INCS3datatypes:ResourceID OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'INCS3datatypes':'dec_ResourceID'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute extensions(4)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'INCS3datatypes':'dec_Extensions'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute reportCondition(5) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {case decode_integer(V5, []) of
0 -> statusReport;
1 -> timerExpired;
2 -> canceled;
Default2 -> exit({error,{asn1,{illegal_enumerated,Default2}}})
end, TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

case Tlv6 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv6}}}) % extra fields not allowed
end,
   {'StatusReportArg', Term1, Term2, Term3, Term4, Term5}.



%%================================
%%  TAnswerArg
%%================================
'enc_TAnswerArg'(Val) ->
    'enc_TAnswerArg'(Val, [<<48>>]).

'enc_TAnswerArg'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8, Cindex9} = Val,

%%-------------------------------------------------
%% attribute dpSpecificCommonParameters(1)   External INCS3datatypes:DpSpecificCommonParameters
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'INCS3datatypes':'enc_DpSpecificCommonParameters'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute calledPartyBusinessGroupID(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute calledPartySubaddress(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute calledFacilityGroup(4)   External INCS3datatypes:FacilityGroup OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_FacilityGroup'(Cindex4, [<<163>>])
       end,

%%-------------------------------------------------
%% attribute calledFacilityGroupMember(5) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex5, [<<132>>])
       end,

%%-------------------------------------------------
%% attribute extensions(6)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Extensions'(Cindex6, [<<165>>])
       end,

%%-------------------------------------------------
%% attribute componentType(7) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex7 of
anny -> encode_tags([<<134>>], [0], 1);
invoke -> encode_tags([<<134>>], [1], 1);
rResult -> encode_tags([<<134>>], [2], 1);
rError -> encode_tags([<<134>>], [3], 1);
rReject -> encode_tags([<<134>>], [4], 1);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end
       end,

%%-------------------------------------------------
%% attribute component(8)   External INCS3datatypes:Component OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case Cindex8 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Component'(Cindex8, [<<167>>])
       end,

%%-------------------------------------------------
%% attribute componentCorrelationID(9) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes9,EncLen9} =  case Cindex9 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex9, [<<136>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_TAnswerArg'(Tlv) ->
   'dec_TAnswerArg'(Tlv, [16]).

'dec_TAnswerArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute dpSpecificCommonParameters(1)   External INCS3datatypes:DpSpecificCommonParameters
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'INCS3datatypes':'dec_DpSpecificCommonParameters'(V1, [131072]),

%%-------------------------------------------------
%% attribute calledPartyBusinessGroupID(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {decode_octet_string(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute calledPartySubaddress(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {begin
Val1 = decode_octet_string(V3, []),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 27 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute calledFacilityGroup(4)   External INCS3datatypes:FacilityGroup OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'INCS3datatypes':'dec_FacilityGroup'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute calledFacilityGroupMember(5) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {decode_integer(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute extensions(6)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {'INCS3datatypes':'dec_Extensions'(V6, []), TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute componentType(7) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {case decode_integer(V7, []) of
0 -> anny;
1 -> invoke;
2 -> rResult;
3 -> rError;
4 -> rReject;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end, TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

%%-------------------------------------------------
%% attribute component(8)   External INCS3datatypes:Component OPTIONAL
%%-------------------------------------------------
{Term8,Tlv9} = case Tlv8 of
[{131079,V8}|TempTlv9] ->
    {'INCS3datatypes':'dec_Component'(V8, []), TempTlv9};
    _ ->
        { asn1_NOVALUE, Tlv8}
end,

%%-------------------------------------------------
%% attribute componentCorrelationID(9) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term9,Tlv10} = case Tlv9 of
[{131080,V9}|TempTlv10] ->
    {decode_integer(V9, []), TempTlv10};
    _ ->
        { asn1_NOVALUE, Tlv9}
end,

case Tlv10 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv10}}}) % extra fields not allowed
end,
   {'TAnswerArg', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9}.



%%================================
%%  TBusyArg
%%================================
'enc_TBusyArg'(Val) ->
    'enc_TBusyArg'(Val, [<<48>>]).

'enc_TBusyArg'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8, Cindex9, Cindex10} = Val,

%%-------------------------------------------------
%% attribute dpSpecificCommonParameters(1)   External INCS3datatypes:DpSpecificCommonParameters
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'INCS3datatypes':'enc_DpSpecificCommonParameters'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute busyCause(2) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex2 of
normal -> encode_tags([<<129>>], [0], 1);
originationDenied -> encode_tags([<<129>>], [1], 1);
collectDigits -> encode_tags([<<129>>], [2], 1);
authorisationFailure -> encode_tags([<<129>>], [3], 1);
bPtyAlerted -> encode_tags([<<129>>], [4], 1);
noIndication -> encode_tags([<<129>>], [5], 1);
aPtyAbandon -> encode_tags([<<129>>], [6], 1);
invalidCollectedInformation -> encode_tags([<<129>>], [7], 1);
collectInformationFailure -> encode_tags([<<129>>], [8], 1);
aPtyDisc -> encode_tags([<<129>>], [9], 1);
bPtyDisc -> encode_tags([<<129>>], [10], 1);
routeSelectFailure -> encode_tags([<<129>>], [11], 1);
oNoAnswer -> encode_tags([<<129>>], [12], 1);
terminationDenied -> encode_tags([<<129>>], [13], 1);
notReachable -> encode_tags([<<129>>], [14], 1);
bPtyNoAnswer -> encode_tags([<<129>>], [15], 1);
bPtyBusyUDUB -> encode_tags([<<129>>], [16], 1);
bPtyBusyNDUB -> encode_tags([<<129>>], [17], 1);
ss7Failure -> encode_tags([<<129>>], [18], 1);
calledPartyRejected -> encode_tags([<<129>>], [19], 1);
tException -> encode_tags([<<129>>], [20], 1);
routeFailure1 -> encode_tags([<<129>>], [21], 1);
routeFailure2 -> encode_tags([<<129>>], [22], 1);
ssActivating -> encode_tags([<<129>>], [23], 1);
conversationTimeout -> encode_tags([<<129>>], [24], 1);
noCircuitAvailable -> encode_tags([<<129>>], [25], 1);
coreNotification -> encode_tags([<<129>>], [26], 1);
unsupportedMedia -> encode_tags([<<129>>], [27], 1);
numberIncomplete -> encode_tags([<<129>>], [28], 1);
invalidNumber -> encode_tags([<<129>>], [29], 1);
unassignedNumber -> encode_tags([<<129>>], [30], 1);
doNotDisturb -> encode_tags([<<129>>], [31], 1);
externalControlled -> encode_tags([<<129>>], [32], 1);
systemFailure -> encode_tags([<<129>>], [33], 1);
applicationNotification -> encode_tags([<<129>>], [34], 1);
referOk -> encode_tags([<<129>>], [35], 1);
referFailure -> encode_tags([<<129>>], [36], 1);
hole -> encode_tags([<<129>>], [37], 1);
hold -> encode_tags([<<129>>], [38], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end
       end,

%%-------------------------------------------------
%% attribute calledPartyBusinessGroupID(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute calledPartySubaddress(4) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex4, [<<131>>])
       end,

%%-------------------------------------------------
%% attribute originalCalledPartyID(5) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex5, [<<132>>])
       end,

%%-------------------------------------------------
%% attribute redirectingPartyID(6) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex6, [<<133>>])
       end,

%%-------------------------------------------------
%% attribute redirectionInformation(7) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex7, [<<134>>])
       end,

%%-------------------------------------------------
%% attribute routeList(8)   External INCS3datatypes:RouteList OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case Cindex8 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_RouteList'(Cindex8, [<<167>>])
       end,

%%-------------------------------------------------
%% attribute travellingClassMark(9) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes9,EncLen9} =  case Cindex9 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex9, [<<136>>])
       end,

%%-------------------------------------------------
%% attribute extensions(10)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes10,EncLen10} =  case Cindex10 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Extensions'(Cindex10, [<<169>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_TBusyArg'(Tlv) ->
   'dec_TBusyArg'(Tlv, [16]).

'dec_TBusyArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute dpSpecificCommonParameters(1)   External INCS3datatypes:DpSpecificCommonParameters
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'INCS3datatypes':'dec_DpSpecificCommonParameters'(V1, [131072]),

%%-------------------------------------------------
%% attribute busyCause(2) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {case decode_integer(V2, []) of
0 -> normal;
1 -> originationDenied;
2 -> collectDigits;
3 -> authorisationFailure;
4 -> bPtyAlerted;
5 -> noIndication;
6 -> aPtyAbandon;
7 -> invalidCollectedInformation;
8 -> collectInformationFailure;
9 -> aPtyDisc;
10 -> bPtyDisc;
11 -> routeSelectFailure;
12 -> oNoAnswer;
13 -> terminationDenied;
14 -> notReachable;
15 -> bPtyNoAnswer;
16 -> bPtyBusyUDUB;
17 -> bPtyBusyNDUB;
18 -> ss7Failure;
19 -> calledPartyRejected;
20 -> tException;
21 -> routeFailure1;
22 -> routeFailure2;
23 -> ssActivating;
24 -> conversationTimeout;
25 -> noCircuitAvailable;
26 -> coreNotification;
27 -> unsupportedMedia;
28 -> numberIncomplete;
29 -> invalidNumber;
30 -> unassignedNumber;
31 -> doNotDisturb;
32 -> externalControlled;
33 -> systemFailure;
34 -> applicationNotification;
35 -> referOk;
36 -> referFailure;
37 -> hole;
38 -> hold;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute calledPartyBusinessGroupID(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {decode_octet_string(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute calledPartySubaddress(4) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {begin
Val1 = decode_octet_string(V4, []),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 27 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute originalCalledPartyID(5) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {begin
Val2 = decode_octet_string(V5, []),
C2 = byte_size(Val2),
if 1 =< C2, C2 =< 15 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute redirectingPartyID(6) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {begin
Val3 = decode_octet_string(V6, []),
C3 = byte_size(Val3),
if 1 =< C3, C3 =< 27 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute redirectionInformation(7) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {begin
Val4 = decode_octet_string(V7, []),
C4 = byte_size(Val4),
if C4 =:= 2 ->
Val4;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

%%-------------------------------------------------
%% attribute routeList(8)   External INCS3datatypes:RouteList OPTIONAL
%%-------------------------------------------------
{Term8,Tlv9} = case Tlv8 of
[{131079,V8}|TempTlv9] ->
    {'INCS3datatypes':'dec_RouteList'(V8, []), TempTlv9};
    _ ->
        { asn1_NOVALUE, Tlv8}
end,

%%-------------------------------------------------
%% attribute travellingClassMark(9) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term9,Tlv10} = case Tlv9 of
[{131080,V9}|TempTlv10] ->
    {begin
Val5 = decode_octet_string(V9, []),
C5 = byte_size(Val5),
if 1 =< C5, C5 =< 27 ->
Val5;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv10};
    _ ->
        { asn1_NOVALUE, Tlv9}
end,

%%-------------------------------------------------
%% attribute extensions(10)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term10,Tlv11} = case Tlv10 of
[{131081,V10}|TempTlv11] ->
    {'INCS3datatypes':'dec_Extensions'(V10, []), TempTlv11};
    _ ->
        { asn1_NOVALUE, Tlv10}
end,

case Tlv11 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv11}}}) % extra fields not allowed
end,
   {'TBusyArg', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9, Term10}.



%%================================
%%  TDisconnectArg
%%================================
'enc_TDisconnectArg'(Val) ->
    'enc_TDisconnectArg'(Val, [<<48>>]).

'enc_TDisconnectArg'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8, Cindex9, Cindex10, Cindex11} = Val,

%%-------------------------------------------------
%% attribute dpSpecificCommonParameters(1)   External INCS3datatypes:DpSpecificCommonParameters
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'INCS3datatypes':'enc_DpSpecificCommonParameters'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute calledPartyBusinessGroupID(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute calledPartySubaddress(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute calledFacilityGroup(4)   External INCS3datatypes:FacilityGroup OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_FacilityGroup'(Cindex4, [<<163>>])
       end,

%%-------------------------------------------------
%% attribute calledFacilityGroupMember(5) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex5, [<<132>>])
       end,

%%-------------------------------------------------
%% attribute releaseCause(6) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex6 of
normal -> encode_tags([<<133>>], [0], 1);
originationDenied -> encode_tags([<<133>>], [1], 1);
collectDigits -> encode_tags([<<133>>], [2], 1);
authorisationFailure -> encode_tags([<<133>>], [3], 1);
bPtyAlerted -> encode_tags([<<133>>], [4], 1);
noIndication -> encode_tags([<<133>>], [5], 1);
aPtyAbandon -> encode_tags([<<133>>], [6], 1);
invalidCollectedInformation -> encode_tags([<<133>>], [7], 1);
collectInformationFailure -> encode_tags([<<133>>], [8], 1);
aPtyDisc -> encode_tags([<<133>>], [9], 1);
bPtyDisc -> encode_tags([<<133>>], [10], 1);
routeSelectFailure -> encode_tags([<<133>>], [11], 1);
oNoAnswer -> encode_tags([<<133>>], [12], 1);
terminationDenied -> encode_tags([<<133>>], [13], 1);
notReachable -> encode_tags([<<133>>], [14], 1);
bPtyNoAnswer -> encode_tags([<<133>>], [15], 1);
bPtyBusyUDUB -> encode_tags([<<133>>], [16], 1);
bPtyBusyNDUB -> encode_tags([<<133>>], [17], 1);
ss7Failure -> encode_tags([<<133>>], [18], 1);
calledPartyRejected -> encode_tags([<<133>>], [19], 1);
tException -> encode_tags([<<133>>], [20], 1);
routeFailure1 -> encode_tags([<<133>>], [21], 1);
routeFailure2 -> encode_tags([<<133>>], [22], 1);
ssActivating -> encode_tags([<<133>>], [23], 1);
conversationTimeout -> encode_tags([<<133>>], [24], 1);
noCircuitAvailable -> encode_tags([<<133>>], [25], 1);
coreNotification -> encode_tags([<<133>>], [26], 1);
unsupportedMedia -> encode_tags([<<133>>], [27], 1);
numberIncomplete -> encode_tags([<<133>>], [28], 1);
invalidNumber -> encode_tags([<<133>>], [29], 1);
unassignedNumber -> encode_tags([<<133>>], [30], 1);
doNotDisturb -> encode_tags([<<133>>], [31], 1);
externalControlled -> encode_tags([<<133>>], [32], 1);
systemFailure -> encode_tags([<<133>>], [33], 1);
applicationNotification -> encode_tags([<<133>>], [34], 1);
referOk -> encode_tags([<<133>>], [35], 1);
referFailure -> encode_tags([<<133>>], [36], 1);
hole -> encode_tags([<<133>>], [37], 1);
hold -> encode_tags([<<133>>], [38], 1);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end
       end,

%%-------------------------------------------------
%% attribute extensions(7)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Extensions'(Cindex7, [<<166>>])
       end,

%%-------------------------------------------------
%% attribute connectTime(8) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case Cindex8 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex8, [<<135>>])
       end,

%%-------------------------------------------------
%% attribute componentType(9) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes9,EncLen9} =  case Cindex9 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex9 of
anny -> encode_tags([<<136>>], [0], 1);
invoke -> encode_tags([<<136>>], [1], 1);
rResult -> encode_tags([<<136>>], [2], 1);
rError -> encode_tags([<<136>>], [3], 1);
rReject -> encode_tags([<<136>>], [4], 1);
Enumval6 -> exit({error,{asn1, {enumerated_not_in_range,Enumval6}}})
end
       end,

%%-------------------------------------------------
%% attribute component(10)   External INCS3datatypes:Component OPTIONAL
%%-------------------------------------------------
   {EncBytes10,EncLen10} =  case Cindex10 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Component'(Cindex10, [<<169>>])
       end,

%%-------------------------------------------------
%% attribute componentCorrelationID(11) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes11,EncLen11} =  case Cindex11 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex11, [<<138>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10, EncBytes11],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10 + EncLen11,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_TDisconnectArg'(Tlv) ->
   'dec_TDisconnectArg'(Tlv, [16]).

'dec_TDisconnectArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute dpSpecificCommonParameters(1)   External INCS3datatypes:DpSpecificCommonParameters
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'INCS3datatypes':'dec_DpSpecificCommonParameters'(V1, [131072]),

%%-------------------------------------------------
%% attribute calledPartyBusinessGroupID(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {decode_octet_string(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute calledPartySubaddress(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {begin
Val1 = decode_octet_string(V3, []),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 27 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute calledFacilityGroup(4)   External INCS3datatypes:FacilityGroup OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'INCS3datatypes':'dec_FacilityGroup'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute calledFacilityGroupMember(5) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {decode_integer(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute releaseCause(6) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {case decode_integer(V6, []) of
0 -> normal;
1 -> originationDenied;
2 -> collectDigits;
3 -> authorisationFailure;
4 -> bPtyAlerted;
5 -> noIndication;
6 -> aPtyAbandon;
7 -> invalidCollectedInformation;
8 -> collectInformationFailure;
9 -> aPtyDisc;
10 -> bPtyDisc;
11 -> routeSelectFailure;
12 -> oNoAnswer;
13 -> terminationDenied;
14 -> notReachable;
15 -> bPtyNoAnswer;
16 -> bPtyBusyUDUB;
17 -> bPtyBusyNDUB;
18 -> ss7Failure;
19 -> calledPartyRejected;
20 -> tException;
21 -> routeFailure1;
22 -> routeFailure2;
23 -> ssActivating;
24 -> conversationTimeout;
25 -> noCircuitAvailable;
26 -> coreNotification;
27 -> unsupportedMedia;
28 -> numberIncomplete;
29 -> invalidNumber;
30 -> unassignedNumber;
31 -> doNotDisturb;
32 -> externalControlled;
33 -> systemFailure;
34 -> applicationNotification;
35 -> referOk;
36 -> referFailure;
37 -> hole;
38 -> hold;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end, TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute extensions(7)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {'INCS3datatypes':'dec_Extensions'(V7, []), TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

%%-------------------------------------------------
%% attribute connectTime(8) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term8,Tlv9} = case Tlv8 of
[{131079,V8}|TempTlv9] ->
    {begin
Val2 = decode_integer(V8, []),
if 0 =< Val2, Val2 =< 2147483647 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv9};
    _ ->
        { asn1_NOVALUE, Tlv8}
end,

%%-------------------------------------------------
%% attribute componentType(9) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term9,Tlv10} = case Tlv9 of
[{131080,V9}|TempTlv10] ->
    {case decode_integer(V9, []) of
0 -> anny;
1 -> invoke;
2 -> rResult;
3 -> rError;
4 -> rReject;
Default2 -> exit({error,{asn1,{illegal_enumerated,Default2}}})
end, TempTlv10};
    _ ->
        { asn1_NOVALUE, Tlv9}
end,

%%-------------------------------------------------
%% attribute component(10)   External INCS3datatypes:Component OPTIONAL
%%-------------------------------------------------
{Term10,Tlv11} = case Tlv10 of
[{131081,V10}|TempTlv11] ->
    {'INCS3datatypes':'dec_Component'(V10, []), TempTlv11};
    _ ->
        { asn1_NOVALUE, Tlv10}
end,

%%-------------------------------------------------
%% attribute componentCorrelationID(11) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term11,Tlv12} = case Tlv11 of
[{131082,V11}|TempTlv12] ->
    {decode_integer(V11, []), TempTlv12};
    _ ->
        { asn1_NOVALUE, Tlv11}
end,

case Tlv12 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv12}}}) % extra fields not allowed
end,
   {'TDisconnectArg', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9, Term10, Term11}.



%%================================
%%  TermAttemptAuthorizedArg
%%================================
'enc_TermAttemptAuthorizedArg'(Val) ->
    'enc_TermAttemptAuthorizedArg'(Val, [<<48>>]).

'enc_TermAttemptAuthorizedArg'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8, Cindex9, Cindex10, Cindex11} = Val,

%%-------------------------------------------------
%% attribute dpSpecificCommonParameters(1)   External INCS3datatypes:DpSpecificCommonParameters
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'INCS3datatypes':'enc_DpSpecificCommonParameters'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute calledPartyBusinessGroupID(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute calledPartySubaddress(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute callingPartyBusinessGroupID(4) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex4, [<<131>>])
       end,

%%-------------------------------------------------
%% attribute originalCalledPartyID(5) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex5, [<<132>>])
       end,

%%-------------------------------------------------
%% attribute redirectingPartyID(6) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex6, [<<133>>])
       end,

%%-------------------------------------------------
%% attribute redirectionInformation(7) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex7, [<<134>>])
       end,

%%-------------------------------------------------
%% attribute routeList(8)   External INCS3datatypes:RouteList OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case Cindex8 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_RouteList'(Cindex8, [<<167>>])
       end,

%%-------------------------------------------------
%% attribute travellingClassMark(9) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes9,EncLen9} =  case Cindex9 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex9, [<<136>>])
       end,

%%-------------------------------------------------
%% attribute extensions(10)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes10,EncLen10} =  case Cindex10 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Extensions'(Cindex10, [<<169>>])
       end,

%%-------------------------------------------------
%% attribute callingPartySubaddress(11) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes11,EncLen11} =  case Cindex11 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex11, [<<138>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10, EncBytes11],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10 + EncLen11,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_TermAttemptAuthorizedArg'(Tlv) ->
   'dec_TermAttemptAuthorizedArg'(Tlv, [16]).

'dec_TermAttemptAuthorizedArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute dpSpecificCommonParameters(1)   External INCS3datatypes:DpSpecificCommonParameters
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'INCS3datatypes':'dec_DpSpecificCommonParameters'(V1, [131072]),

%%-------------------------------------------------
%% attribute calledPartyBusinessGroupID(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {decode_octet_string(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute calledPartySubaddress(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {begin
Val1 = decode_octet_string(V3, []),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 27 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute callingPartyBusinessGroupID(4) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {decode_octet_string(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute originalCalledPartyID(5) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {begin
Val2 = decode_octet_string(V5, []),
C2 = byte_size(Val2),
if 1 =< C2, C2 =< 15 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute redirectingPartyID(6) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {begin
Val3 = decode_octet_string(V6, []),
C3 = byte_size(Val3),
if 1 =< C3, C3 =< 27 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute redirectionInformation(7) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {begin
Val4 = decode_octet_string(V7, []),
C4 = byte_size(Val4),
if C4 =:= 2 ->
Val4;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

%%-------------------------------------------------
%% attribute routeList(8)   External INCS3datatypes:RouteList OPTIONAL
%%-------------------------------------------------
{Term8,Tlv9} = case Tlv8 of
[{131079,V8}|TempTlv9] ->
    {'INCS3datatypes':'dec_RouteList'(V8, []), TempTlv9};
    _ ->
        { asn1_NOVALUE, Tlv8}
end,

%%-------------------------------------------------
%% attribute travellingClassMark(9) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term9,Tlv10} = case Tlv9 of
[{131080,V9}|TempTlv10] ->
    {begin
Val5 = decode_octet_string(V9, []),
C5 = byte_size(Val5),
if 1 =< C5, C5 =< 27 ->
Val5;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv10};
    _ ->
        { asn1_NOVALUE, Tlv9}
end,

%%-------------------------------------------------
%% attribute extensions(10)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term10,Tlv11} = case Tlv10 of
[{131081,V10}|TempTlv11] ->
    {'INCS3datatypes':'dec_Extensions'(V10, []), TempTlv11};
    _ ->
        { asn1_NOVALUE, Tlv10}
end,

%%-------------------------------------------------
%% attribute callingPartySubaddress(11) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term11,Tlv12} = case Tlv11 of
[{131082,V11}|TempTlv12] ->
    {begin
Val6 = decode_octet_string(V11, []),
C6 = byte_size(Val6),
if 1 =< C6, C6 =< 27 ->
Val6;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv12};
    _ ->
        { asn1_NOVALUE, Tlv11}
end,

case Tlv12 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv12}}}) % extra fields not allowed
end,
   {'TermAttemptAuthorizedArg', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9, Term10, Term11}.



%%================================
%%  TerminationAttemptArg
%%================================
'enc_TerminationAttemptArg'(Val) ->
    'enc_TerminationAttemptArg'(Val, [<<48>>]).

'enc_TerminationAttemptArg'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8, Cindex9, Cindex10, Cindex11} = Val,

%%-------------------------------------------------
%% attribute dpSpecificCommonParameters(1)   External INCS3datatypes:DpSpecificCommonParameters
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'INCS3datatypes':'enc_DpSpecificCommonParameters'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute calledPartyBusinessGroupID(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute calledPartySubaddress(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute callingPartyBusinessGroupID(4) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex4, [<<131>>])
       end,

%%-------------------------------------------------
%% attribute callingPartySubaddress(5) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex5, [<<132>>])
       end,

%%-------------------------------------------------
%% attribute originalCalledPartyID(6) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex6, [<<133>>])
       end,

%%-------------------------------------------------
%% attribute redirectingPartyID(7) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex7, [<<134>>])
       end,

%%-------------------------------------------------
%% attribute redirectionInformation(8) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case Cindex8 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex8, [<<135>>])
       end,

%%-------------------------------------------------
%% attribute routeList(9)   External INCS3datatypes:RouteList OPTIONAL
%%-------------------------------------------------
   {EncBytes9,EncLen9} =  case Cindex9 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_RouteList'(Cindex9, [<<168>>])
       end,

%%-------------------------------------------------
%% attribute travellingClassMark(10) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes10,EncLen10} =  case Cindex10 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex10, [<<137>>])
       end,

%%-------------------------------------------------
%% attribute extensions(11)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes11,EncLen11} =  case Cindex11 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Extensions'(Cindex11, [<<170>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10, EncBytes11],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10 + EncLen11,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_TerminationAttemptArg'(Tlv) ->
   'dec_TerminationAttemptArg'(Tlv, [16]).

'dec_TerminationAttemptArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute dpSpecificCommonParameters(1)   External INCS3datatypes:DpSpecificCommonParameters
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'INCS3datatypes':'dec_DpSpecificCommonParameters'(V1, [131072]),

%%-------------------------------------------------
%% attribute calledPartyBusinessGroupID(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {decode_octet_string(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute calledPartySubaddress(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {begin
Val1 = decode_octet_string(V3, []),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 27 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute callingPartyBusinessGroupID(4) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {decode_octet_string(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute callingPartySubaddress(5) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {begin
Val2 = decode_octet_string(V5, []),
C2 = byte_size(Val2),
if 1 =< C2, C2 =< 27 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute originalCalledPartyID(6) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {begin
Val3 = decode_octet_string(V6, []),
C3 = byte_size(Val3),
if 1 =< C3, C3 =< 15 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute redirectingPartyID(7) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {begin
Val4 = decode_octet_string(V7, []),
C4 = byte_size(Val4),
if 1 =< C4, C4 =< 27 ->
Val4;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

%%-------------------------------------------------
%% attribute redirectionInformation(8) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term8,Tlv9} = case Tlv8 of
[{131079,V8}|TempTlv9] ->
    {begin
Val5 = decode_octet_string(V8, []),
C5 = byte_size(Val5),
if C5 =:= 2 ->
Val5;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv9};
    _ ->
        { asn1_NOVALUE, Tlv8}
end,

%%-------------------------------------------------
%% attribute routeList(9)   External INCS3datatypes:RouteList OPTIONAL
%%-------------------------------------------------
{Term9,Tlv10} = case Tlv9 of
[{131080,V9}|TempTlv10] ->
    {'INCS3datatypes':'dec_RouteList'(V9, []), TempTlv10};
    _ ->
        { asn1_NOVALUE, Tlv9}
end,

%%-------------------------------------------------
%% attribute travellingClassMark(10) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term10,Tlv11} = case Tlv10 of
[{131081,V10}|TempTlv11] ->
    {begin
Val6 = decode_octet_string(V10, []),
C6 = byte_size(Val6),
if 1 =< C6, C6 =< 27 ->
Val6;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv11};
    _ ->
        { asn1_NOVALUE, Tlv10}
end,

%%-------------------------------------------------
%% attribute extensions(11)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term11,Tlv12} = case Tlv11 of
[{131082,V11}|TempTlv12] ->
    {'INCS3datatypes':'dec_Extensions'(V11, []), TempTlv12};
    _ ->
        { asn1_NOVALUE, Tlv11}
end,

case Tlv12 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv12}}}) % extra fields not allowed
end,
   {'TerminationAttemptArg', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9, Term10, Term11}.



%%================================
%%  TNoAnswerArg
%%================================
'enc_TNoAnswerArg'(Val) ->
    'enc_TNoAnswerArg'(Val, [<<48>>]).

'enc_TNoAnswerArg'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8, Cindex9, Cindex10, Cindex11, Cindex12, Cindex13} = Val,

%%-------------------------------------------------
%% attribute dpSpecificCommonParameters(1)   External INCS3datatypes:DpSpecificCommonParameters
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'INCS3datatypes':'enc_DpSpecificCommonParameters'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute calledPartyBusinessGroupID(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute calledPartySubaddress(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute calledFacilityGroup(4)   External INCS3datatypes:FacilityGroup OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_FacilityGroup'(Cindex4, [<<163>>])
       end,

%%-------------------------------------------------
%% attribute calledFacilityGroupMember(5) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex5, [<<132>>])
       end,

%%-------------------------------------------------
%% attribute originalCalledPartyID(6) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex6, [<<133>>])
       end,

%%-------------------------------------------------
%% attribute redirectingPartyID(7) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex7, [<<134>>])
       end,

%%-------------------------------------------------
%% attribute redirectionInformation(8) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case Cindex8 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex8, [<<135>>])
       end,

%%-------------------------------------------------
%% attribute travellingClassMark(9) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes9,EncLen9} =  case Cindex9 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex9, [<<136>>])
       end,

%%-------------------------------------------------
%% attribute extensions(10)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes10,EncLen10} =  case Cindex10 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Extensions'(Cindex10, [<<169>>])
       end,

%%-------------------------------------------------
%% attribute componentType(11) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes11,EncLen11} =  case Cindex11 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex11 of
anny -> encode_tags([<<138>>], [0], 1);
invoke -> encode_tags([<<138>>], [1], 1);
rResult -> encode_tags([<<138>>], [2], 1);
rError -> encode_tags([<<138>>], [3], 1);
rReject -> encode_tags([<<138>>], [4], 1);
Enumval8 -> exit({error,{asn1, {enumerated_not_in_range,Enumval8}}})
end
       end,

%%-------------------------------------------------
%% attribute component(12)   External INCS3datatypes:Component OPTIONAL
%%-------------------------------------------------
   {EncBytes12,EncLen12} =  case Cindex12 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Component'(Cindex12, [<<171>>])
       end,

%%-------------------------------------------------
%% attribute componentCorrelationID(13) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes13,EncLen13} =  case Cindex13 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex13, [<<140>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10, EncBytes11, EncBytes12, EncBytes13],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10 + EncLen11 + EncLen12 + EncLen13,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_TNoAnswerArg'(Tlv) ->
   'dec_TNoAnswerArg'(Tlv, [16]).

'dec_TNoAnswerArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute dpSpecificCommonParameters(1)   External INCS3datatypes:DpSpecificCommonParameters
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'INCS3datatypes':'dec_DpSpecificCommonParameters'(V1, [131072]),

%%-------------------------------------------------
%% attribute calledPartyBusinessGroupID(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {decode_octet_string(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute calledPartySubaddress(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {begin
Val1 = decode_octet_string(V3, []),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 27 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute calledFacilityGroup(4)   External INCS3datatypes:FacilityGroup OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'INCS3datatypes':'dec_FacilityGroup'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute calledFacilityGroupMember(5) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {decode_integer(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute originalCalledPartyID(6) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {begin
Val2 = decode_octet_string(V6, []),
C2 = byte_size(Val2),
if 1 =< C2, C2 =< 15 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute redirectingPartyID(7) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {begin
Val3 = decode_octet_string(V7, []),
C3 = byte_size(Val3),
if 1 =< C3, C3 =< 27 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

%%-------------------------------------------------
%% attribute redirectionInformation(8) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term8,Tlv9} = case Tlv8 of
[{131079,V8}|TempTlv9] ->
    {begin
Val4 = decode_octet_string(V8, []),
C4 = byte_size(Val4),
if C4 =:= 2 ->
Val4;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv9};
    _ ->
        { asn1_NOVALUE, Tlv8}
end,

%%-------------------------------------------------
%% attribute travellingClassMark(9) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term9,Tlv10} = case Tlv9 of
[{131080,V9}|TempTlv10] ->
    {begin
Val5 = decode_octet_string(V9, []),
C5 = byte_size(Val5),
if 1 =< C5, C5 =< 27 ->
Val5;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv10};
    _ ->
        { asn1_NOVALUE, Tlv9}
end,

%%-------------------------------------------------
%% attribute extensions(10)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term10,Tlv11} = case Tlv10 of
[{131081,V10}|TempTlv11] ->
    {'INCS3datatypes':'dec_Extensions'(V10, []), TempTlv11};
    _ ->
        { asn1_NOVALUE, Tlv10}
end,

%%-------------------------------------------------
%% attribute componentType(11) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term11,Tlv12} = case Tlv11 of
[{131082,V11}|TempTlv12] ->
    {case decode_integer(V11, []) of
0 -> anny;
1 -> invoke;
2 -> rResult;
3 -> rError;
4 -> rReject;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end, TempTlv12};
    _ ->
        { asn1_NOVALUE, Tlv11}
end,

%%-------------------------------------------------
%% attribute component(12)   External INCS3datatypes:Component OPTIONAL
%%-------------------------------------------------
{Term12,Tlv13} = case Tlv12 of
[{131083,V12}|TempTlv13] ->
    {'INCS3datatypes':'dec_Component'(V12, []), TempTlv13};
    _ ->
        { asn1_NOVALUE, Tlv12}
end,

%%-------------------------------------------------
%% attribute componentCorrelationID(13) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term13,Tlv14} = case Tlv13 of
[{131084,V13}|TempTlv14] ->
    {decode_integer(V13, []), TempTlv14};
    _ ->
        { asn1_NOVALUE, Tlv13}
end,

case Tlv14 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv14}}}) % extra fields not allowed
end,
   {'TNoAnswerArg', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9, Term10, Term11, Term12, Term13}.



%%================================
%%  TSuspendedArg
%%================================
'enc_TSuspendedArg'(Val) ->
    'enc_TSuspendedArg'(Val, [<<48>>]).

'enc_TSuspendedArg'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute dpSpecificCommonParameters(1)   External INCS3datatypes:DpSpecificCommonParameters
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'INCS3datatypes':'enc_DpSpecificCommonParameters'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute legID(2)   External INCS3opsargs:LegID OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_LegID'(Cindex2, [<<161>>])
       end,

%%-------------------------------------------------
%% attribute extensions(3)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Extensions'(Cindex3, [<<162>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_TSuspendedArg'(Tlv) ->
   'dec_TSuspendedArg'(Tlv, [16]).

'dec_TSuspendedArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute dpSpecificCommonParameters(1)   External INCS3datatypes:DpSpecificCommonParameters
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'INCS3datatypes':'dec_DpSpecificCommonParameters'(V1, [131072]),

%%-------------------------------------------------
%% attribute legID(2)   External INCS3opsargs:LegID OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_LegID'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute extensions(3)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'INCS3datatypes':'dec_Extensions'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'TSuspendedArg', Term1, Term2, Term3}.



%%================================
%%  PlayAnnouncementArg
%%================================
'enc_PlayAnnouncementArg'(Val) ->
    'enc_PlayAnnouncementArg'(Val, [<<48>>]).

'enc_PlayAnnouncementArg'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5} = Val,

%%-------------------------------------------------
%% attribute informationToSend(1)   External INCS3datatypes:InformationToSend
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'INCS3datatypes':'enc_InformationToSend'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute disconnectFromIPForbidden(2) with type BOOLEAN DEFAULT = true
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_DEFAULT -> {<<>>,0};
         true -> {<<>>,0};
         _ ->
            encode_boolean(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute requestAnnouncementComplete(3) with type BOOLEAN DEFAULT = true
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_DEFAULT -> {<<>>,0};
         true -> {<<>>,0};
         _ ->
            encode_boolean(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute extensions(4)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Extensions'(Cindex4, [<<163>>])
       end,

%%-------------------------------------------------
%% attribute connectedParty(5) with type CHOICE OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_PlayAnnouncementArg_connectedParty'(Cindex5, [])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  PlayAnnouncementArg_connectedParty
%%================================
'enc_PlayAnnouncementArg_connectedParty'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      legID ->
         'enc_LegID'(element(2,Val), [<<164>>]);
      callSegmentID ->
         encode_integer(element(2,Val), [<<133>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_PlayAnnouncementArg'(Tlv) ->
   'dec_PlayAnnouncementArg'(Tlv, [16]).

'dec_PlayAnnouncementArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute informationToSend(1)   External INCS3datatypes:InformationToSend
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'INCS3datatypes':'dec_InformationToSend'(V1, [131072]),

%%-------------------------------------------------
%% attribute disconnectFromIPForbidden(2) with type BOOLEAN DEFAULT = true
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {decode_boolean(V2, []), TempTlv3};
    _ ->
        {true,Tlv2}
end,

%%-------------------------------------------------
%% attribute requestAnnouncementComplete(3) with type BOOLEAN DEFAULT = true
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {decode_boolean(V3, []), TempTlv4};
    _ ->
        {true,Tlv3}
end,

%%-------------------------------------------------
%% attribute extensions(4)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'INCS3datatypes':'dec_Extensions'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute connectedParty(5) with type CHOICE OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[V5 = {131076,_}|TempTlv6] ->
    {'dec_PlayAnnouncementArg_connectedParty'(V5, []), TempTlv6};
[V5 = {131077,_}|TempTlv6] ->
    {'dec_PlayAnnouncementArg_connectedParty'(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

case Tlv6 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv6}}}) % extra fields not allowed
end,
   {'PlayAnnouncementArg', Term1, Term2, Term3, Term4, Term5}.

'dec_PlayAnnouncementArg_connectedParty'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'legID'
    {131076, V1} -> 
        {legID, 'dec_LegID'(V1, [])};


%% 'callSegmentID'
    {131077, V1} -> 
        {callSegmentID, begin
Val1 = decode_integer(V1, []),
if 1 =< Val1, Val1 =< 10 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  PromptAndCollectUserInformationArg
%%================================
'enc_PromptAndCollectUserInformationArg'(Val) ->
    'enc_PromptAndCollectUserInformationArg'(Val, [<<48>>]).

'enc_PromptAndCollectUserInformationArg'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5} = Val,

%%-------------------------------------------------
%% attribute collectedInfo(1)   External INCS3datatypes:CollectedInfo
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'INCS3datatypes':'enc_CollectedInfo'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute disconnectFromIPForbidden(2) with type BOOLEAN DEFAULT = true
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_DEFAULT -> {<<>>,0};
         true -> {<<>>,0};
         _ ->
            encode_boolean(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute informationToSend(3)   External INCS3datatypes:InformationToSend OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_InformationToSend'(Cindex3, [<<162>>])
       end,

%%-------------------------------------------------
%% attribute extensions(4)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Extensions'(Cindex4, [<<163>>])
       end,

%%-------------------------------------------------
%% attribute callSegmentID(5) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex5, [<<132>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_PromptAndCollectUserInformationArg'(Tlv) ->
   'dec_PromptAndCollectUserInformationArg'(Tlv, [16]).

'dec_PromptAndCollectUserInformationArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute collectedInfo(1)   External INCS3datatypes:CollectedInfo
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'INCS3datatypes':'dec_CollectedInfo'(V1, [131072]),

%%-------------------------------------------------
%% attribute disconnectFromIPForbidden(2) with type BOOLEAN DEFAULT = true
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {decode_boolean(V2, []), TempTlv3};
    _ ->
        {true,Tlv2}
end,

%%-------------------------------------------------
%% attribute informationToSend(3)   External INCS3datatypes:InformationToSend OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'INCS3datatypes':'dec_InformationToSend'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute extensions(4)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'INCS3datatypes':'dec_Extensions'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute callSegmentID(5) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {begin
Val1 = decode_integer(V5, []),
if 1 =< Val1, Val1 =< 10 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

case Tlv6 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv6}}}) % extra fields not allowed
end,
   {'PromptAndCollectUserInformationArg', Term1, Term2, Term3, Term4, Term5}.



%%================================
%%  ReceivedInformationArg
%%================================
'enc_ReceivedInformationArg'(Val) ->
    'enc_ReceivedInformationArg'(Val, []).

'enc_ReceivedInformationArg'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      digitsResponse ->
         encode_restricted_string(element(2,Val), [<<128>>]);
      iA5Response ->
         encode_restricted_string(element(2,Val), [<<129>>]);
      modemdetected ->
         encode_boolean(element(2,Val), [<<130>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_ReceivedInformationArg'(Tlv) ->
   'dec_ReceivedInformationArg'(Tlv, []).

'dec_ReceivedInformationArg'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'digitsResponse'
    {131072, V1} -> 
        {digitsResponse, begin
Val1 = decode_octet_string(V1, []),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 27 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'iA5Response'
    {131073, V1} -> 
        {iA5Response, begin
binary_to_list(decode_restricted_string(V1, []))
end
};


%% 'modemdetected'
    {131074, V1} -> 
        {modemdetected, decode_boolean(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  PromptAndReceiveMessageArg
%%================================
'enc_PromptAndReceiveMessageArg'(Val) ->
    'enc_PromptAndReceiveMessageArg'(Val, [<<48>>]).

'enc_PromptAndReceiveMessageArg'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8} = Val,

%%-------------------------------------------------
%% attribute disconnectFromIPForbidden(1) with type BOOLEAN DEFAULT = true
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_DEFAULT -> {<<>>,0};
         true -> {<<>>,0};
         _ ->
            encode_boolean(Cindex1, [<<128>>])
       end,

%%-------------------------------------------------
%% attribute informationToSend(2)   External INCS3datatypes:InformationToSend OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_InformationToSend'(Cindex2, [<<161>>])
       end,

%%-------------------------------------------------
%% attribute extensions(3)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Extensions'(Cindex3, [<<163>>])
       end,

%%-------------------------------------------------
%% attribute subscriberID(4) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex4, [<<132>>])
       end,

%%-------------------------------------------------
%% attribute mailBoxID(5) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex5, [<<133>>])
       end,

%%-------------------------------------------------
%% attribute informationToRecord(6)   External INCS3datatypes:InformationToRecord
%%-------------------------------------------------
   {EncBytes6,EncLen6} = 'INCS3datatypes':'enc_InformationToRecord'(Cindex6, [<<166>>]),

%%-------------------------------------------------
%% attribute media(7) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes7,EncLen7} = case Cindex7 of
voiceMail -> encode_tags([<<135>>], [0], 1);
faxGroup3 -> encode_tags([<<135>>], [1], 1);
faxGroup4 -> encode_tags([<<135>>], [2], 1);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end,

%%-------------------------------------------------
%% attribute callSegmentID(8) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case Cindex8 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex8, [<<136>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_PromptAndReceiveMessageArg'(Tlv) ->
   'dec_PromptAndReceiveMessageArg'(Tlv, [16]).

'dec_PromptAndReceiveMessageArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute disconnectFromIPForbidden(1) with type BOOLEAN DEFAULT = true
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {decode_boolean(V1, []), TempTlv2};
    _ ->
        {true,Tlv1}
end,

%%-------------------------------------------------
%% attribute informationToSend(2)   External INCS3datatypes:InformationToSend OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'INCS3datatypes':'dec_InformationToSend'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute extensions(3)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131075,V3}|TempTlv4] ->
    {'INCS3datatypes':'dec_Extensions'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute subscriberID(4) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131076,V4}|TempTlv5] ->
    {begin
Val1 = decode_octet_string(V4, []),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 27 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute mailBoxID(5) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131077,V5}|TempTlv6] ->
    {begin
Val2 = decode_octet_string(V5, []),
C2 = byte_size(Val2),
if 1 =< C2, C2 =< 27 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute informationToRecord(6)   External INCS3datatypes:InformationToRecord
%%-------------------------------------------------
[V6|Tlv7] = Tlv6, 
Term6 = 'INCS3datatypes':'dec_InformationToRecord'(V6, [131078]),

%%-------------------------------------------------
%% attribute media(7) with type ENUMERATED
%%-------------------------------------------------
[V7|Tlv8] = Tlv7, 
Term7 = case decode_integer(V7, [131079]) of
0 -> voiceMail;
1 -> faxGroup3;
2 -> faxGroup4;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute callSegmentID(8) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term8,Tlv9} = case Tlv8 of
[{131080,V8}|TempTlv9] ->
    {begin
Val3 = decode_integer(V8, []),
if 1 =< Val3, Val3 =< 10 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv9};
    _ ->
        { asn1_NOVALUE, Tlv8}
end,

case Tlv9 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv9}}}) % extra fields not allowed
end,
   {'PromptAndReceiveMessageArg', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8}.



%%================================
%%  MessageReceivedArg
%%================================
'enc_MessageReceivedArg'(Val) ->
    'enc_MessageReceivedArg'(Val, [<<48>>]).

'enc_MessageReceivedArg'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute receivedStatus(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
messageComplete -> encode_tags([<<128>>], [0], 1);
messageInterrupted -> encode_tags([<<128>>], [1], 1);
messageTimeOut -> encode_tags([<<128>>], [2], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute recordedMessageID(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute recordedMessageUnits(3) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute extensions(4)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Extensions'(Cindex4, [<<163>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_MessageReceivedArg'(Tlv) ->
   'dec_MessageReceivedArg'(Tlv, [16]).

'dec_MessageReceivedArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute receivedStatus(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> messageComplete;
1 -> messageInterrupted;
2 -> messageTimeOut;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute recordedMessageID(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
Val1 = decode_integer(V2, []),
if 0 =< Val1, Val1 =< 2147483647 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute recordedMessageUnits(3) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {begin
Val2 = decode_integer(V3, []),
if 1 =< Val2, Val2 =< 27 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute extensions(4)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'INCS3datatypes':'dec_Extensions'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

case Tlv5 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed
end,
   {'MessageReceivedArg', Term1, Term2, Term3, Term4}.



%%================================
%%  ScriptCloseArg
%%================================
'enc_ScriptCloseArg'(Val) ->
    'enc_ScriptCloseArg'(Val, [<<48>>]).

'enc_ScriptCloseArg'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute uIScriptId(1)   External INCS3datatypes:Code
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'INCS3datatypes':'enc_Code'(Cindex1, []),

%%-------------------------------------------------
%% attribute uIScriptSpecificInfo(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex2, [<<128>>])
       end,

%%-------------------------------------------------
%% attribute extensions(3)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Extensions'(Cindex3, [<<161>>])
       end,

%%-------------------------------------------------
%% attribute callSegmentID(4) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex4, [<<130>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_ScriptCloseArg'(Tlv) ->
   'dec_ScriptCloseArg'(Tlv, [16]).

'dec_ScriptCloseArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute uIScriptId(1)   External INCS3datatypes:Code
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'INCS3datatypes':'dec_Code'(V1, []),

%%-------------------------------------------------
%% attribute uIScriptSpecificInfo(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131072,V2}|TempTlv3] ->
    {decode_octet_string(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute extensions(3)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131073,V3}|TempTlv4] ->
    {'INCS3datatypes':'dec_Extensions'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute callSegmentID(4) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131074,V4}|TempTlv5] ->
    {begin
Val1 = decode_integer(V4, []),
if 1 =< Val1, Val1 =< 10 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

case Tlv5 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed
end,
   {'ScriptCloseArg', Term1, Term2, Term3, Term4}.



%%================================
%%  ScriptEventArg
%%================================
'enc_ScriptEventArg'(Val) ->
    'enc_ScriptEventArg'(Val, [<<48>>]).

'enc_ScriptEventArg'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5} = Val,

%%-------------------------------------------------
%% attribute uIScriptId(1)   External INCS3datatypes:Code
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'INCS3datatypes':'enc_Code'(Cindex1, []),

%%-------------------------------------------------
%% attribute uIScriptResult(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex2, [<<128>>])
       end,

%%-------------------------------------------------
%% attribute extensions(3)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Extensions'(Cindex3, [<<161>>])
       end,

%%-------------------------------------------------
%% attribute callSegmentID(4) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex4, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute lastEventIndicator(5) with type BOOLEAN DEFAULT = false
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_DEFAULT -> {<<>>,0};
         false -> {<<>>,0};
         _ ->
            encode_boolean(Cindex5, [<<131>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_ScriptEventArg'(Tlv) ->
   'dec_ScriptEventArg'(Tlv, [16]).

'dec_ScriptEventArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute uIScriptId(1)   External INCS3datatypes:Code
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'INCS3datatypes':'dec_Code'(V1, []),

%%-------------------------------------------------
%% attribute uIScriptResult(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131072,V2}|TempTlv3] ->
    {decode_octet_string(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute extensions(3)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131073,V3}|TempTlv4] ->
    {'INCS3datatypes':'dec_Extensions'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute callSegmentID(4) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131074,V4}|TempTlv5] ->
    {begin
Val1 = decode_integer(V4, []),
if 1 =< Val1, Val1 =< 10 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute lastEventIndicator(5) with type BOOLEAN DEFAULT = false
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131075,V5}|TempTlv6] ->
    {decode_boolean(V5, []), TempTlv6};
    _ ->
        {false,Tlv5}
end,

case Tlv6 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv6}}}) % extra fields not allowed
end,
   {'ScriptEventArg', Term1, Term2, Term3, Term4, Term5}.



%%================================
%%  ScriptInformationArg
%%================================
'enc_ScriptInformationArg'(Val) ->
    'enc_ScriptInformationArg'(Val, [<<48>>]).

'enc_ScriptInformationArg'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute uIScriptId(1)   External INCS3datatypes:Code
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'INCS3datatypes':'enc_Code'(Cindex1, []),

%%-------------------------------------------------
%% attribute uIScriptSpecificInfo(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex2, [<<128>>])
       end,

%%-------------------------------------------------
%% attribute extensions(3)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Extensions'(Cindex3, [<<161>>])
       end,

%%-------------------------------------------------
%% attribute callSegmentID(4) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex4, [<<130>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_ScriptInformationArg'(Tlv) ->
   'dec_ScriptInformationArg'(Tlv, [16]).

'dec_ScriptInformationArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute uIScriptId(1)   External INCS3datatypes:Code
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'INCS3datatypes':'dec_Code'(V1, []),

%%-------------------------------------------------
%% attribute uIScriptSpecificInfo(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131072,V2}|TempTlv3] ->
    {decode_octet_string(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute extensions(3)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131073,V3}|TempTlv4] ->
    {'INCS3datatypes':'dec_Extensions'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute callSegmentID(4) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131074,V4}|TempTlv5] ->
    {begin
Val1 = decode_integer(V4, []),
if 1 =< Val1, Val1 =< 10 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

case Tlv5 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed
end,
   {'ScriptInformationArg', Term1, Term2, Term3, Term4}.



%%================================
%%  ScriptRunArg
%%================================
'enc_ScriptRunArg'(Val) ->
    'enc_ScriptRunArg'(Val, [<<48>>]).

'enc_ScriptRunArg'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5} = Val,

%%-------------------------------------------------
%% attribute uIScriptId(1)   External INCS3datatypes:Code
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'INCS3datatypes':'enc_Code'(Cindex1, []),

%%-------------------------------------------------
%% attribute uIScriptSpecificInfo(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex2, [<<128>>])
       end,

%%-------------------------------------------------
%% attribute extensions(3)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Extensions'(Cindex3, [<<161>>])
       end,

%%-------------------------------------------------
%% attribute disconnectFromIPForbidden(4) with type BOOLEAN DEFAULT = true
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_DEFAULT -> {<<>>,0};
         true -> {<<>>,0};
         _ ->
            encode_boolean(Cindex4, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute callSegmentID(5) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex5, [<<131>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_ScriptRunArg'(Tlv) ->
   'dec_ScriptRunArg'(Tlv, [16]).

'dec_ScriptRunArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute uIScriptId(1)   External INCS3datatypes:Code
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'INCS3datatypes':'dec_Code'(V1, []),

%%-------------------------------------------------
%% attribute uIScriptSpecificInfo(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131072,V2}|TempTlv3] ->
    {decode_octet_string(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute extensions(3)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131073,V3}|TempTlv4] ->
    {'INCS3datatypes':'dec_Extensions'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute disconnectFromIPForbidden(4) with type BOOLEAN DEFAULT = true
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131074,V4}|TempTlv5] ->
    {decode_boolean(V4, []), TempTlv5};
    _ ->
        {true,Tlv4}
end,

%%-------------------------------------------------
%% attribute callSegmentID(5) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131075,V5}|TempTlv6] ->
    {begin
Val1 = decode_integer(V5, []),
if 1 =< Val1, Val1 =< 10 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

case Tlv6 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv6}}}) % extra fields not allowed
end,
   {'ScriptRunArg', Term1, Term2, Term3, Term4, Term5}.



%%================================
%%  SpecializedResourceReportArg
%%================================
'enc_SpecializedResourceReportArg'(Val) ->
    'enc_SpecializedResourceReportArg'(Val, [<<5>>]).

'enc_SpecializedResourceReportArg'(Val, TagIn) ->
encode_null(Val, TagIn).


'dec_SpecializedResourceReportArg'(Tlv) ->
   'dec_SpecializedResourceReportArg'(Tlv, [5]).

'dec_SpecializedResourceReportArg'(Tlv, TagIn) ->
decode_null(Tlv, TagIn).



%%================================
%%  SRFCallGapArg
%%================================
'enc_SRFCallGapArg'(Val) ->
    'enc_SRFCallGapArg'(Val, [<<48>>]).

'enc_SRFCallGapArg'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute sRFgapCriteria(1)   External INCS3datatypes:SRFGapCriteria
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'INCS3datatypes':'enc_SRFGapCriteria'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute gapIndicators(2)   External INCS3datatypes:GapIndicators
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'INCS3datatypes':'enc_GapIndicators'(Cindex2, [<<161>>]),

%%-------------------------------------------------
%% attribute controlType(3) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex3 of
sCPOverloaded -> encode_tags([<<130>>], [0], 1);
manuallyInitiated -> encode_tags([<<130>>], [1], 1);
destinationOverload -> encode_tags([<<130>>], [2], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end
       end,

%%-------------------------------------------------
%% attribute extensions(4)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'INCS3datatypes':'enc_Extensions'(Cindex4, [<<163>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_SRFCallGapArg'(Tlv) ->
   'dec_SRFCallGapArg'(Tlv, [16]).

'dec_SRFCallGapArg'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute sRFgapCriteria(1)   External INCS3datatypes:SRFGapCriteria
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'INCS3datatypes':'dec_SRFGapCriteria'(V1, [131072]),

%%-------------------------------------------------
%% attribute gapIndicators(2)   External INCS3datatypes:GapIndicators
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'INCS3datatypes':'dec_GapIndicators'(V2, [131073]),

%%-------------------------------------------------
%% attribute controlType(3) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {case decode_integer(V3, []) of
0 -> sCPOverloaded;
1 -> manuallyInitiated;
2 -> destinationOverload;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute extensions(4)   External INCS3datatypes:Extensions OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'INCS3datatypes':'dec_Extensions'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

case Tlv5 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed
end,
   {'SRFCallGapArg', Term1, Term2, Term3, Term4}.

'leg1'() ->
<<1>>.

'leg2'() ->
<<2>>.


%%%
%%% Run-time functions.
%%%

'dialyzer-suppressions'(Arg) ->
    ok.

ber_decode_nif(B) ->
    asn1rt_nif:decode_ber_tlv(B).

collect_parts(TlvList) ->
    collect_parts(TlvList, []).

collect_parts([{_,L}|Rest], Acc) when is_list(L) ->
    collect_parts(Rest, [collect_parts(L)|Acc]);
collect_parts([{3,<<Unused,Bits/binary>>}|Rest], _Acc) ->
    collect_parts_bit(Rest, [Bits], Unused);
collect_parts([{_T,V}|Rest], Acc) ->
    collect_parts(Rest, [V|Acc]);
collect_parts([], Acc) ->
    list_to_binary(lists:reverse(Acc)).

collect_parts_bit([{3,<<Unused,Bits/binary>>}|Rest], Acc, Uacc) ->
    collect_parts_bit(Rest, [Bits|Acc], Unused + Uacc);
collect_parts_bit([], Acc, Uacc) ->
    list_to_binary([Uacc|lists:reverse(Acc)]).

decode_boolean(Tlv, TagIn) ->
    Val = match_tags(Tlv, TagIn),
    case Val of
        <<0:8>> ->
            false;
        <<_:8>> ->
            true;
        _ ->
            exit({error,{asn1,{decode_boolean,Val}}})
    end.

decode_integer(Tlv, TagIn) ->
    Bin = match_tags(Tlv, TagIn),
    Len = byte_size(Bin),
    <<Int:Len/signed-unit:8>> = Bin,
    Int.

decode_null(Tlv, Tags) ->
    Val = match_tags(Tlv, Tags),
    case Val of
        <<>> ->
            'NULL';
        _ ->
            exit({error,{asn1,{decode_null,Val}}})
    end.

decode_octet_string(Tlv, TagsIn) ->
    Bin = match_and_collect(Tlv, TagsIn),
    binary:copy(Bin).

decode_restricted_string(Tlv, TagsIn) ->
    match_and_collect(Tlv, TagsIn).

encode_boolean(true, TagIn) ->
    encode_tags(TagIn, [255], 1);
encode_boolean(false, TagIn) ->
    encode_tags(TagIn, [0], 1);
encode_boolean(X, _) ->
    exit({error,{asn1,{encode_boolean,X}}}).

encode_integer(Val) ->
    Bytes =
        if
            Val >= 0 ->
                encode_integer_pos(Val, []);
            true ->
                encode_integer_neg(Val, [])
        end,
    {Bytes,length(Bytes)}.

encode_integer(Val, Tag) when is_integer(Val) ->
    encode_tags(Tag, encode_integer(Val));
encode_integer(Val, _Tag) ->
    exit({error,{asn1,{encode_integer,Val}}}).

encode_integer_neg(- 1, [B1|_T] = L) when B1 > 127 ->
    L;
encode_integer_neg(N, Acc) ->
    encode_integer_neg(N bsr 8, [N band 255|Acc]).

encode_integer_pos(0, [B|_Acc] = L) when B < 128 ->
    L;
encode_integer_pos(N, Acc) ->
    encode_integer_pos(N bsr 8, [N band 255|Acc]).

encode_length(L) when L =< 127 ->
    {[L],1};
encode_length(L) ->
    Oct = minimum_octets(L),
    Len = length(Oct),
    if
        Len =< 126 ->
            {[128 bor Len|Oct],Len + 1};
        true ->
            exit({error,{asn1,too_long_length_oct,Len}})
    end.

encode_null(_Val, TagIn) ->
    encode_tags(TagIn, [], 0).

encode_restricted_string(OctetList, TagIn) when is_binary(OctetList) ->
    encode_tags(TagIn, OctetList, byte_size(OctetList));
encode_restricted_string(OctetList, TagIn) when is_list(OctetList) ->
    encode_tags(TagIn, OctetList, length(OctetList)).

encode_tags(TagIn, {BytesSoFar,LenSoFar}) ->
    encode_tags(TagIn, BytesSoFar, LenSoFar).

encode_tags([Tag|Trest], BytesSoFar, LenSoFar) ->
    {Bytes2,L2} = encode_length(LenSoFar),
    encode_tags(Trest,
                [Tag,Bytes2|BytesSoFar],
                LenSoFar + byte_size(Tag) + L2);
encode_tags([], BytesSoFar, LenSoFar) ->
    {BytesSoFar,LenSoFar}.

match_and_collect(Tlv, TagsIn) ->
    Val = match_tags(Tlv, TagsIn),
    case Val of
        [_|_] = PartList ->
            collect_parts(PartList);
        Bin when is_binary(Bin) ->
            Bin
    end.

match_tags({T,V}, [T]) ->
    V;
match_tags({T,V}, [T|Tt]) ->
    match_tags(V, Tt);
match_tags([{T,V}], [T|Tt]) ->
    match_tags(V, Tt);
match_tags([{T,_V}|_] = Vlist, [T]) ->
    Vlist;
match_tags(Tlv, []) ->
    Tlv;
match_tags({Tag,_V} = Tlv, [T|_Tt]) ->
    exit({error,{asn1,{wrong_tag,{{expected,T},{got,Tag,Tlv}}}}}).

minimum_octets(0, Acc) ->
    Acc;
minimum_octets(Val, Acc) ->
    minimum_octets(Val bsr 8, [Val band 255|Acc]).

minimum_octets(Val) ->
    minimum_octets(Val, []).
